<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1569325055</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Configuration
randomize();
joy_init();


global.crosshairX = 0;
global.crosshairY = 0;


main_camera = instance_create(x,y,controller_camera);
main_effects = instance_create(x,y,controller_effects);

global.default_shadow_yscale = 0.3;
global.music = true;

level_end = false;
global.level_complete = false;
global.pause = 0;

global.crosshair_scale = 1;
view_xview[0] = x;
view_yview[0] = y;

//Pause Menu
global.pauseMenu = false;
global.pauseController = instance_create(x,y,controller_pause);
instance_deactivate_object(global.pauseController);

//Level Build
level_built = false;

//Pathfinding
path_refresh = room_speed*1; // Updates the grid once per second
alarm[1] = path_refresh;
global.astar_grid = mp_grid_create(0,0,round(room_width/64),round(room_height/64),64,64);
mp_grid_add_instances(global.astar_grid,class_solid,false);

//GUI
guiSurface = surface_create(1920,1080);
global.total_value = 0;
score_time = room_speed*1.2;
score_time_current = 0;
score_value = 10;
score_string = 'KILL';

guiShieldAlertDraw = false;
guiShieldAlertTime = room_speed*0.5;
guiShieldAlertTimeCurrent = 0;

guiReloadAlertDraw = false;
guiReloadAlertTime = room_speed*0.5;
guiReloadAlertTimeCurrent = 0;

//Score

global.coins_turtle1 = 1;
global.coins_turtle2 = 2;
global.coins_turtle3 = 3;
global.coins_duck1 = 3;
global.coins_duck2 = 4;
global.coins_duck3 = 5;

global.score_kill = 10;
global.score_headshot = 5;

global.score_doublekill = 5;
global.score_triplekill = 10;
global.score_multikill = 15;

//Prices
global.price_checkpoint1 = 2000;
global.price_checkpoint2 = 6000;
global.price_checkpoint3 = 12000;

global.price_pistol_assault = 650;
global.price_pistol_heavy = 3000;
global.price_pistol_plasma = 4200;
global.price_shotgun = 1200;
global.price_submachinegun = 2000;
global.price_highmag = 4000;
global.price_machinegun = 5000;
global.price_assault_rifle = 6000;
global.price_sniper_rifle = 7000;
global.price_shotgun_heavy = 9000;
global.price_rocketlauncher = 10000;

global.price_light1 = 300;
global.price_light2 = 300;
global.price_medium1 = 500;
global.price_medium2 = 850;
global.price_heavy1 = 500;
global.price_heavy2 = 750;
global.price_heavy3 = 1500;
global.price_heavy4 = 2000;
global.price_grenades1 = 1000;
global.price_grenades2 = 1500;
global.price_grenades3 = 3000;

global.price_pineapple1 = 500;
global.price_pineapple2 = 500;
global.price_pineapple3 = 500;
global.price_alcoholic1 = 500;
global.price_alcoholic2 = 500;
global.price_alcoholic3 = 500;
global.price_crystal1 = 2000;
global.price_crystal2 = 3000;
global.price_crystal3 = 5000;
global.price_infinity1 = 3000;
global.price_infinity2 = 3000;
global.price_infinity3 = 3000;
global.price_midnight1 = 2000;
global.price_midnight2 = 2000;
global.price_midnight3 = 2000;
global.price_watchful1 = 1200;
global.price_watchful2 = 1200;
global.price_watchful3 = 1200;
global.price_dev1 = 3000;
global.price_dev2 = 5000;
global.price_dev3 = 7000;
global.price_yottabyte1 = 750;
global.price_yottabyte2 = 750;
global.price_yottabyte3 = 750;

//Ammo

global.ammo_light_max = 250;
global.ammo_medium_max = 150;
global.ammo_heavy_max = 250;
global.grenades_max = 5;

ammo_light_max_regular = global.ammo_light_max;
ammo_medium_max_regular = global.ammo_medium_max;
ammo_heavy_max_regular = global.ammo_heavy_max;
grenades_max_regular = global.grenades_max;

ammo_light_max_relic = global.ammo_light_max*2;
ammo_medium_max_relic = global.ammo_medium_max*2;
ammo_heavy_max_relic = global.ammo_heavy_max*2;
grenades_max_relic = global.grenades_max*2;

draw_ammo1 = 0;
draw_ammo2 = 0;

//Center Mouse Position At Beggining
display_mouse_set(window_get_width() / 2, window_get_height() / 2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Soundtrack &amp; Memory Cleaner

global.audio_cleaner = ds_list_create();
alarm[3] = room_speed*3;

if (global.music)
{
    if (room == room_start) //|| (room == room_tutorial)
    {
        audio_stop_all();
        audio_play_sound(bgm_main,99,true);
    }
    
    if room == room_shop
    {
        audio_stop_all();
        audio_play_sound(bgm_shop,99,true);
    }
    
    if room == level1_1
    {
        audio_stop_all();
        if !audio_is_playing(bgm_stage1) audio_play_sound(bgm_stage1,99,true);
    }
    
    if room == level2_1
    {
        audio_stop_all();
        if !audio_is_playing(bgm_stage2) audio_play_sound(bgm_stage2,99,true);
    }
    
    if room == level3_1
    {
        audio_stop_all();
        if !audio_is_playing(bgm_stage3) audio_play_sound(bgm_stage3,99,true);
    }
    
    if room == level4_1
    {
        audio_stop_all();
        if !audio_is_playing(bgm_stage4) audio_play_sound(bgm_stage4,99,true);
    }
    
    if room == room_boss
    {
        audio_stop_all();
        if !audio_is_playing(bgm_boss) audio_play_sound(bgm_boss,99,true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Game Synchronization

    ini_open(working_directory + "\saveData.ini");
    
    global.input =  ini_read_string('Input','Input Type','keyboard');
    global.sticky_aim = ini_read_real('Input','Sticky Aim',true);
    global.auto_aim = ini_read_real('Input','Auto Aim',K_AUTOAIM_ASSIST);
    global.sprint_toggle = ini_read_real('Input','Sprint Toggle',false);
    global.doubleTapDodge = ini_read_real('Input','Double Tap Dodge',true);
    
    global.character = ini_read_real('Character','Character',char_jimmy);
    global.weapon1 = ini_read_real('Character','Weapon1',noone);
    global.weapon2 = ini_read_real('Character','Weapon2',noone);
    global.weapon1_ammo = ini_read_real('Character','Ammo1',999);
    global.weapon2_ammo = ini_read_real('Character','Ammo2',999);
    global.hp = ini_read_real('Character','Health',999999);
        
    global.ammo_light = ini_read_real('Character','Ammo Light',20);
    global.ammo_medium = ini_read_real('Character','Ammo Medium',0);
    global.ammo_heavy = ini_read_real('Character','Ammo Heavy',0);
    global.grenades = ini_read_real('Character','Grenades',0);
    
    global.score_total = ini_read_real('Persistence','Score',0);
    global.checkpoint1 = ini_read_real('Persistence','Checkpoint1',0);
    global.checkpoint2 = ini_read_real('Persistence','Checkpoint2',0);
    global.checkpoint3 = ini_read_real('Persistence','Checkpoint3',0);
    
    global.stage_current = ini_read_real('Temp','Stage',0);
    
    global.unlock_pistol_assault = ini_read_real('Weapons','pistol_assault',0);
    global.unlock_pistol_heavy = ini_read_real('Weapons','pistol_heavy',0);
    global.unlock_pistol_plasma = ini_read_real('Weapons','pistol_plasma',0);
    global.unlock_shotgun = ini_read_real('Weapons','shotgun',0);
    global.unlock_shotgun_heavy = ini_read_real('Weapons','shotgun_heavy',0);
    global.unlock_submachinegun = ini_read_real('Weapons','submachinegun',0);
    global.unlock_highmag = ini_read_real('Weapons','highmag',0);
    global.unlock_machinegun = ini_read_real('Weapons','machinegun',0);
    global.unlock_assault_rifle = ini_read_real('Weapons','assault_rifle',0);
    global.unlock_rocketlauncher = ini_read_real('Weapons','rocketlauncher',0);
    global.unlock_sniper_rifle = ini_read_real('Weapons','sniper_rifle',0);
    
    global.unlock_light1 =  ini_read_real('Weapons','light1',0);
    global.unlock_light2 =  ini_read_real('Weapons','light2',0);
    global.unlock_medium1 =  ini_read_real('Weapons','medium1',0);
    global.unlock_medium2 = ini_read_real('Weapons','medium2',0);
    global.unlock_heavy1 = ini_read_real('Weapons','heavy1',0);
    global.unlock_heavy2 = ini_read_real('Weapons','heavy2',0);
    global.unlock_heavy3 = ini_read_real('Weapons','heavy3',0);
    global.unlock_heavy4 = ini_read_real('Weapons','heavy4',0);
    global.unlock_grenades1 = ini_read_real('Weapons','grenades1',0);
    global.unlock_grenades2 = ini_read_real('Weapons','grenades2',0);
    global.unlock_grenades3 = ini_read_real('Weapons','grenades3',0);
    
    global.relic_slot[1] = ini_read_string('Relics','slot1','');
    global.relic_slot[2] = ini_read_string('Relics','slot2','');
    global.relic_slot[3] = ini_read_string('Relics','slot3','');
    
    global.relic_alcoholic_carrot = ini_read_real('Relics','alcoholic_carrot',0);
    global.relic_alcoholic1 = ini_read_real('Relics','alcoholic1',0);
    global.relic_alcoholic2 = ini_read_real('Relics','alcoholic2',0);
    global.relic_alcoholic3 = ini_read_real('Relics','alcoholic3',0);
    
    global.relic_yottabyte_drive = ini_read_real('Relics','yottabyte_drive',0);
    global.relic_yottabyte1 = ini_read_real('Relics','yottabyte1',0);
    global.relic_yottabyte2 = ini_read_real('Relics','yottabyte2',0);
    global.relic_yottabyte3 = ini_read_real('Relics','yottabyte3',0);
    
    global.relic_pineapple_pudding = ini_read_real('Relics','pineapple_pudding',0);
    global.relic_pineapple1 = ini_read_real('Relics','pineapple1',0);
    global.relic_pineapple2 = ini_read_real('Relics','pineapple2',0);
    global.relic_pineapple3 = ini_read_real('Relics','pineapple3',0);
    
    global.relic_infinity_battery = ini_read_real('Relics','infinity_battery',0);
    global.relic_infinity1 = ini_read_real('Relics','infinity1',0);
    global.relic_infinity2 = ini_read_real('Relics','infinity2',0);
    global.relic_infinity3 = ini_read_real('Relics','infinity3',0);
    
    global.relic_crystal_bacon = ini_read_real('Relics','crystal_bacon',0);
    global.relic_crystal1 = ini_read_real('Relics','crystal1',0);
    global.relic_crystal2 = ini_read_real('Relics','crystal2',0);
    global.relic_crystal3 = ini_read_real('Relics','crystal3',0);
    
    global.relic_midnight_beer = ini_read_real('Relics','midnight_beer',0);
    global.relic_midnight1 = ini_read_real('Relics','midnight1',0);
    global.relic_midnight2 = ini_read_real('Relics','midnight2',0);
    global.relic_midnight3 = ini_read_real('Relics','midnight3',0);
    
    global.relic_watchful_eye = ini_read_real('Relics','watchful_eye',0);
    global.relic_watchful1 = ini_read_real('Relics','watchful1',0);
    global.relic_watchful2 = ini_read_real('Relics','watchful2',0);
    global.relic_watchful3 = ini_read_real('Relics','watchful3',0);
    
    global.relic_dev_potion = ini_read_real('Relics','dev_potion',0);
    global.relic_dev1 = ini_read_real('Relics','dev1',0);
    global.relic_dev2 = ini_read_real('Relics','dev2',0);
    global.relic_dev3 = ini_read_real('Relics','dev3',0);
   
    global.tutorial_done = ini_read_real('Ass','tutorial',0);
    global.first_stage_done = ini_read_real('Ass','first_stage',0);
    global.shop_visits = ini_read_real('Ass','shop_visits',0);
    if (room == room_shop) global.shop_visits++;
    
    global.reflections_toggle = ini_read_real('Quality','reflections',1);
    global.shadows_toggle = ini_read_real('Quality','shadows',1);
    global.persistent_toggle = ini_read_real('Quality','persistent effects',1);
    global.max_particles = ini_read_real('Quality','max particles',5);
    global.max_casings = ini_read_real('Quality','max casings',20);
    
    ini_close();
    
if (room == room_start) || (room == room_tutorial)
{
    global.character = char_jimmy;
    global.weapon1 = noone;
    global.weapon2 = noone;
    global.hp = 999999;
    
    global.stage_current = 1;
    
    global.ammo_light = 80;
    global.ammo_medium = 0;
    global.ammo_heavy = 0;
    global.grenades = 2;
}

if (room == room_start) global.stage_current = 0;
if (room == level1_3) global.stage_current = 1;
if (room == level2_3) global.stage_current = 2;
if (room == level3_3) global.stage_current = 3;
if (room == level4_3) global.stage_current = 4;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle Systems

global.particle_list = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cuscenes vs HUD

global.cutscene = true;
cutscene_bars_position = 0.15;
cutscene_bars_exit_speed = 0.0025;
main_hud_alpha = 0;

//Stage GUI
alarm[4] = room_speed*0.75;

//Black Bars Duration
if (room == room_start) 
{
    alarm[2] = room_speed*4;
    //instance_create(x,y,gui_logo);
}
else  alarm[2] = room_speed*1.7;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reload Circle Bar Init
reloadBarRadius = 18;
reloadBarThickness = 8;
reloadBarSurfaceSize = 40;
reloadBarSurface = surface_create(reloadBarSurfaceSize,reloadBarSurfaceSize);
reloadBarSurface2 = surface_create(reloadBarSurfaceSize,reloadBarSurfaceSize);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawns the Stage GUI
instance_create(x,y,gui_stage);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleans unused emitters every X seconds

while (!ds_list_empty(global.audio_cleaner))
{
    destroy_audio = ds_list_find_value(global.audio_cleaner, ds_list_size(global.audio_cleaner)-1);
    if (destroy_audio) audio_emitter_free(destroy_audio);
    ds_list_delete(global.audio_cleaner, ds_list_size(global.audio_cleaner)-1);
}

alarm[3] = room_speed*3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Removes black bars and draws HUD
global.cutscene = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Updates the path-finding for all AI entities
mp_grid_clear_all(global.astar_grid);
mp_grid_add_instances(global.astar_grid,class_solid,false);
alarm[1] = path_refresh;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unpause the game
instance_activate_all(); 
draw_enable_drawevent(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Xbox 360 Controller Support

if (global.input == 'joystick') &amp;&amp; (global.version = os_windows)
{
    var update0 = xin_update(0); 
    if (!update0) show_debug_message('Trying to update unconnected Xbox 360 Controller (0)');   
    else
    {
        joy_rumble_update(0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Constrain Mouse to Screen

var hsafety,vsafety;

hsafety = 0.05*window_get_width();
vsafety = 0.05*window_get_height();

if (window_mouse_get_x() &lt; 0+hsafety) window_mouse_set(0+hsafety, window_mouse_get_y());
if (window_mouse_get_y() &lt; 0+vsafety) window_mouse_set(window_mouse_get_x(), 0+vsafety);
if (window_mouse_get_x() &gt; window_get_width()-hsafety) window_mouse_set(window_get_width()-hsafety, window_mouse_get_y());
if (window_mouse_get_y() &gt; window_get_height()-vsafety) window_mouse_set(window_mouse_get_x(), window_get_height()-vsafety);




/*
hsafety = 0.05*display_get_width();
vsafety = 0.05*display_get_height();


if (display_mouse_get_x() &lt; 0+hsafety) display_mouse_set(0+hsafety, display_mouse_get_y());
if (display_mouse_get_y() &lt; 0+vsafety) display_mouse_set(display_mouse_get_x(), 0+vsafety);
if (display_mouse_get_x() &gt; display_get_width()-hsafety) display_mouse_set(display_get_width()-hsafety, display_mouse_get_y());
if (display_mouse_get_y() &gt; display_get_height()-vsafety) display_mouse_set(display_mouse_get_x(), display_get_height()-vsafety);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause
if (global.pause)
{
    global.pause--;
    if global.pause &lt; 0 global.pause = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ammo

active_weapon = noone;
active_type = -1;

if (global.ammo_light &gt; global.ammo_light_max) global.ammo_light = global.ammo_light_max;
if (global.ammo_light &lt; 0) global.ammo_light = 0;
if (global.ammo_medium &gt; global.ammo_medium_max) global.ammo_medium = global.ammo_medium_max;
if (global.ammo_medium &lt; 0) global.ammo_medium = 0;
if (global.ammo_heavy &gt; global.ammo_heavy_max) global.ammo_heavy = global.ammo_heavy_max;
if (global.ammo_heavy &lt; 0) global.ammo_heavy = 0;
if (global.grenades &gt; global.grenades_max) global.grenades = global.grenades_max;
if (global.grenades &lt; 0) global.grenades = 0;



if instance_exists(class_player)
{
    if instance_exists(class_player.weapon1)
    {
        if (class_player.weapon1.isActive)
        {
            active_weapon = class_player.weapon1;
        }
    }
    
    if (!active_weapon) &amp;&amp; instance_exists(class_player.weapon2)
    {
        if (class_player.weapon2.isActive)
        {
            active_weapon = class_player.weapon2;
        }
    }   
}

if instance_exists(class_player) &amp;&amp; instance_exists(active_weapon)
{
    if (active_weapon.ammo_type == type_light) active_type = type_light;
    if (active_weapon.ammo_type == type_medium) active_type = type_medium;
    if (active_weapon.ammo_type == type_heavy) active_type = type_heavy;
    if (active_weapon.ammo_type == type_grenade) active_type = type_grenade;
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level Instantiator

if (!level_built)
{
    //Enemy Group Design (Spawns Everything Within the Group)
    ducan_turtlesquad1_1 = ds_list_create();
    ds_list_add(ducan_turtlesquad1_1, obj_turtle1,obj_turtle1,obj_turtle1);
    
    ducan_turtlesquad1_2 = ds_list_create();
    ds_list_add(ducan_turtlesquad1_2, obj_turtle1,obj_turtle1,obj_turtle1,obj_turtle1_shotgun);
    
    ducan_turtlesquad1_3 = ds_list_create();
    ds_list_add(ducan_turtlesquad1_3, obj_duck1,obj_turtle1_pistoleer,obj_turtle1_pistoleer,obj_turtle1_pistoleer);
    
    ducan_turtlesquad2_1 = ds_list_create();
    ds_list_add(ducan_turtlesquad2_1, obj_turtle2, obj_turtle2_assaultpistol, obj_turtle2, obj_turtle2_shotgun );
    
    ducan_turtlesquad2_2 = ds_list_create();
    ds_list_add(ducan_turtlesquad2_2, obj_turtle2_submachinegun, obj_turtle2_submachinegun, obj_turtle2_submachinegun, obj_turtle2_shotgun );
    
    ducan_turtlesquad3_1 = ds_list_create();
    ds_list_add(ducan_turtlesquad3_1, obj_turtle3, obj_turtle3, obj_turtle3, obj_turtle3 );
    
    ducan_turtlesniper = ds_list_create();
    ds_list_add(ducan_turtlesniper, obj_turtle3_sniper );
    
    /// /// /// ///
    
    ducan_ducksquad1_1 = ds_list_create();
    ds_list_add(ducan_ducksquad1_1, obj_duck1,obj_turtle1,obj_turtle1,obj_turtle1_shotgun);
    
    ducan_ducksquad1_2 = ds_list_create();
    ds_list_add(ducan_ducksquad1_2, obj_duck1_submachinegun,obj_turtle1,obj_turtle1_pistoleer,obj_turtle1_shotgun);
    
    ducan_ducksquad1_3 = ds_list_create();
    ds_list_add(ducan_ducksquad1_3, obj_duck1_submachinegun,obj_duck1,obj_turtle1,obj_turtle1_shotgun);
    
    ducan_ducksquad2_1 = ds_list_create();
    ds_list_add(ducan_ducksquad2_1, obj_duck2_heavy, obj_turtle1_pistoleer, obj_turtle1_pistoleer, obj_turtle2_shotgun);
    
    ducan_ducksquad2_2 = ds_list_create();
    ds_list_add(ducan_ducksquad2_2, obj_duck2_submachinegun, obj_duck1, obj_duck1, obj_turtle2_assaultpistol);
    
    ducan_ducksquad2_3 = ds_list_create();
    ds_list_add(ducan_ducksquad2_3, obj_duck2_shotgun, obj_turtle2_submachinegun, obj_turtle2_submachinegun, obj_turtle2_submachinegun);
    
    ducan_ducksquad3_1 = ds_list_create();
    ds_list_add(ducan_ducksquad3_1, obj_duck3, obj_duck2_shotgun, obj_duck2_shotgun, obj_turtle3);
    
    ducan_ducksquad3_2 = ds_list_create();
    ds_list_add(ducan_ducksquad3_2, obj_duck3_rocket, obj_turtle3, obj_turtle3);
    
    /// /// /// ///
    
    monster_kamikaze_1 = ds_list_create();
    ds_list_add(monster_kamikaze_1, obj_kamikaze1, obj_kamikaze1, obj_kamikaze1, obj_kamikaze1, obj_kamikaze1 );
    
    monster_kamikaze_2 = ds_list_create();
    ds_list_add(monster_kamikaze_2, obj_kamikazelite, obj_kamikazelite, obj_kamikazelite, obj_kamikazelite, obj_kamikazelite );
    
    //Item Group Design (Spawns One Item Randomly)
    
    item_starterweapon_1 = ds_list_create();
    ds_list_add(item_starterweapon_1, obj_pickup_pistol_assault,obj_pickup_shotgun);
    
    item_mediumweapon_1 = ds_list_create();
    ds_list_add(item_mediumweapon_1, obj_pickup_submachinegun, obj_pickup_pistol_heavy);
    
    item_mediumweapon_2 = ds_list_create();
    ds_list_add(item_mediumweapon_2, obj_pickup_pistol_heavy, obj_pickup_assault_rifle);
    
    item_heavyweapon_1 = ds_list_create();
    ds_list_add(item_heavyweapon_1, obj_pickup_machinegun, obj_pickup_assault_rifle);
    
    item_heavyweapon_2 = ds_list_create();
    ds_list_add(item_heavyweapon_2, obj_pickup_assault_rifle, obj_pickup_sniper_rifle);
    
    item_superweapon_1 = ds_list_create();
    ds_list_add(item_superweapon_1, obj_pickup_shotgun_heavy, obj_pistol_plasma,  obj_pistol_plasma, obj_pickup_machinegun, obj_pickup_assault_rifle, obj_pickup_pistol_heavy );
    
    item_rocketlauncher_1 = ds_list_create();
    ds_list_add(item_rocketlauncher_1, obj_pickup_rocketlauncher);
    
    item_starterammo_1 = ds_list_create();
    ds_list_add(item_starterammo_1, obj_pickup_lightammo,obj_pickup_lightammo,obj_pickup_mediumammo);
    
    item_starterhealth_1 = ds_list_create();
    ds_list_add(item_starterhealth_1, obj_pickup_health);
    
    item_starteraid_1 = ds_list_create();
    ds_list_add(item_starteraid_1, obj_pickup_lightammo, obj_pickup_lightammo, obj_pickup_lightammo, obj_pickup_health, obj_pickup_grenade);
    
    item_grenade_1 = ds_list_create();
    ds_list_add(item_grenade_1, obj_pickup_grenade);
    
    item_mediumammo_1 = ds_list_create();
    ds_list_add(item_mediumammo_1, obj_pickup_mediumammo, obj_pickup_mediumammo, obj_pickup_heavyammo, obj_pickup_grenade);
    
    item_heavyammo_1 = ds_list_create();
    ds_list_add(item_heavyammo_1, obj_pickup_heavyammo);
    
    
    //Shop Lists
    global.shop_list_1 = ds_list_create();
    global.shop_size_1 = 10;
    if (!global.unlock_light1) ds_list_add(global.shop_list_1, obj_shop_light1);
    if (!global.unlock_pistol_assault) ds_list_add(global.shop_list_1, obj_shop_pistol_assault);
    if (!global.unlock_shotgun) ds_list_add(global.shop_list_1, obj_shop_shotgun);
    if (!global.unlock_light2) ds_list_add(global.shop_list_1, obj_shop_light2);
    if (!global.unlock_medium1) ds_list_add(global.shop_list_1, obj_shop_medium1);
    if (!global.unlock_grenades1) ds_list_add(global.shop_list_1, obj_shop_grenades1);
    if (!global.relic_pineapple1) ds_list_add(global.shop_list_1, obj_shop_pineapple1);
    if (!global.relic_pineapple2) ds_list_add(global.shop_list_1, obj_shop_pineapple2);
    if (!global.relic_pineapple3) ds_list_add(global.shop_list_1, obj_shop_pineapple3);
    if (!global.relic_yottabyte1) ds_list_add(global.shop_list_1, obj_shop_yottabyte1);
    
    global.shop_free_1 = ds_list_create();
    ds_list_add(global.shop_free_1, obj_pickup_lightammo, obj_pickup_lightammo, obj_pickup_lightammo, obj_pickup_health, obj_pickup_grenade);
    
    
    global.shop_list_2 = ds_list_create();
    global.shop_size_2 = 15;
    if (!global.unlock_medium2) ds_list_add(global.shop_list_2, obj_shop_medium2);
    if (!global.unlock_grenades2) ds_list_add(global.shop_list_2, obj_shop_grenades2);
    if (!global.unlock_heavy1) ds_list_add(global.shop_list_2, obj_shop_heavy1);
    if (!global.unlock_assault_rifle) ds_list_add(global.shop_list_2, obj_shop_assault_rifle);
    if (!global.unlock_pistol_heavy) ds_list_add(global.shop_list_2, obj_shop_pistol_heavy);
    if (!global.unlock_submachinegun) ds_list_add(global.shop_list_2, obj_shop_submachinegun);
    if (!global.relic_alcoholic1) ds_list_add(global.shop_list_2, obj_shop_alcoholic1);
    if (!global.relic_alcoholic2) ds_list_add(global.shop_list_2, obj_shop_alcoholic2);
    if (!global.relic_alcoholic3) ds_list_add(global.shop_list_2, obj_shop_alcoholic3);
    if (!global.relic_yottabyte2) ds_list_add(global.shop_list_2, obj_shop_yottabyte2);
    if (!global.relic_yottabyte3) ds_list_add(global.shop_list_2, obj_shop_yottabyte3);
    if (!global.relic_watchful1) ds_list_add(global.shop_list_2, obj_shop_watchful1);
    if (!global.relic_watchful2) ds_list_add(global.shop_list_2, obj_shop_watchful2);
    if (!global.relic_watchful3) ds_list_add(global.shop_list_2, obj_shop_watchful3);
    
    if (!global.relic_crystal1) ds_list_add(global.shop_list_2, obj_shop_crystal1);
    
    global.shop_free_2 = ds_list_create();
    ds_list_add(global.shop_free_2, obj_pickup_lightammo, obj_pickup_mediumammo, obj_pickup_lightammo, obj_pickup_health, obj_pickup_grenade);
    
    
    global.shop_list_3 = ds_list_create();
    global.shop_size_3 = 16;
    if (!global.unlock_grenades3) ds_list_add(global.shop_list_3, obj_shop_grenades3);
    if (!global.unlock_heavy2) ds_list_add(global.shop_list_3, obj_shop_heavy2);
    if (!global.unlock_heavy3) ds_list_add(global.shop_list_3, obj_shop_heavy3);
    if (!global.unlock_heavy4) ds_list_add(global.shop_list_3, obj_shop_heavy4);
    if (!global.unlock_pistol_plasma) ds_list_add(global.shop_list_3, obj_shop_pistol_plasma);
    if (!global.unlock_highmag) ds_list_add(global.shop_list_3, obj_shop_highmag);
    if (!global.unlock_machinegun) ds_list_add(global.shop_list_3, obj_shop_machinegun);
    if (!global.unlock_sniper_rifle) ds_list_add(global.shop_list_3, obj_shop_sniper_rifle);
    if (!global.relic_midnight1) ds_list_add(global.shop_list_3, obj_shop_midnight1);
    if (!global.relic_midnight2) ds_list_add(global.shop_list_3, obj_shop_midnight2);
    if (!global.relic_midnight3) ds_list_add(global.shop_list_3, obj_shop_midnight3);
    if (!global.relic_infinity1) ds_list_add(global.shop_list_3, obj_shop_infinity1);
    if (!global.relic_infinity2) ds_list_add(global.shop_list_3, obj_shop_infinity2);
    if (!global.relic_infinity3) ds_list_add(global.shop_list_3, obj_shop_infinity3);
    if (!global.relic_crystal2) ds_list_add(global.shop_list_3, obj_shop_crystal2);
    if (!global.relic_dev1) ds_list_add(global.shop_list_3, obj_shop_dev1);
    
    global.shop_free_3 = ds_list_create();
    ds_list_add(global.shop_free_3, obj_pickup_mediumammo, obj_pickup_heavyammo, obj_pickup_health, obj_pickup_health, obj_pickup_grenade);
    
    
    global.shop_list_4 = ds_list_create();
    global.shop_size_4 = 5;
    
    if (!global.unlock_shotgun_heavy) ds_list_add(global.shop_list_4, obj_shop_shotgun_heavy);
    if (!global.unlock_rocketlauncher) ds_list_add(global.shop_list_4, obj_shop_rocketlauncher);
    if (!global.relic_crystal3) ds_list_add(global.shop_list_4, obj_shop_crystal3);
    if (!global.relic_dev2) ds_list_add(global.shop_list_4, obj_shop_dev2);
    if (!global.relic_dev3) ds_list_add(global.shop_list_4, obj_shop_dev3);
    
    global.shop_free_4 = ds_list_create();
    ds_list_add(global.shop_free_4, obj_pickup_heavyammo, obj_pickup_heavyammo, obj_pickup_heavyammo, obj_pickup_health, obj_pickup_grenade);
    
    //Stage Design
    shop_empty_pool = ds_list_create();
    
    enemy_pool_1_1 = ds_list_create();
    ds_list_add(enemy_pool_1_1, ducan_turtlesquad1_1, ducan_turtlesquad1_1, ducan_turtlesquad1_1, ducan_turtlesquad1_1 );
    
    enemy_pool_1_2 = ds_list_create();
    ds_list_add(enemy_pool_1_2, ducan_ducksquad1_1, ducan_turtlesquad1_1, ducan_turtlesquad1_1, ducan_turtlesquad1_1, ducan_turtlesquad1_2 );
    
    enemy_pool_1_3 = ds_list_create();
    ds_list_add(enemy_pool_1_3, ducan_turtlesquad1_2, monster_kamikaze_1, monster_kamikaze_1, monster_kamikaze_1, monster_kamikaze_1, monster_kamikaze_1 );
    
    enemy_pool_2_1 = ds_list_create();
    ds_list_add(enemy_pool_2_1, ducan_turtlesquad1_3, ducan_ducksquad1_1, ducan_ducksquad1_1, ducan_ducksquad1_2, ducan_turtlesquad2_1 );
    
    enemy_pool_2_2 = ds_list_create();
    ds_list_add(enemy_pool_2_2, ducan_ducksquad1_3, ducan_ducksquad1_2, ducan_ducksquad1_2, ducan_ducksquad1_1 );
    
    enemy_pool_2_3 = ds_list_create();
    ds_list_add(enemy_pool_2_3, ducan_ducksquad2_1, ducan_ducksquad1_3, ducan_turtlesquad2_1, ducan_turtlesquad2_1, ducan_turtlesquad2_2 );
    
    enemy_pool_3_1 = ds_list_create();
    ds_list_add(enemy_pool_3_1, ducan_ducksquad2_3, monster_kamikaze_1, monster_kamikaze_1, monster_kamikaze_1, monster_kamikaze_2, monster_kamikaze_2 );
    
    enemy_pool_3_2 = ds_list_create();
    ds_list_add(enemy_pool_3_2, monster_kamikaze_2, monster_kamikaze_2, monster_kamikaze_2, monster_kamikaze_2, ducan_ducksquad2_2, ducan_ducksquad2_3, ducan_ducksquad2_1);
    
    enemy_pool_3_3 = ds_list_create();
    ds_list_add(enemy_pool_3_3, ducan_ducksquad2_2, ducan_ducksquad2_1, ducan_ducksquad2_3, ducan_turtlesquad3_1, ducan_turtlesquad3_1);
    
    enemy_pool_4_1 = ds_list_create();
    ds_list_add(enemy_pool_4_1, ducan_turtlesquad3_1, ducan_turtlesquad3_1, ducan_turtlesquad3_1, ducan_turtlesniper, ducan_turtlesniper, ducan_turtlesniper, ducan_turtlesniper);
    
    enemy_pool_4_2 = ds_list_create();
    ds_list_add(enemy_pool_4_2, ducan_turtlesquad3_1, ducan_turtlesquad3_1, ducan_ducksquad2_1, ducan_ducksquad3_1, ducan_ducksquad3_1);
    
    enemy_pool_4_3 = ds_list_create();
     ds_list_add(enemy_pool_4_3, ducan_turtlesquad3_1, ducan_ducksquad3_1, ducan_ducksquad3_1, ducan_ducksquad3_2, ducan_ducksquad3_2);
    
    
    ///  ///  ///
    
    item_pool_1_1 = ds_list_create();
    ds_list_add(item_pool_1_1, item_starterammo_1, item_starterammo_1, item_starterhealth_1, item_starteraid_1, item_starteraid_1);
    
    item_pool_1_2 = ds_list_create();
    ds_list_add(item_pool_1_2, item_starterweapon_1, item_starterammo_1, item_starteraid_1, item_starterammo_1, item_starteraid_1);
    
    item_pool_1_3 = ds_list_create();
    ds_list_add(item_pool_1_3, item_starterammo_1, item_starterammo_1, item_starterammo_1, item_mediumammo_1, item_starteraid_1, item_grenade_1);
    
    item_pool_2_1 = ds_list_create();
    ds_list_add(item_pool_2_1, item_starterammo_1, item_starteraid_1, item_mediumammo_1, item_starteraid_1);
    
    item_pool_2_2 = ds_list_create();
    ds_list_add(item_pool_2_2, item_starterweapon_1, item_starterammo_1, item_starterammo_1, item_starteraid_1, item_starteraid_1);
    
    item_pool_2_3 = ds_list_create();
    ds_list_add(item_pool_2_3, item_mediumweapon_1, item_starterammo_1, item_mediumammo_1, item_grenade_1, item_starteraid_1, item_grenade_1);
    
    item_pool_3_1 = ds_list_create();
    ds_list_add(item_pool_3_1, item_starterammo_1, item_mediumammo_1, item_starteraid_1, item_starteraid_1, item_starteraid_1, item_grenade_1);
    
    item_pool_3_2 = ds_list_create();
    ds_list_add(item_pool_3_2, item_starterweapon_1, item_starteraid_1, item_starterhealth_1, item_grenade_1, item_starterammo_1, item_grenade_1);
    
    item_pool_3_3 = ds_list_create();
    ds_list_add(item_pool_3_3, item_mediumammo_1, item_mediumammo_1, item_mediumammo_1, item_starteraid_1, item_superweapon_1, item_starteraid_1, item_grenade_1);
    
    item_pool_4_1 = ds_list_create();
    ds_list_add(item_pool_4_1, item_heavyweapon_1, item_heavyweapon_2, item_heavyammo_1, item_heavyammo_1, item_heavyammo_1, item_starteraid_1, item_starteraid_1);
    
    item_pool_4_2 = ds_list_create();
    ds_list_add(item_pool_4_2, item_heavyammo_1, item_mediumammo_1, item_starteraid_1, item_starteraid_1, item_grenade_1, item_starterammo_1, item_mediumammo_1);
    
    item_pool_4_3 = ds_list_create();
    ds_list_add(item_pool_4_3, item_rocketlauncher_1, item_heavyammo_1, item_heavyammo_1, item_mediumammo_1, item_starteraid_1, item_grenade_1, item_mediumammo_1, item_starterammo_1);
    
    
    item_pool_boss = ds_list_create();
    ds_list_add(item_pool_boss, item_heavyammo_1, item_heavyammo_1, item_heavyammo_1, item_heavyammo_1, item_heavyammo_1, item_heavyammo_1, item_heavyammo_1, item_heavyammo_1);
    ds_list_add(item_pool_boss, item_mediumammo_1, item_mediumammo_1, item_mediumammo_1, item_mediumammo_1, item_mediumammo_1, item_mediumammo_1, item_mediumammo_1, item_mediumammo_1);
    ds_list_add(item_pool_boss, item_starterammo_1, item_starterammo_1, item_starterammo_1, item_starterammo_1, item_starterammo_1, item_starterammo_1, item_starterammo_1, item_starterammo_1, item_starterammo_1);
    ds_list_add(item_pool_boss, item_heavyweapon_1, item_heavyweapon_2, item_mediumweapon_1, item_mediumweapon_1, item_starterweapon_1, item_starterweapon_1, item_starteraid_1, item_starteraid_1, item_starteraid_1);
    ds_list_add(item_pool_boss, item_starterhealth_1, item_starterhealth_1, item_starterhealth_1, item_starterhealth_1);
    
}

/////////////////////////////////////////////////////////////////////

if (room == room_start)
{
    level_built = true;
}

if (!level_built)
{
    //Instantiate Player
    player_spawn_number = instance_number(obj_spawn_player);
    random_spawn = irandom(player_spawn_number-1);
    target_spawn = instance_find(obj_spawn_player,random_spawn);
    if (global.character == char_jimmy) instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_jimmy);
    if (global.character == char_pinky) instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_pinky);
    if (global.character == char_raff) instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_raff);
    if (global.character == char_biu) instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_biu);
    if (global.character == char_punny) instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_punny);
    if (global.character == char_ass) instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_ass);
    
    
    teleporter = instance_create(target_spawn.spawnX,target_spawn.spawnY-10,obj_teleporter);
    teleporter.active = false;
    
    /*with (obj_spawn_player)
    {
        instance_destroy();
    }*/
    
    //Instantiate Enemies
    if (room == room_shop) || (room == room_tutorial) || (room == room_boss) enemy_pool = shop_empty_pool;
    if (room == level1_1) enemy_pool = enemy_pool_1_1;
    if (room == level1_2) enemy_pool = enemy_pool_1_2;
    if (room == level1_3) enemy_pool = enemy_pool_1_3;
    if (room == level2_1) enemy_pool = enemy_pool_2_1;
    if (room == level2_2) enemy_pool = enemy_pool_2_2;
    if (room == level2_3) enemy_pool = enemy_pool_2_3;
    if (room == level3_1) enemy_pool = enemy_pool_3_1;
    if (room == level3_2) enemy_pool = enemy_pool_3_2;
    if (room == level3_3) enemy_pool = enemy_pool_3_3;
    if (room == level4_1) enemy_pool = enemy_pool_4_1;
    if (room == level4_2) enemy_pool = enemy_pool_4_2;
    if (room == level4_3) enemy_pool = enemy_pool_4_3;
    
    while (!ds_list_empty(enemy_pool))
    {
        pick_random_group = irandom(ds_list_size(enemy_pool)-1);
        random_group = ds_list_find_value(enemy_pool,pick_random_group);
        ds_list_delete(enemy_pool,pick_random_group);
        
        current_group = ds_list_create();
        ds_list_copy(current_group, random_group);
        
        enemy_spawn_number = instance_number(obj_spawn_enemy);
        random_spawn = irandom(enemy_spawn_number-1);
        target_spawn = instance_find(obj_spawn_enemy,random_spawn);
        
        while (!ds_list_empty(current_group)) &amp;&amp; (instance_exists(target_spawn))
        {
            spawnX = target_spawn.spawnX + random_range(-128,128);
            spawnY = target_spawn.spawnY + random_range(-128,128);
            
            if collision_circle(spawnX,spawnY,40,class_solid,false,true) &lt; 0 
            {
                list_position = ds_list_size(current_group)-1;
                spawnee = ds_list_find_value(current_group, list_position);
                instance_create(spawnX,spawnY,spawnee);
                ds_list_delete(current_group,list_position);
            }
        }
        ds_list_destroy(current_group);
        with (target_spawn) { instance_destroy(); }
    }
    
    with (obj_spawn_enemy)
    {
        instance_destroy();
    }
    

    //Instantiate Items
    if (room == room_shop) || (room == room_tutorial) item_pool = shop_empty_pool;
    if (room == level1_1) item_pool = item_pool_1_1;
    if (room == level1_2) item_pool = item_pool_1_2;
    if (room == level1_3) item_pool = item_pool_1_3;
    if (room == level2_1) item_pool = item_pool_2_1;
    if (room == level2_2) item_pool = item_pool_2_2;
    if (room == level2_3) item_pool = item_pool_2_3;
    if (room == level3_1) item_pool = item_pool_3_1;
    if (room == level3_2) item_pool = item_pool_3_2;
    if (room == level3_3) item_pool = item_pool_3_3;
    if (room == level4_1) item_pool = item_pool_4_1;
    if (room == level4_2) item_pool = item_pool_4_2;
    if (room == level4_3) item_pool = item_pool_4_3;
    if (room == room_boss) item_pool = item_pool_boss;

    while (!ds_list_empty(item_pool))
    {
        pick_random_group = irandom(ds_list_size(item_pool)-1);
        random_group = ds_list_find_value(item_pool,pick_random_group);
        ds_list_delete(item_pool,pick_random_group);
        
        current_group = ds_list_create();
        ds_list_copy(current_group, random_group);
        
        item_spawn_number = instance_number(obj_spawn_item);
        random_spawn = irandom(item_spawn_number-1);
        target_spawn = instance_find(obj_spawn_item,random_spawn);
        
        if instance_exists(target_spawn)
        {
            spawnX = target_spawn.spawnX;
            spawnY = target_spawn.spawnY;
            
            list_position = irandom(ds_list_size(current_group)-1);
            spawnee = ds_list_find_value(current_group, list_position);
            instance_create(spawnX,spawnY,spawnee);
            with (target_spawn) { instance_destroy(); }
        }
        ds_list_destroy(current_group);
    }
    
    with (obj_spawn_item)
    {
        instance_destroy();
    }
    
    //Done
    level_built = true;  
    
    //Clear Lists From Memory
    ds_list_destroy(ducan_turtlesquad1_1);
    ds_list_destroy(ducan_turtlesquad1_2);
    ds_list_destroy(ducan_turtlesquad1_3);
    ds_list_destroy(ducan_turtlesquad2_1);
    ds_list_destroy(ducan_turtlesquad2_2);
    ds_list_destroy(ducan_turtlesquad3_1);
    ds_list_destroy(ducan_turtlesniper);
    
    ds_list_destroy(ducan_ducksquad1_1);
    ds_list_destroy(ducan_ducksquad1_2);
    ds_list_destroy(ducan_ducksquad1_3);
    ds_list_destroy(ducan_ducksquad2_1);
    ds_list_destroy(ducan_ducksquad2_2);
    ds_list_destroy(ducan_ducksquad2_3);
    ds_list_destroy(ducan_ducksquad3_1);
    ds_list_destroy(ducan_ducksquad3_2);
    
    ds_list_destroy(monster_kamikaze_1);
    ds_list_destroy(monster_kamikaze_2);
    
    ds_list_destroy(shop_empty_pool);
    ds_list_destroy(enemy_pool_1_1);
    ds_list_destroy(enemy_pool_1_2);
    ds_list_destroy(enemy_pool_1_3);
    ds_list_destroy(enemy_pool_2_1);
    ds_list_destroy(enemy_pool_2_2);
    ds_list_destroy(enemy_pool_2_3);
    ds_list_destroy(enemy_pool_3_1);
    ds_list_destroy(enemy_pool_3_2);
    ds_list_destroy(enemy_pool_3_3);
    ds_list_destroy(enemy_pool_4_1);
    ds_list_destroy(enemy_pool_4_2);
    ds_list_destroy(enemy_pool_4_3);
    ds_list_destroy(item_pool_1_1);
    ds_list_destroy(item_pool_1_2);
    ds_list_destroy(item_pool_1_3);
    ds_list_destroy(item_pool_2_1);
    ds_list_destroy(item_pool_2_2);
    ds_list_destroy(item_pool_2_3);
    ds_list_destroy(item_pool_3_1);
    ds_list_destroy(item_pool_3_2);
    ds_list_destroy(item_pool_3_3);
    ds_list_destroy(item_pool_4_1);
    ds_list_destroy(item_pool_4_2);
    ds_list_destroy(item_pool_4_3);
    ds_list_destroy(item_pool_boss);
    
    ds_list_destroy(item_starterweapon_1);
    ds_list_destroy(item_mediumweapon_1);
    ds_list_destroy(item_mediumweapon_2);
    ds_list_destroy(item_heavyweapon_1);
    ds_list_destroy(item_heavyweapon_2);
    ds_list_destroy(item_superweapon_1);
    ds_list_destroy(item_rocketlauncher_1);
    ds_list_destroy(item_starterammo_1);
    ds_list_destroy(item_starterhealth_1);
    ds_list_destroy(item_starteraid_1);
    ds_list_destroy(item_grenade_1);
    ds_list_destroy(item_mediumammo_1);
    ds_list_destroy(item_heavyammo_1);
    
    ds_list_destroy(enemy_pool);
    ds_list_destroy(item_pool);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level Exit

if (!(room == room_start)) &amp;&amp; (!(room == room_tutorial)) &amp;&amp; (!(room == room_shop)) &amp;&amp; (!(room == room_boss))
{
    if (!instance_exists(class_enemy)) &amp;&amp; (!instance_exists(obj_kamikazelite_flying)) &amp;&amp; (instance_exists(class_player)) &amp;&amp; (!level_end)
    {
        var tries;
        tries=0;
        while (!level_end)
        {
            randomX = class_player.x + irandom_range(-100,100);
            randomY = class_player.y + irandom_range(-100,100);
            
            if collision_circle(randomX,randomY,63,class_solid,false,true) &lt; 0
            {
                level_end = true
            }
            tries++;
            if (tries &gt;= 10)
            {
                randomX = class_player.x;
                randomY = class_player.y;
                level_end = true;
            }
        }
        ass = instance_create(randomX,randomY,obj_ass);   
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dust and Fog

tile_layer_shift(-9024, -0.12, 0);
tile_layer_shift(-9048, -0.2, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Data and Advance the Game

if (global.stage_current == 1) &amp;&amp; (global.checkpoint1 == 0) global.checkpoint1 = 1;
if (global.stage_current == 2) &amp;&amp; (global.checkpoint2 == 0) global.checkpoint2 = 1;
if (global.stage_current == 3) &amp;&amp; (global.checkpoint3 == 0) global.checkpoint3 = 1;

if (global.level_complete)
{

    save_and_clean();
    
    if (room == room_shop) || (room == room_start)
    {
        //room_goto(room_boss);
        
        if (global.stage_current == 0) room_goto(level1_1);
        if (global.stage_current == 1) room_goto(level2_1);
        if (global.stage_current == 2) room_goto(level3_1);
        if (global.stage_current == 3) room_goto(level4_1);
        if (global.stage_current == 4) room_goto(room_boss);
        
        exit;
    }
    
    if (room == level1_3) { room_goto(room_shop); exit; }
    if (room == level2_3) { room_goto(room_shop); exit; }
    if (room == level3_3) { room_goto(room_shop); exit; }
    if (room == level4_3) { room_goto(room_shop); exit; }
    
    if room_exists(room_next(room)) room_goto_next();
    else room_goto(room_start);
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle Systems Manager

if (!ds_list_empty(global.particle_list)) &amp;&amp; (!global.pause)
{
    for (i=0; i&lt;ds_list_size(global.particle_list); i++)
    {
        particle_system = ds_list_find_value(global.particle_list,i);
        part_system_update(particle_system);
        
        if !part_particles_count(particle_system)
        {
            part_emitter_destroy_all(particle_system);
            part_system_destroy(particle_system);
            ds_list_delete(global.particle_list,i);
        }
    }
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause Menu Control

var pauseKeyPressed = false;

if keyboard_check_pressed(vk_escape) pauseKeyPressed = true;
if (global.input == 'joystick') if joy_check_pressed(0,8)  pauseKeyPressed = true;

if (pauseKeyPressed)
{
    if (!global.pauseMenu)
    {
        global.pauseMenu = true;
        instance_deactivate_all(true);
        instance_activate_object(global.pauseController);
        tile_layer_hide(-9999);
        tile_layer_hide(-99999);
        tile_layer_hide(-999999); //Too lazy to fix this on the rooms :p
    }
    else
    {
        global.pauseMenu = false;
        instance_activate_all();
        instance_deactivate_object(global.pauseController);
        tile_layer_show(-9999);
        tile_layer_show(-99999);
        tile_layer_show(-999999);
    }
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Quality Options

///Toggle Fullscreen
if keyboard_check_pressed(vk_f4)
{
    if (window_get_fullscreen()) window_set_fullscreen(false);
    else window_set_fullscreen(true);
}

///Mute the Game
if keyboard_check_pressed(ord('M'))
{
    global.music = !global.music;
}

if (!global.music)
{
    if audio_is_playing(bgm_main) audio_stop_sound(bgm_main);
    if audio_is_playing(bgm_shop) audio_stop_sound(bgm_shop);
    if audio_is_playing(bgm_stage1) audio_stop_sound(bgm_stage1);
    if audio_is_playing(bgm_stage2) audio_stop_sound(bgm_stage2);
    if audio_is_playing(bgm_stage3) audio_stop_sound(bgm_stage3);
    if audio_is_playing(bgm_stage4) audio_stop_sound(bgm_stage4);
}

///Maximum Number of Shot Particles
global.count_particles = instance_number(fx_hit)

//Maximum Number of Shot Casings
global.count_casings = instance_number(fx_casing) + instance_number(fx_blood);;

///Toggle Reflections
if keyboard_check_pressed(vk_f5) global.reflections_toggle = !global.reflections_toggle;

///Toggle Persistent Objects
if keyboard_check_pressed(vk_f6) global.persistent_toggle = !global.persistent_toggle;

///Toggle Shadows
if keyboard_check_pressed(vk_f7) global.shadows_toggle = !global.shadows_toggle;

//Toggle Keyboard/Joystick
if keyboard_check_pressed(vk_f2) if (global.input == 'keyboard') global.input = 'joystick';
else global.input = 'keyboard';

//Toggle Joystick Aiming Options
if keyboard_check_pressed(ord('P'))
{
    if (global.auto_aim == K_AUTOAIM_ASSIST) global.auto_aim = K_AUTOAIM_FULL;
    else global.auto_aim = K_AUTOAIM_ASSIST;
}

//Debug: Manually Restart the Game
if keyboard_check_pressed(vk_f12)
{
    save_and_clean();
    game_restart();
}
//Debug: Kill Everything
if keyboard_check_pressed(vk_f9)
{
    if instance_exists(class_enemy)
    {
        with (class_enemy)
        {
            instance_destroy();
        }
    }
}

//Debug: Erase Save File
if keyboard_check_pressed(vk_f10)
{
    file_delete(working_directory + "\saveData.ini");
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Relic Global Buffs

//Watchful Eye
if (global.relic_watchful_eye == 2)
{
    global.ammo_light_max = ammo_light_max_relic;
    global.ammo_medium_max = ammo_medium_max_relic;
    global.ammo_heavy_max = ammo_heavy_max_relic;
    global.grenades_max = grenades_max_relic;
}
else 
{
    global.ammo_light_max = ammo_light_max_regular;
    global.ammo_medium_max = ammo_medium_max_regular;
    global.ammo_heavy_max = ammo_heavy_max_regular;
    global.grenades_max = grenades_max_regular;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set GUI Size
originalX = 1920;
originalY = 1080;
display_set_gui_size(window_get_width(), window_get_height());
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main HUD Draw

if (!surface_exists(guiSurface))
{
    guiSurface = surface_create(1920,1080);
}
surface_set_target(guiSurface);
draw_clear_alpha(c_white,0);

draw_set_alpha(main_hud_alpha);

var width = 1920;
var height = 1080;

if instance_exists(class_player)
{
    //Get Basic Player Values
    energy = class_player.energy;
    energy_max = class_player.energy_max;
    hp = class_player.hp;
    stamina = class_player.stamina;
    stamina_max = class_player.stamina_max;
    
        
    //Start Drawing the Stuff
    draw_set_halign(fa_left);
    draw_set_valign(fa_center);
    
    //Draw Base Panel
    main_panelX = width*0.025;
    main_panelY = height*0.04;
    draw_sprite(spr_hud_base,0,main_panelX,main_panelY);
    
    
    //Draw Health
    if (class_player.hp &gt;= class_player.hp_max*0.66) { sprite_face = 0; healthColor = c_white; }
    if (class_player.hp &lt; class_player.hp_max*0.66) { sprite_face = 1; healthColor = c_yellow; }
    if (class_player.hp &lt; class_player.hp_max*0.33) { sprite_face = 2; healthColor = c_red; }
    
    if (global.character == char_jimmy) draw_sprite(spr_hud_face_jimmy,sprite_face,main_panelX,main_panelY);
    if (global.character == char_pinky) draw_sprite(spr_hud_face_pinky,sprite_face,main_panelX,main_panelY);
    if (global.character == char_raff) draw_sprite(spr_hud_face_raff,sprite_face,main_panelX,main_panelY);
    if (global.character == char_biu) draw_sprite(spr_hud_face_biu,sprite_face,main_panelX,main_panelY);
    if (global.character == char_punny) draw_sprite(spr_hud_face_punny,sprite_face,main_panelX,main_panelY);
    
    healthX = main_panelX+88;
    healthY = main_panelY+21;
    draw_set_font(font_wendy30);
    draw_text_colour(healthX,healthY,string(hp),healthColor,healthColor,healthColor,healthColor,min(main_hud_alpha,1));
    
    //Draw Relics
    relics_panelX = width*0.88;
    relics_panelY = main_panelY;
    
    relics_spriteX[1] = relics_panelX+45;
    relics_spriteX[2] = relics_panelX+90;
    relics_spriteX[3] = relics_panelX+135;
    relics_spriteY = relics_panelY+30;
    
    relics_stringX = relics_panelX+12;
    relics_stringY[1] = relics_panelY+75;
    relics_stringY[2] = relics_stringY[1]+30;
    relics_stringY[3] = relics_stringY[2]+30;
    draw_set_font(font_wendy12);
    
    if (global.relic_slot[1] != '') || (global.relic_slot[2] != '') || (global.relic_slot[3] != '')
    {
        draw_sprite(spr_hud_relics,0,relics_panelX,relics_panelY);
        for (i=1; i&lt;4; i++)
        {
            relicString = '';
            relicSprite = noone;
        
            if (global.relic_slot[i] == 'pineapple') { relicSprite = spr_pineapple_pudding; relicString = 'Double Health';   }
            if (global.relic_slot[i] == 'yottabyte') { relicSprite = spr_yottabyte_drive; relicString = 'Double Shield';   }
            if (global.relic_slot[i] == 'alcoholic') { relicSprite = spr_alcoholic_carrot; relicString = '+Stamina Regen';   }
            if (global.relic_slot[i] == 'infinity') { relicSprite = spr_infinity_battery; relicString = '+Shield Regen';   }
            if (global.relic_slot[i] == 'midnight') { relicSprite = spr_midnight_beer; relicString = 'Extra Damage';   }
            if (global.relic_slot[i] == 'watchful') { relicSprite = spr_watchful_eye; relicString = '+Max Ammo';   }
            if (global.relic_slot[i] == 'crystal') { relicSprite = spr_crystal_bacon; relicString = 'Health Regen';   }
            if (global.relic_slot[i] == 'dev') { relicSprite = spr_dev_potion; relicString = 'Ammo Regen';   }
            
            if (relicSprite) draw_sprite(relicSprite,0,relics_spriteX[i],relics_spriteY);
            if (relicString != '') draw_text_colour(relics_stringX,relics_stringY[i],relicString,c_black,c_black,c_black,c_black,min(main_hud_alpha,1));
        }
    }
    
    //Draw Shield and Stamina
    draw_set_halign(fa_right);
    draw_set_valign(fa_bottom);
    draw_set_font(font_wendy12);
    
    middle_panelX = width*0.5;
    middle_panelY = height*0.04;
    
    if (energy &lt;= 25)
    {
        guiShieldAlertTimeCurrent++;
        if (guiShieldAlertTimeCurrent &gt;= guiShieldAlertTime)
        {
            guiShieldAlertDraw = !guiShieldAlertDraw;
            guiShieldAlertTimeCurrent = 0;
        }
    }
    else
    {
        guiShieldAlertDraw = false;
        guiShieldAlertTimeCurrent = 0;
    }
    
    
    draw_sprite(spr_hud_shieldstamina,0,middle_panelX,middle_panelY);
    shield_color_front = make_colour_rgb(2, 145, 177);
    if (!guiShieldAlertDraw) shield_color_back = make_colour_rgb(10, 65, 95);
    else shield_color_back = K_BETU_RED;
    stamina_color_front = make_colour_rgb(223, 223, 223); 
    stamina_color_back = make_colour_rgb(58, 58, 58); 
    
    energyX1 = middle_panelX-140;
    energyY1 = middle_panelY+7;
    energyX2 = middle_panelX+133
    energyY2 = middle_panelY+46;
    draw_healthbar(energyX1,energyY1,energyX2,energyY2,(energy/energy_max)*100,shield_color_back,shield_color_front,shield_color_front,0,true,true);
    draw_text_colour(energyX2,energyY2+10,'shield',c_white,c_white,c_white,c_white,min(main_hud_alpha,1));
    
    staminaX1 = energyX1;
    staminaY1 = energyY2+8;
    staminaX2 = energyX2;
    staminaY2 = middle_panelY+77;
    draw_healthbar(staminaX1,staminaY1,staminaX2,staminaY2,(stamina/stamina_max)*100,stamina_color_back,stamina_color_front,stamina_color_front,0,true,true);
    draw_rectangle_colour( staminaX1-4 + (staminaX2-staminaX1)/2, staminaY1, staminaX1+4 + (staminaX2-staminaX1)/2, staminaY2, c_black,c_black,c_black,c_black,false);
    draw_text_colour(staminaX2,staminaY2+10,'stamina',c_black,c_black,c_black,c_black,min(main_hud_alpha,1));
    
    //Draw Current Weapons &amp; Ammo
    weapon_selectionX = main_panelX+162;
    weapon_selectionY1 = main_panelY+43;
    weapon_selectionY2 = main_panelY+110;
    weapon_alpha1 = 0;
    weapon_alpha2 = 0;
    
    if active_weapon == class_player.weapon1
    {
        draw_sprite(spr_hud_weapon_selected,0,weapon_selectionX,weapon_selectionY1);
        weapon_alpha1 = 1;
        weapon_alpha2 = 0.25;
    }
    if active_weapon == class_player.weapon2
    {
        draw_sprite(spr_hud_weapon_selected,0,weapon_selectionX,weapon_selectionY2);
        weapon_alpha2 = 1;
        weapon_alpha1 = 0.25;
    }
    
    current_ammoX = weapon_selectionX+150;
    current_ammoY1 = weapon_selectionY1+30;
    current_ammoY2 = weapon_selectionY2+30;
    draw_set_valign(fa_center);
    draw_set_font(font_wendy30);
    
    var guiReloadAlertDraw1 = false;
    var guiReloadAlertDraw2 = false;
    
    if instance_exists(class_player.weapon1)
    {
        if (class_player.weapon1.object == obj_gloves) offset = 22;
        else offset=0;
        
        if (class_player.weapon1.ammo) if ((class_player.weapon1.ammo_current/class_player.weapon1.ammo) &lt;= 0.3) guiReloadAlertDraw1 = true;
        var ammoColor1;
        if (guiReloadAlertDraw1) ammoColor1 = K_BETU_RED;
        else ammoColor1 = c_white;
        
        draw_sprite_ext(class_player.weapon1.sprite_index,0,weapon_selectionX+34,weapon_selectionY1+34+offset,1.5,1.5,0,c_white,min(main_hud_alpha,weapon_alpha1));
        draw_set_alpha(min(main_hud_alpha,weapon_alpha1));
        draw_text_outline_ext(current_ammoX, current_ammoY1, string(class_player.weapon1.ammo_current),ammoColor1,c_black);
        draw_set_alpha(min(main_hud_alpha,1));
    }
    
    if instance_exists(class_player.weapon2)
    {
        if (class_player.weapon2.object == obj_gloves) offset = 22;
        else offset=0;
        
        if (class_player.weapon2.ammo) if ( (class_player.weapon2.ammo_current/class_player.weapon2.ammo) &lt;= 0.3) guiReloadAlertDraw2 = true;
        var ammoColor2;
        if (guiReloadAlertDraw2) ammoColor2 = K_BETU_RED;
        else ammoColor2 = c_white;
        
        draw_sprite_ext(class_player.weapon2.sprite_index,0,weapon_selectionX+34,weapon_selectionY2+34+offset,1.5,1.5,0,c_white,min(main_hud_alpha,weapon_alpha2));
        draw_set_alpha(min(main_hud_alpha,weapon_alpha2));
        draw_text_outline_ext(current_ammoX, current_ammoY2, string(class_player.weapon2.ammo_current),ammoColor2,c_black);
        draw_set_alpha(min(main_hud_alpha,1));
    }
    
    
    //Draw Active Ammo Indicator
    ammo_indicatorX = main_panelX;
    ammo_indicatorY1 = main_panelY+43;
    ammo_indicatorY2 = main_panelY+77;
    ammo_indicatorY3 = main_panelY+111;
    
    if (active_type == type_light) draw_sprite(spr_hud_ammo_selected,0,ammo_indicatorX,ammo_indicatorY1);
    if (active_type == type_medium) draw_sprite(spr_hud_ammo_selected,0,ammo_indicatorX,ammo_indicatorY2);
    if (active_type == type_heavy) draw_sprite(spr_hud_ammo_selected,0,ammo_indicatorX,ammo_indicatorY3);
    
    
    //Draw Ammo Bars
    spacing = 34;
    ammo_panelX = main_panelX+32;
    ammo_panelY = main_panelY+52;
    
    ammo_panel_lightX = ammo_panelX;
    ammo_panel_lightY = ammo_panelY;
    if (active_type != type_light) lightAlpha = 0.4;
    else lightAlpha = 1;
    draw_sprite_ext(spr_hud_ammo_bar,0,ammo_panel_lightX,ammo_panel_lightY,1,1,0,c_white,min(main_hud_alpha,lightAlpha));
    
    ammo_panel_mediumX = ammo_panelX;
    ammo_panel_mediumY = ammo_panelY+spacing;
    if (active_type != type_medium) mediumAlpha = 0.4;
    else mediumAlpha = 1;
    draw_sprite_ext(spr_hud_ammo_bar,0,ammo_panel_mediumX,ammo_panel_mediumY,1,1,0,c_white,min(main_hud_alpha,mediumAlpha));
    
    ammo_panel_heavyX = ammo_panelX;
    ammo_panel_heavyY = ammo_panelY+(spacing*2);
    if (active_type != type_heavy) heavyAlpha = 0.4;
    else heavyAlpha = 1;
    draw_sprite_ext(spr_hud_ammo_bar,0,ammo_panel_heavyX,ammo_panel_heavyY,1,1,0,c_white,min(main_hud_alpha,heavyAlpha));
    
    offsetX = 4;
    offsetY = 4;
    offsetX2 = 76;
    offsetY2 = 14;
    
    ammo_bar_lightX = ammo_panel_lightX+offsetX;
    ammo_bar_lightY = ammo_panel_lightY+offsetY;
    ammo_bar_lightX2 = ammo_panel_lightX+offsetX2;
    ammo_bar_lightY2 = ammo_panel_lightY+offsetY2;
    if (active_type == type_light)
    {
        ammo_bar_light_color = make_color_rgb(0,178,77);
        back_color = c_silver;
    }
    else 
    {
        ammo_bar_light_color = make_color_rgb(0,96,60);
        back_color = c_gray;
    }
    draw_healthbar(ammo_bar_lightX,ammo_bar_lightY,ammo_bar_lightX2,ammo_bar_lightY2,(global.ammo_light/global.ammo_light_max)*100,back_color,ammo_bar_light_color,ammo_bar_light_color,0,true,false);
    
    ammo_bar_mediumX = ammo_panel_mediumX+offsetX;
    ammo_bar_mediumY = ammo_panel_mediumY+offsetY;
    ammo_bar_mediumX2 = ammo_panel_mediumX+offsetX2;
    ammo_bar_mediumY2 = ammo_panel_mediumY+offsetY2;
    if (active_type == type_medium)
    {
        ammo_bar_medium_color = make_color_rgb(178,0,65);
        back_color = c_silver;
    }
    else 
    {
        ammo_bar_medium_color = make_color_rgb(89,0,32);
        back_color = c_gray;
    }
    draw_healthbar(ammo_bar_mediumX,ammo_bar_mediumY,ammo_bar_mediumX2,ammo_bar_mediumY2,(global.ammo_medium/global.ammo_medium_max)*100,back_color,ammo_bar_medium_color,ammo_bar_medium_color,0,true,false);
    
    ammo_bar_heavyX = ammo_panel_heavyX+offsetX;
    ammo_bar_heavyY = ammo_panel_heavyY+offsetY;
    ammo_bar_heavyX2 = ammo_panel_heavyX+offsetX2;
    ammo_bar_heavyY2 = ammo_panel_heavyY+offsetY2;
    if (active_type == type_heavy) 
    {
        ammo_bar_heavy_color = make_color_rgb(0,88,178);
        back_color = c_silver;
        back_color = c_gray;
    }
    else
    {
        ammo_bar_heavy_color = make_color_rgb(0,51,61);
    }
    draw_healthbar(ammo_bar_heavyX,ammo_bar_heavyY,ammo_bar_heavyX2,ammo_bar_heavyY2,(global.ammo_heavy/global.ammo_heavy_max)*100,back_color,ammo_bar_heavy_color,ammo_bar_heavy_color,0,true,false);
    
    //Draw Ammo Numbers
    draw_set_halign(fa_right);
    draw_set_valign(fa_center);
    ammo_storedX =  ammo_panelX+125;
    ammo_storedY1 = ammo_panel_lightY+7;
    ammo_storedY2 = ammo_panel_mediumY+7;
    ammo_storedY3 = ammo_panel_heavyY+7;
    ammo_storedY = 0;
    
    if instance_exists(active_weapon) &amp;&amp; (active_type != -1)
    {
        if (active_type == type_light) { draw_ammo_stored = floor(global.ammo_light/active_weapon.ammo_cost); ammo_storedY = ammo_storedY1; }
        if (active_type == type_medium) { draw_ammo_stored = floor(global.ammo_medium/active_weapon.ammo_cost); ammo_storedY = ammo_storedY2;}
        if (active_type == type_heavy) { draw_ammo_stored = floor(global.ammo_heavy/active_weapon.ammo_cost); ammo_storedY = ammo_storedY3;}
        
        draw_set_font(font_wendy12);
        draw_text_colour(ammo_storedX, ammo_storedY, string(draw_ammo_stored),c_black,c_black,c_black,c_black,min(main_hud_alpha,0.8));
    }
    
    draw_grenadesX = main_panelX+120;
    draw_grenadesY = main_panelY+162;
    draw_set_font(font_wendy12);
    draw_text_colour(draw_grenadesX, draw_grenadesY, 'x '+string(global.grenades),c_black,c_black,c_black,c_black,min(main_hud_alpha,0.8));
    
    
    //Draw Reload Alert
    /*
    if instance_exists(class_player.myGun)
    {
        if ( (class_player.myGun.ammo_current/class_player.myGun.ammo) &lt;= 0.3)
        {
            guiReloadAlertTimeCurrent++;
            if (guiReloadAlertTimeCurrent &gt;= guiReloadAlertTime)
            {
                guiReloadAlertDraw = !guiReloadAlertDraw;
                guiReloadAlertTimeCurrent = 0;
            }
        }
        else
        {
            guiReloadAlertDraw = false;
            guiReloadAlertTimeCurrent = 0;
        }
    }
    else
    {
        guiReloadAlertDraw = false;
        guiReloadAlertTimeCurrent = 0;
    }
    
    if (guiReloadAlertDraw)
    {
        var reloadAlertX = width*0.5;
        var reloadAlertY = height*0.16;
        var reloadString;
        if (global.input == 'keyboard') reloadString = 'Press "R" To Reload';
        else reloadString = 'Press "X" To Reload';
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_set_font(font_wendy15);
        draw_text_colour(reloadAlertX,reloadAlertY,reloadString,K_BETU_RED,K_BETU_RED,K_BETU_RED,K_BETU_RED,min(main_hud_alpha,1));
    }*/
    
    //Gui_score Objects
    if instance_exists(gui_score)
    {
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        
        var drawScoreX = width*0.5;
        var drawScoreY = height*0.2;
        
        draw_set_font(font_wendy30);
        draw_text_outline_ext_transformed(drawScoreX,drawScoreY,gui_score.myString,c_white,c_white,1,1,0);
        draw_set_font(font_wendy50);
        draw_text_outline_ext_transformed(drawScoreX,drawScoreY+43,'+'+string(gui_score.value),c_white,c_white,gui_score.size_current,gui_score.size_current,0);

    }
    
    //Boss Lifebar
    if instance_exists(obj_boss)
    {
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        
        var drawBossX1 = width*0.2;
        var drawBossY1 = height*0.9;
        var drawBossX2 = width*0.8;
        var drawBossY2 = height*0.95;
        
        draw_healthbar(drawBossX1, drawBossY1, drawBossX2, drawBossY2, (obj_boss.hp/obj_boss.hp_max)*100,c_black, c_red,c_red,0,true,true);
    }
}

draw_set_alpha(1)
surface_reset_target();
var surfaceXScale = window_get_width()/1920;
var surfaceYScale = window_get_height()/1080;
if (surface_exists(guiSurface)) draw_surface_ext(guiSurface, 0, 0, surfaceXScale, surfaceYScale, 0, c_white, 1);







</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fullscreen Effects


//Red Flash On Damage
if instance_exists(class_player)
{
    if (class_player.hit_taken) &amp;&amp; (!class_player.shield)
    {
        draw_set_alpha(0.3);
        draw_rectangle_colour(0,0,window_get_width(),window_get_height(),c_red,c_red,c_red,c_red,false);
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FPS and Autoaim
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(font_wendy12);

//Draw FPS if it is low!
if ((fps/room_speed) &lt; 0.9) draw_text(window_get_width()*0.93, window_get_height()*0.97, "FPS " + string(fps) + '/' + string(room_speed) );

if (global.input = 'joystick')
{
    var stringAim;
    if (global.auto_aim == K_AUTOAIM_OFF) stringAim = 'OFF';
    if (global.auto_aim == K_AUTOAIM_ASSIST) stringAim = 'ASSIST';
    if (global.auto_aim == K_AUTOAIM_FULL) stringAim ='FULL';
    
    draw_text(window_get_width()*0.93, window_get_height()*0.94,'AIM: '+stringAim );
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cutscene Bars Draw

if (cutscene_bars_position &gt; 0)
{
    draw_set_colour(c_black);
    draw_rectangle(0,0,window_get_width(),window_get_height()*cutscene_bars_position,false);
    draw_rectangle(0,window_get_height()*(1-cutscene_bars_position),window_get_width(),window_get_height(),false);

    if (!global.cutscene)
    {
        cutscene_bars_position -= cutscene_bars_exit_speed;
    }
}
else
{
   if (main_hud_alpha &lt; 1) main_hud_alpha+=0.15;
   else main_hud_alpha = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crosshair

if (!global.pauseMenu)
{
    var drawCrosshair = true;
    
    if collision_circle(global.crosshairX,global.crosshairY,5,class_enemy,false,true) crosshair_image = 1;
    else crosshair_image = 0;
    
    if instance_exists(class_player)
    {
        if instance_exists(class_player.myGun)
        {
            if (class_player.myGun.reloading)
            {
                drawCrosshair = false;
                var subImage = (class_player.myGun.reload_time_current/class_player.myGun.reload_time)*12; //12=animation frames
                
                if (global.input == 'keyboard')
                { 
                    draw_sprite_ext(spr_crosshair,3,global.crosshairX,global.crosshairY,global.crosshair_scale,global.crosshair_scale,0,c_white,1);
                    draw_sprite_ext(spr_crosshair_reload,subImage,global.crosshairX,global.crosshairY,1.6,1.6,0,c_white,1);
                } 
            }
        }
        
        if (class_player.aiming) || ((global.input == 'joystick') &amp;&amp; (!class_player.joyAimLocked)) drawCrosshair = false;
    }
    
    if (drawCrosshair) draw_sprite_ext(spr_crosshair,crosshair_image,global.crosshairX,global.crosshairY,global.crosshair_scale,global.crosshair_scale,0,c_white,1);
    
    if global.crosshair_scale &gt; 1
    {
        global.crosshair_scale -= 0.05;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
