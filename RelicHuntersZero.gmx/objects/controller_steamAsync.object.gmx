<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Daily Score
global.dailyChecked = 0;
global.dailyPlayers = -1;
global.dailyBadge = 0;
global.dailyBadgeString = "";
global.dailyRankDebug = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sync Loop

//DAILY SYNC
{
    if (global.dailyChecked == 0)
    {
            //Upload Score
            steam_upload_score("RANK_GLOBAL_ALLTIME", global.scoreEndlessBest);
            currentDateString = "DAILY-"+string(current_day)+'-'+string(current_month)+'-'+string(current_year);
            steam_create_leaderboard(currentDateString, lb_sort_descending, lb_disp_numeric);
            steam_upload_score(currentDateString, global.scoreEndless);
            
            //Download Full List and wait for Async to load step 1
            fullList_get = steam_download_scores(currentDateString, 1, 9999);
            global.dailyChecked = 1;
    }
    else if (global.dailyChecked == 2) 
    {   
            //Find player's rank and wait for Async to load step 3
            score_get = steam_download_scores_around_user(currentDateString, 0, 1);
            global.dailyChecked = 3;
    }
    else if (global.dailyChecked == 4)
    {
        //Find out which Badge you got
        if (global.dailyPlayers != -1) &amp;&amp; (global.dailyRankDebug != -1)
        {
                var myTopPercent = global.dailyRankDebug / global.dailyPlayers;
                if (myTopPercent &lt;= 0.05) { global.dailyBadge = 7; } //MASTER
                else if (myTopPercent &lt;= 0.10) { global.dailyBadge = 6; } //DIAMOND
                else if (myTopPercent &lt;= 0.15) { global.dailyBadge = 5; } //PLATINUM
                else if (myTopPercent &lt;= 0.30) { global.dailyBadge = 4; } //GOLD
                else if (myTopPercent &lt;= 0.50) { global.dailyBadge = 3; } //SILVER
                else if (myTopPercent &lt;= 0.70) { global.dailyBadge = 2; } //BRONZE
                else { global.dailyBadge = 1; } //NO BADGE
                
                global.dailyChecked = 5;
                show_debug_message("Completed Steam Leaderboards sync - SUCCESS!");
        } 
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connect with Steam Leaderboards (Daily)
{
    if global.dailyChecked == 1
    {
        asyncFullList_id = ds_map_find_value(async_load, "id");
        if (asyncFullList_id == fullList_get) 
        {
            var entries = ds_map_find_value(async_load, "entries");
            var map = json_decode(entries);
            if ds_map_exists(map, "default")
            {
                ds_map_destroy(map);
                exit;
            }
            else
            {
                var list = ds_map_find_value(map, "entries");
                global.dailyPlayers = ds_list_size(list);
                ds_list_destroy(list);
                
                global.dailyChecked = 2; 
            }
            ds_map_destroy(map);   
        }   
    }
    else if global.dailyChecked == 3
    {
        async_id = ds_map_find_value(async_load, "id");
                
        if async_id == score_get
        {
            var entries = ds_map_find_value(async_load, "entries");
            var map = json_decode(entries);
            if ds_map_exists(map, "default")
            {
                        ds_map_destroy(map);
                        exit;
            }
            else
            {
                var list = ds_map_find_value(map, "entries");
                var len = ds_list_size(list);
                var entry;
                for(var i=0; i&lt;len; i++;)
                {
                    entry = ds_list_find_value(list, i );
                    steam_rank[i] = ds_map_find_value(entry, "rank");
                    if (ds_map_exists(entry, "data"))
                    {
                        var data = ds_map_find_value(entry, "data");
                        var buffId = buffer_base64_decode(data);
                        var message = buffer_read(buffId, buffer_string);
                        show_debug_message( " -- attached message: " + string(message));
                        buffer_delete(buffId);
                    }
                    ds_map_destroy(entry);
                }
                global.dailyRankDebug = steam_rank[0];
                ds_list_destroy(list);
                
                global.dailyChecked = 4; 
            }
            ds_map_destroy(map);    
        }  
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
