<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Shit
distance_ratio = 5;
distance_ratio_aiming = 2.5;
max_distance = 200;
hard_limit = 600;
weaponRange = 0;

screen_shake = 0;
shake_direction = 0;
shake_recovery = 4;
shake_max = 50;

gameZoom = 1;
zoom = 1;
zoom_speed_in = 0.015;
zoom_speed_out = 0.01;
zoom_current = zoom;
zoom_stamina_min = 70; //percent

aim_locked = false;
distance = 0;
angle = 0;

starting_position_set = false;

followSpeed = 30;
followSpeedCurrent = 0;
followSpeedAccel = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

if (!starting_position_set) &amp;&amp; instance_exists(class_player)
{
    x = class_player.x;
    y = class_player.y;
    view_xview[0] = x;
    view_yview[0] = y;
    starting_position_set = true;
} 

xview_previous = view_xview[0];
yview_previous = view_yview[0];
audio_listener_position(x, y, 0);
audio_listener_orientation(x,y,0,x,y,1); 

var countPlayers = instance_number(class_player);

//Camera Position
if instance_exists(class_player)
{
    if (countPlayers == 1)
    {
        var pId = class_player.myPlayerId;
    
        if (class_player.aiming) 
        {
            if (!aim_locked)
            {
                aim_locked = true;
                
                angle = point_direction(class_player.x, class_player.y, global.crosshairX[pId], global.crosshairY[pId]);
                
                distance = weaponRange  / distance_ratio_aiming;
                if distance &gt; hard_limit distance = hard_limit;
            }
            else if (global.input[pId] != K_INPUT_KEYBOARD) { // &lt;-- NEW CODE: Adjust position if angle diff is 45 degrees or greater
                var trueAngle = point_direction(class_player.x, class_player.y, global.crosshairX[pId], global.crosshairY[pId]);
                if (abs(angle-trueAngle) &gt; 45) angle = trueAngle;
            }
        }
        else 
        {
            aim_locked = false;

            distance = point_distance(class_player.x,class_player.y,global.crosshairX[pId],global.crosshairY[pId]) / distance_ratio;
            if (distance &gt; max_distance) distance = max_distance;
            angle = point_direction(class_player.x,class_player.y,global.crosshairX[pId],global.crosshairY[pId]);
                
            if (global.input[pId] != K_INPUT_KEYBOARD) distance = distance*1.5;
            
            //Minimum Distance for Joystick
            var joyDistanceMin = 16;
            if (global.input[pId] != K_INPUT_KEYBOARD) &amp;&amp; (distance &lt;= joyDistanceMin) &amp;&amp; (!class_player.joyIsRightStickAiming)
            {
               distance=0;
               angle=0;
            }

            if (global.input[pId] != K_INPUT_KEYBOARD) &amp;&amp; (global.auto_aim == K_AUTOAIM_FULL) &amp;&amp; (!class_player.joyIsRightStickAiming)
            {
                distance=0;
                angle=0;
            }
        }
        
        
        //Follow Movement (NEW)
        var targetX = class_player.x + lengthdir_x(distance,angle);
        var targetY = class_player.y + lengthdir_y(distance,angle);
        
        var totalDistance = point_distance(x,y,targetX,targetY);
        
        if (totalDistance &gt; 0.05)
        {
            if (global.input[pId] == K_INPUT_KEYBOARD) followSpeedCurrent = followSpeed;
            else if (followSpeedCurrent != followSpeed)  followSpeedCurrent += min(followSpeedAccel, abs(followSpeed-followSpeedCurrent));
        
            var totalAngle = point_direction(x,y,targetX,targetY);
            x += lengthdir_x(min(followSpeedCurrent, totalDistance), totalAngle);
            y += lengthdir_y(min(followSpeedCurrent, totalDistance), totalAngle);
        }
        else followSpeedCurrent = 0;
        
        //Screen Zoom
        if (class_player.sprinting) || (class_player.dodging) || (class_player.aiming) || (class_player.melee_dash) zoom = gameZoom*0.9;
        else zoom = gameZoom;
    }
    
    if (countPlayers == 2)
    {
        //2-player camera quick and unpolished
        var player1 = instance_find(class_player,0);
        var player2 = instance_find(class_player,1);
        
        if (player1) &amp;&amp; (player2) &amp;&amp; (instance_exists(player1)) &amp;&amp; (instance_exists(player1)) 
        {
            x = (player1.x + player2.x)/2;
            y = (player1.y + player2.y)/2;
        }
    }
    
    //Screen Shake
    if (screen_shake) &amp;&amp; (global.screenShakeRatio)
    {
        if screen_shake &gt; shake_max screen_shake = shake_max;
             
        x = x+lengthdir_x(screen_shake*global.screenShakeRatio,shake_direction);
        y = y+lengthdir_y(screen_shake*global.screenShakeRatio,shake_direction);
            
        screen_shake -= shake_recovery;
        shake_direction = irandom(359);
            
        if screen_shake &lt; 0 screen_shake = 0;
    }
}


//Zoom Control
if zoom_current != zoom
{
    if (zoom_current &gt; zoom) &amp;&amp; instance_exists(class_player)
    {
        zoom_current -= min(zoom_speed_in,zoom_current-zoom);
        
    }
    else zoom_current += min(zoom_speed_out,zoom-zoom_current);
}


view_wview[0] = 1280*zoom_current; //I am overriding this on the "game_pause()" script
view_hview[0] = 720*zoom_current;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
