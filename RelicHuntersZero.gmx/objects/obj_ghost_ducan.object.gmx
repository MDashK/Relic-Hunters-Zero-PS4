<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ghost_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Shit

speed_walk = 3.8;
moving = false;
shy = false;
shyTrigger = false;
activationFX = noone;
shyMaxDistance = 650;

teleportTime = room_speed*4;
teleportTimeCurrent = 0;

//Attack
look_direction = 1;
damage = 100;
damage_timer = room_speed*1.5;
damage_timer_current = damage_timer;

//Sprites
sprite_walk = spr_ghost_walking;
sprite_idle = spr_ghost_idle;
sprite_shy = spr_ghost_facing;

//AI
ai_active = false;
want_to_activate = false;
ai_activation_range = 600;

ai_target = noone;
ai_shutdown_range = 1200;
ai_state = 'CHASE';

reflection_object_setup(0,-1,image_index);
//shadow_object_setup(0,-1,-1,global.default_shadow_yscale); &lt;-- ghosts cast no shadow, dummy!

//Audio
audio_emitter = audio_emitter_create();
audio_emitter_falloff(audio_emitter, global.falloffMinorDist, global.falloffMinorMax , global.falloffMinorFactor);
audio_emitter_gain(audio_emitter,global.soundVolume);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.pause</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shyness &amp; Animation

//Check Shy
shy = false;
if (instance_exists(ai_target)){
    if (point_distance(x,y,ai_target.x,ai_target.y) &lt;= shyMaxDistance){
        if (look_direction == 0){
            if (ai_target.look_direction == 1) shy = true;
        }
            
        if (look_direction == 1){
            if (ai_target.look_direction == 0) shy = true;
        }
    }
}

//Animate
if (!shy) 
{
    if (shyTrigger) &amp;&amp; (!instance_exists(activationFX)){
        activationFX = instance_create(x,y,fx_activation);
        activationFX.owner = id;
    }
    shyTrigger = false;
    
    if (moving) sprite_index = sprite_walk;
    else sprite_index = sprite_idle;
        
    image_speed = 0.2;
}
else if (!shyTrigger){
    sprite_index = sprite_shy;
    image_index = 0;
    image_speed = 0.2;
    shyTrigger = true;
}

if (look_direction == 1) image_xscale = 1;
else image_xscale = -1;


//Teleport If Shy For Too Long
if (shy)
{
    if (teleportTimeCurrent &gt;= teleportTime)
    {   
        teleportTimeCurrent = 0;
        
        if (instance_exists(obj_spawn_topLeft)) &amp;&amp; (instance_exists(obj_spawn_botRight)){
            var validPosition = false;
            var teleportX, teleportY;
            
            while (!validPosition){
                teleportX = irandom_range( obj_spawn_topLeft.x , obj_spawn_botRight.x );
                teleportY = irandom_range( obj_spawn_topLeft.y , obj_spawn_botRight.y );
                if (!collision_circle(teleportX,teleportY,42,obj_limit,false,true)) validPosition = true;
            }
            
            x = teleportX;
            y = teleportY;
        }
    }
    else if (image_speed == 0) teleportTimeCurrent++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI &amp; Movement

//Setup
ai_movetarget_x = -1;
ai_movetarget_y = -1;
distance_to_target = 99999;
current_distance = 0;
move_speed = speed_walk;

var myClosestPlayer = instance_nearest(x,y,faction_player);
distance_to_player = 0;
if (instance_exists(myClosestPlayer)) distance_to_player = point_distance(x,y,myClosestPlayer.x,myClosestPlayer.y); 

//Activate AI
if (!ai_active)
{
    if (distance_to_player &lt; ai_activation_range) &amp;&amp; instance_exists(myClosestPlayer) &amp;&amp; (!want_to_activate)
    {
        if collision_line(x,y,myClosestPlayer.x,myClosestPlayer.y,obj_limit,false,true) &lt; 0
        {
            want_to_activate = true;
        }
    }
    
    if (want_to_activate)
    {
        ai_active = true;
        activationFX = instance_create(x,y,fx_activation);
        activationFX.owner = id;
    }
}

//Resolve AI
if (ai_active) &amp;&amp; ( (distance_to_player &lt; ai_shutdown_range) || (on_screen(x,y)) ) &amp;&amp; (instance_exists(myClosestPlayer))
{    
    distance_to_target = distance_to_player;
    ai_target = myClosestPlayer;
    
    if instance_exists(ai_target)
    {
        //Aggro Control
        ai_state = 'CHASE';
        
        //State Descriptions
        if ai_state == 'CHASE'
        {
            if (damage_timer_current &gt;= damage_timer) &amp;&amp; (!shy)
            {
                ai_movetarget_x = ai_target.x;
                ai_movetarget_y = ai_target.y;
            }
            else
            {
                ai_movetarget_x = x;
                ai_movetarget_y = y;
            }
        }
    }
    
    //Resolve
    if (point_distance(x,y,ai_movetarget_x,ai_movetarget_y) &gt; 3) {
        move_towards_point(ai_movetarget_x,ai_movetarget_y,speed_walk);
        moving = true;
    }
    else {
        move_towards_point(x,y,0);
        moving = false;
    }
}


//Look Direction
if instance_exists(ai_target)
{
    if (ai_target.x &gt; x) look_direction = 1;   
    else look_direction = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage

myEnemy = noone;
myEnemy = collision_ellipse(bbox_left,bbox_top,bbox_right,bbox_bottom,faction_player,false,true);

if (myEnemy) &amp;&amp; (damage_timer_current &gt;= damage_timer) &amp;&amp; instance_exists(myEnemy)
{
    if (!myEnemy.dodging)
    {
        var originalDamage = damage;
        
        damage_timer_current = 0;
        
        if (myEnemy.energy)
        {
            if (myEnemy.superShield) damage = 0;
            
            if (global.challengeSupressor) damage = damage*2;
            myEnemy.energy -= damage*2;
            
            
            if (myEnemy.energy &lt;= 0) audio_play(myEnemy.audio_emitter,false,1,sfx_shield_destroy);
            else audio_play(myEnemy.audio_emitter,false,1,sfx_shield_hit1,sfx_shield_hit2);
        }
        else myEnemy.hp -= damage;
        
        myEnemy.hit_taken = true;
        
        spreadX = irandom_range(-15,15);
        spreadY = irandom_range(-15,15);
        damage_fx = instance_create(myEnemy.x+spreadX,myEnemy.y+spreadY,fx_damage);
        damage_fx.damage = damage;
        
        
        audio_play(audio_emitter,false,1,sfx_kami_bite);
        
        damage = originalDamage;
    }
}
else damage_timer_current++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Self-destroy on level exit

var wantToDie = false;

if instance_exists(controller_main){
    if (controller_main.level_end) wantToDie = true;
}
else wantToDie = true;

if (wantToDie){
    audio_emitter_free(audio_emitter);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio
audio_emitter_position(audio_emitter, x, y, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clamp shy animation
if (sprite_index == sprite_shy){
    image_speed = 0;
    image_index = image_number-1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
