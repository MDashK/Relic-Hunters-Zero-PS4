<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss_gun</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>class_gun_enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Variables
event_inherited();
sound = 'rifle';
ammo_type = type_heavy;
is_sniper = true;

projectile_speed = 40;//18;
projectile_speed_decay = 0;//0.8;
projectile_damage = 12;
projectile_range = 1200;

accuracy = 12;
fire_burst = 20;
fire_burst_rate = room_speed*0.02;//0.07;
fire_rate = room_speed*5;//1.5;
fireRateFeedback = room_speed*4;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Override
draw_sprite_ext(sprite_index,image_index,drawX,drawY,image_xscale,image_yscale,image_angle,c_white,1);

if instance_exists(owner)
{
    if (owner.firing) &amp;&amp; (is_sniper) &amp;&amp; instance_exists(owner.ai_target) &amp;&amp; (fire_rate_current &gt;= fireRateFeedback)
    {
        aiming_direction = point_direction(x,y,owner.ai_target.x,owner.ai_target.y);
        
        range_to_solid = range_finder(x,y,aiming_direction,projectile_range,class_solid,false,true);
        range_to_enemy = range_finder(x,y,aiming_direction,projectile_range,class_player,false,true);
        {
            if (!range_to_solid) range_to_solid = 9999999;
            if (!range_to_enemy) range_to_enemy = 9999999;
            draw_range = min(range_to_solid,range_to_enemy,projectile_range);
            
            lineX = x+lengthdir_x(draw_range,aiming_direction);
            lineY = y+lengthdir_y(draw_range,aiming_direction);
            draw_line_width_colour(x,y,lineX,lineY,2,c_green,c_green);
            if (draw_range &lt; projectile_range) draw_circle_colour(lineX, lineY, 4, c_green, c_green, false);
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,9</point>
    <point>9,9</point>
  </PhysicsShapePoints>
</object>
