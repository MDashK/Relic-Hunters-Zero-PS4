<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss_hit</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Things

myDeathStage = 1;
coinDrops = 10;

image_xscale = 1;
image_yscale = 1;

corpse_friction = 0.4;
image_speed = 0;
image_index = 1;

speed_reset = false;
old_speed = 0;

max_speed = 10;

offset = 72;

explosionTimeCurrent = 0;

//Removes HUD
global.cutscene = true;

//Stops Music
audio_stop_all();
audio_play_sound(sfx_boss_death,99,false);

//Clean Up Enemies
if (instance_exists(class_enemy))
{
    with(class_enemy) instance_destroy();
}

if (instance_exists(obj_rocket_homing))
{
    with(obj_rocket_homing) instance_destroy();
}

//hehehehe
dropHugeGun = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stats, Achievements &amp; Unlocks
global.unlockEndless = true;

global.statBossKills++;

if ((global.statRunTime &lt; global.statRunBest || !global.statRunBest) &amp;&amp; (global.hasUsedCheckpoint == false)) global.statRunBest = global.statRunTime;

achievement_give("ACHIEVEMENT_BEATGAME");

if (global.hasUsedCheckpoint == false) &amp;&amp; (!global.unlockBiu)
{
    global.unlockBiu = true;
    achievement_give("ACHIEVEMENT_UNLOCKBIU");
    announce = instance_create(x,y,fx_bigMessage);
    announce.textBig = loc_key("HUD_UNLOCK_HUNTER");
    announce.textSmall = loc_key("HUD_UNLOCK_BIU");
    announce.hunterUnlockSprite = spr_hud_face_biu; 
}

if (global.character[1] == char_raff || global.character[2] == char_raff) &amp;&amp; (global.hasUsedCheckpoint == false)
{
    achievement_give("ACHIEVEMENT_ULTIMATERAFF");
}

if (global.character[1] == char_punny || global.character[2] == char_punny) &amp;&amp; (global.hasUsedCheckpoint == false)
{
    achievement_give("ACHIEVEMENT_ULTIMATEPUNNY");
}

if (global.character[1] == char_jimmy || global.character[2] == char_jimmy) &amp;&amp; (global.hasUsedCheckpoint == false) &amp;&amp; (global.hasPickedWeapon == false) 
{
    achievement_give("ACHIEVEMENT_JIMMYNOWEAPONS");
}

if (global.character[1] == char_biu || global.character[2] == char_biu) &amp;&amp; (global.hasUsedCheckpoint == false) &amp;&amp; (global.hasPickedWeapon == false) 
{
    achievement_give("ACHIEVEMENT_BIUNOWEAPONS");
}

if (global.character[1] == char_ass) || (global.character[2] == char_ass)
{
    achievement_give("ACHIEVEMENT_BEATGAMEWITHASS");
}

if (global.character[1] == char_pinky || global.character[2] == char_pinky ) &amp;&amp; (global.hasUsedCheckpoint == false)
{
    achievement_give("ACHIEVEMENT_ULTIMATEPINKY");
}

if (global.playerCount &gt; 1)
{
    achievement_give("ACHIEVEMENT_BEATGAMECOOP");
    
    if (global.hasUsedCheckpoint == false) &amp;&amp; (global.relic_slot[1] = '') &amp;&amp; (global.relic_slot[2] = '') &amp;&amp; (global.relic_slot[3] = '') achievement_give("ACHIEVEMENT_ULTIMATECOOP");
}

//Endless-specific achievements
if (global.gameMode == gamemode_endless)
{
    achievement_give("ACHIEVEMENT_FIRSTLOOP");
    if (global.currentLoop == 1) { // &lt;-- Loop number only increases when you leave the Boss room!
        if (global.character[1] == char_jimmy || global.character[2] == char_jimmy) achievement_give("ACHIEVEMENT_LOOP2_JIMMY");
        if (global.character[1] == char_pinky || global.character[2] == char_pinky ) achievement_give("ACHIEVEMENT_LOOP2_PINKYY");
        if (global.character[1] == char_raff || global.character[2] == char_raff) achievement_give("ACHIEVEMENT_LOOP2_RAFF");
        if (global.character[1] == char_biu || global.character[2] == char_biu) achievement_give("ACHIEVEMENT_LOOP2_BIU");
        if (global.character[1] == char_punny || global.character[2] == char_punny) achievement_give("ACHIEVEMENT_LOOP2_PUNNY");
        if (global.character[1] == char_ass) || (global.character[2] == char_ass) achievement_give("ACHIEVEMENT_LOOP2_ACE");
        if (global.character[1] == char_rider) || (global.character[2] == char_rider) achievement_give("ACHIEVEMENT_LOOP2_RIDER");
    }
    
    if (global.currentLoop == 2) achievement_give("ACHIEVEMENT_LOOP3");
    
    if (!global.hasPurchasedAnything) achievement_give("ACHIEVEMENT_LOOP_NOBUY");
}










</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tell the main controller to end the level
global.level_complete = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Coin Drop

repeat(10) instance_create(x,y,obj_pickup_coin);

coinDrops--;

if (coinDrops) alarm[0] = room_speed*0.5;
else
{
    var fader = instance_create(x,y,fx_fadeToBlack);
    fader.fadeDuration = room_speed*4;
    alarm[1] = room_speed*6;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hehehehehe

if (!dropHugeGun) &amp;&amp; (global.gameMode != gamemode_endless)
{
    bigFGun = instance_create(x,y,obj_pickup_bossGun);
    bigFGun.image_xscale = image_xscale;
    
    dropHugeGun = true;
    
    instance_create(4416,2368,obj_teleporter_secret);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause-Controlled Movement

if (!global.pause)
{
    if (speed_reset)
    {
        speed = old_speed;
        speed_reset = false;
    }
}
else if (speed_reset == false)
{
    old_speed = speed;
    speed = 0;
    speed_reset = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Slow Down
if (speed &gt; max_speed) speed = max_speed;
else speed -= corpse_friction;
if speed &lt;= 0 speed = 0;

depth = -y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Boss Final Show

//Several Explosions

if (myDeathStage == 1)
{
    explosion[0] = room_speed*2;
    explosion[1] = room_speed*3.5;
    explosion[2] = room_speed*5;
    explosion[3] = room_speed*6;
    explosion[4] = room_speed*6.5;
    explosion[5] = room_speed*7;
    explosion[6] = room_speed*7.25;
    explosion[7] = room_speed*7.5;
    explosion[8] = room_speed*7.75;
    explosion[9] = room_speed*8;
    explosion[10] = room_speed*8.25;
    explosionTimeCurrent++;
    var wantToExplode = false;
    
    if (explosionTimeCurrent &lt; explosion[10]) 
    {
        for (i=0; i&lt;=10; i++)
        {
            fuckYouGameMaker = explosion[i];
            if (explosionTimeCurrent == fuckYouGameMaker) wantToExplode = true;
        }
        
        if (wantToExplode)
        {
            wantToExplode = false;
            randomOffset = random_range(-offset,offset);
            var boom = instance_create(x+randomOffset,y+randomOffset,fx_explosion_regular);
            boom.damage = 0;
            boom.radius = 0;
        }
    }
    else 
    {
        sprite_index = spr_boss_death;
        image_speed = 0.05;
        myDeathStage = 2;
    }
}

//stage2 transitions to 3 on AnimationEnd


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="class_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bounce
direction = 180+(point_direction(x,y,other.x,other.y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Animation On Death Stage 2
if (myDeathStage == 2)
{
    image_index = (image_number)-1;
    image_speed = 0;
    myDeathStage = 3;
    
    alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
    /*
if (speed == 0) &amp;&amp; (image_speed == 0) &amp;&amp; (!global.pause)
{
        draw_persistent(sprite_index,image_index,x,y,image_xscale,image_yscale,image_angle,image_blend,image_alpha);
        instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
