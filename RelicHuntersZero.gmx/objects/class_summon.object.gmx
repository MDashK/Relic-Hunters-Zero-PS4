<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>faction_player</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Shit
shield = false;
energy_max = 99999;
energy = energy_max;
superShield = false;
hp_max = 99999;
hp = hp_max;
critical_death = false;

isVulnerable = false;
alarm[0] = room_speed*1;

speed_walk = 3.2;
speed_sprint = 3.2;

dash_speed = 20;
dodging = false;
moving = false;

//AI
ai_active = false;
want_to_activate = false;
ai_activation_range = 600;

ai_followTarget = noone;

aggro = random_range(0,50);
aggro_max = 200;
aggro_distance = 400;
aggro_add_patrol = 0.5;
aggro_add_close = 2;
aggro_add_hit = aggro_max;
aggro_cost_attack = 20;
aggro_cost_chase = 1;
aggro_min_chase = 120;

ai_target = noone;
ai_target_change = room_speed*2;
ai_target_change_current = ai_target_change;
ai_shutdown_range = 600;

ai_state = 'PATROL';
ai_patrol_range = 400;
ai_patrol_x = -1;
ai_patrol_y = -1;

ai_cover_x = -1;
ai_cover_y = -1;
ai_cover_priority = ds_priority_create();
ai_cover_check_range = 400;
ai_cover_hp_threshold = hp_max*0.5;

ai_dash_chance = 0;
ai_dash_cooldown = room_speed*1;
ai_dash_cooldown_current = ai_dash_cooldown;

ai_path = path_add();
path_point_current = 0;
collision_mass = 1+random(1);


//VFX
hit_taken = false;
hit_taken_max = room_speed*0.1;
hit_taken_count = 0;
hit_direction = 0;

pushed = false;
push_direction = 0;
push_speed = 0;
push_friction = 0.75;
push_duration = room_speed*0.2;
push_duration_current = 0;

no_score = false;


//Attack
look_direction = 1;
damage = 20;
damage_timer = room_speed*1;
damage_timer_current = damage_timer;

//Sprites
sprite_hit = spr_kamired_hit;
sprite_walk = spr_kamired_walk;
sprite_idle = spr_kamired_idle;
sprite_dash = spr_kamired_attack;
sprite_death = spr_kamired_death;
sprite_death2 = spr_kamired_death2;

sprite_precision1 = spr_kamired_precision;
sprite_precision2 = spr_kamired_precision2;
sprite_precision3 = spr_kamired_precision3;

sprite_dash_fx = spr_kamikaze_dash_fx;
myDash = noone;
myDash2 = noone;

reflection_object_setup(0,-1,image_index);
shadow_object_setup(0,-1,-1,global.default_shadow_yscale);

//Audio
audio_emitter = audio_emitter_create();
audio_emitter_falloff(audio_emitter, global.falloffMinorDist, global.falloffMinorMax , global.falloffMinorFactor);
audio_emitter_gain(audio_emitter,global.soundVolume);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make enemy vulnerable after spawning

isVulnerable = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.pause</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation &amp; VFX

if (look_direction == 1) image_xscale = 1;
else image_xscale = -1;

//Hit Taken
if (hit_taken)
{   
        hit_taken_count++;
        
        if (hit_taken_count &gt;= hit_taken_max) hit_taken = false;
        if (image_index == image_number-1) image_speed = 0;
        
        if hit_taken_count = 1
        {
            sprite_index = sprite_hit;
            image_speed = 0.2;
            image_index = 0;
        }
}
else
{
    if (moving) sprite_index = sprite_walk;
    else sprite_index = sprite_idle;
    
    if (dodging)
    {
        if (!instance_exists(myDash))
        {
            myDash = instance_create(x,y,fx_kamikaze_dash);
            myDash.owner = id;
            myDash.slowness = 2;
            myDash.alpha = 100;
        }
        if (!instance_exists(myDash2))
        {
            myDash = instance_create(x,y,fx_kamikaze_dash);
            myDash.owner = id;
            myDash.slowness = 4;
            myDash.alpha = 60;
        }
        sprite_index = sprite_dash;
    }
    image_speed = 0.2;
    hit_taken_count = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Life &amp; Death

if (hp &gt; hp_max) hp = hp_max;

if hp &lt;= 0
{
    var corpseSprite = sprite_death;
    
    myCorpse = instance_create(x,y,fx_corpse);
    myCorpse.image_xscale = image_xscale;
    myCorpse.sprite_index = corpseSprite;
    
    if (pushed)
    {
        myCorpse.speed = push_speed*2;
        myCorpse.direction = push_direction;
    }
    
    audio_play(audio_emitter,false,1,sfx_kami_death);
    
    if (critical_death) audio_play_exclusive(audio_emitter,false,1,sfx_precision_kill1,sfx_precision_kill2,sfx_precision_kill3,sfx_precision_kill4,sfx_precision_kill5);
    
    ds_list_add(global.audio_cleaner,audio_emitter);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI &amp; Movement

//Setup
ai_movetarget_x = -1;
ai_movetarget_y = -1;
distance_to_target = 99999;
current_distance = 0;
move_speed = speed_walk;
firing = false;


//Activate AI
if (hit_taken) want_to_activate = true;

if (!ai_active)
{    
    ai_active = true;
    activationFX = instance_create(x,y,fx_activation);
    activationFX.owner = id;
}

//Resolve AI
if (ai_active) &amp;&amp; (on_screen(x,y))  
{
    //Find my Target (Faction Check)
    fuckingEnemy = instance_nearest(x,y,class_enemy);
    if (instance_exists(fuckingEnemy)) distance_to_enemy = point_distance(x,y,fuckingEnemy.x,fuckingEnemy.y);
    else distance_to_enemy = 9999;
    
    
    
    if ai_target_change_current &gt;= ai_target_change || (!instance_exists(ai_target))
    {
        ai_target_change_current = 0;
        
        ai_target = fuckingEnemy;
        distance_to_target = distance_to_enemy;
    }
    else 
    {
        ai_target_change_current++;
        distance_to_target = distance_to_enemy;
    }
    
    //Find Follow Target
    var closestPlayer = instance_nearest(x,y,class_player);
    if (instance_exists(closestPlayer)) ai_followTarget = closestPlayer;
    else ai_followTarget = noone;
    
    var followDistance = 160;
        
    // Resolve AI with Target found
    
    if (!pushed)
    {
        //Aggro Control
        if (distance_to_target &lt;= aggro_distance) aggro += aggro_add_close;
        if (ai_state == 'PATROL') || (ai_state == 'FOLLOW') aggro += aggro_add_patrol;
        if (ai_state == 'CHASE') aggro -= aggro_cost_chase;
        
        if (aggro &lt; 0) aggro = 0;
        if (aggro &gt; aggro_max) aggro = aggro_max;

        
        //State Switches
        if ai_state == 'CHASE'
        {
            if (aggro &lt;= 0)  || (!instance_exists(ai_target))
            { 
                ai_state = 'PATROL'; 
                exit; 
            }
            
            if (ai_test_dash_chance(1))
            { 
                ai_state = 'DASH'; 
                dash_direction = irandom_range(-50,50) + point_direction(x,y,ai_target.x,ai_target.y);
                exit;
            }
        }
        
        
        if ai_state == 'PATROL'
        {
            if (distance_to_target &gt; aggro_distance) &amp;&amp; (ai_followTarget){
                if (instance_exists(ai_followTarget)){
                    if (point_distance(x,y,ai_followTarget.x,ai_followTarget.y) &gt; followDistance){
                        ai_state = 'FOLLOW';
                        exit;
                    }
                }
            }
        
            if (aggro &gt;= aggro_min_chase) &amp;&amp; (instance_exists(ai_target))
            {
                ai_state = 'CHASE';
                exit;
            }
        }
        
        if ai_state == 'FOLLOW'
        {   
            if (ai_followTarget) &amp;&amp; (instance_exists(ai_followTarget))
            {
                if (point_distance(x,y,ai_followTarget.x,ai_followTarget.y) &lt;= followDistance)
                {
                    ai_state = 'PATROL'; 
                    exit;
                }
            }
            else{
                ai_state = 'PATROL'; 
                exit;
            }
            
            if (aggro &gt;= aggro_min_chase) &amp;&amp; (distance_to_target &lt;= aggro_distance)
            {
                ai_state = 'CHASE';
                exit;
            }
        }
        
        //State Descriptions
        if ai_state == 'CHASE'
        {
            if (damage_timer_current &gt;= damage_timer)
            {
                ai_movetarget_x = ai_target.x;
                ai_movetarget_y = ai_target.y;
            }
            else
            {
                ai_movetarget_x = x;
                ai_movetarget_y = y;
            }
        }
        
        if ai_state == 'PATROL'
        {
            if (ai_patrol_x) &amp;&amp; (ai_patrol_y)
            {
                if (collision_point(ai_patrol_x,ai_patrol_y,class_solid,false,true) &lt; 0)
                {
                    ai_movetarget_x = ai_patrol_x;
                    ai_movetarget_y = ai_patrol_y;
                }
                else
                {
                    ai_movetarget_x = x;
                    ai_movetarget_y = y;
                }
            }
            else
            {
                ai_patrol_x = x+(random_range(-400,400));
                ai_patrol_y = y+(random_range(-400,400));
            }
        }
        else
        {
            ai_patrol_x = -1;
            ai_patrol_y = -1;
        }
        
        if ai_state == 'DASH'
        {
            ai_state = 'PATROL';
            ai_dash_cooldown_current = 0;
            
            audio_play(audio_emitter,false,1,sfx_kami_dash);
            
            dodging = true;
            pushed = true;
            push_direction = dash_direction;
            push_speed = dash_speed;
            exit;
        }
        else if (ai_dash_cooldown_current &lt; ai_dash_cooldown) ai_dash_cooldown_current++;
        
        if ai_state == 'FOLLOW'
        {
                ai_movetarget_x = ai_followTarget.x;
                ai_movetarget_y = ai_followTarget.y;
        }
    }
    
    
    
    //Resolve
    path_update();
    
    moving = false;
    if (ai_movetarget_x) &amp;&amp; (ai_movetarget_y) &amp;&amp; point_distance(x,y,ai_movetarget_x,ai_movetarget_y) &gt; 3
    {
        moving = true;
    }
    
    
    
    
}
/*
else
{
    ai_movetarget_x = x;
    ai_movetarget_y = y;
}*/





//Look Direction
var lookTarget = ai_target;
if (!instance_exists(ai_target)) &amp;&amp; (ai_state == 'FOLLOW') lookTarget = ai_followTarget;

if instance_exists(lookTarget)
{
    if (lookTarget.x &gt; x) look_direction = 1;   
    else look_direction = 0;
}
else{
    if (ai_movetarget_x &gt; x) look_direction = 1;   
    else look_direction = 0;
}




//Resolve (tirei daqui)


// Push
if (pushed)
{
    path_end();
    move_step_ext(x + lengthdir_x(push_speed, push_direction),y + lengthdir_y(push_speed, push_direction),0,class_solid,0,0,0,0,0,0);

    push_speed -= push_friction;
    if push_speed &lt; 0 push_speed = 0;
    
    push_duration_current++;
    if push_duration_current &gt;= push_duration
    {
        push_duration_current = 0;
        pushed = false;
        dodging = false;
    }
}
else push_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage

myEnemy = collision_ellipse(bbox_left,bbox_top,bbox_right,bbox_bottom,class_enemy,false,true);

var isWall = false;
if (!myEnemy) {
    myEnemy = collision_ellipse(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_wall,false,true);
    if (myEnemy) isWall = true;
}

if (myEnemy) &amp;&amp; (damage_timer_current &gt;= damage_timer) &amp;&amp; instance_exists(myEnemy) &amp;&amp; (!hit_taken)
{
    var originalDamage = damage;
    if (global.relic_midnight_beer == 2) damage += round(damage*global.midnightDamageMultiplier );
    if (global.relic_midnight_meal == 2) damage += round(damage*global.midnightDamageMultiplier );
    
    if (!isWall){
        if (!myEnemy.dodging)
        {
            damage_timer_current = 0;
            
            if (myEnemy.energy)
            {
                damage = damage*2;
                if (global.challengeSupressor) damage = damage*2;
                myEnemy.energy -= damage*2;
                
                if (global.challengeJaws) myEnemy.energy = 0;
                
                if (myEnemy.energy &lt;= 0) audio_play(myEnemy.audio_emitter,false,1,sfx_shield_destroy);
                else audio_play(myEnemy.audio_emitter,false,1,sfx_shield_hit1,sfx_shield_hit2);
            }
            else myEnemy.hp -= damage;
            
            myEnemy.hit_taken = true;
            
            spreadX = irandom_range(-15,15);
            spreadY = irandom_range(-15,15);
            damage_fx = instance_create(myEnemy.x+spreadX,myEnemy.y+spreadY,fx_damage);
            damage_fx.damage = damage;
            
    
            myEnemy.pushed = true;
            myEnemy.push_direction = point_direction(x,y,myEnemy.x,myEnemy.y);
            myEnemy.push_speed += 4;
            
            audio_play(audio_emitter,false,1,sfx_kami_bite);
        }
    }
    else{
        myEnemy.hp -= damage;
        myEnemy.shake_direction = irandom(360);
        myEnemy.hitDirection = irandom(360);
        myEnemy.shake += 2;
        myEnemy.hit_taken = true;
    }
    
    damage = originalDamage;
}
else damage_timer_current++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio
audio_emitter_position(audio_emitter, x, y, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Anti-Bug: Destroy If Inside Wall

if collision_point(x,y,obj_limit,false,true)
{
    myCorpse = instance_create(x,y,fx_corpse);
    myCorpse.image_xscale = image_xscale;
    if (pushed)
    {
        myCorpse.speed = push_speed*2;
        myCorpse.direction = push_direction;
        myCorpse.sprite_index = sprite_death;
    }
    
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
draw_self();

//Pause Animation
old_image_speed = image_speed;
if (global.pause)
{
    image_speed = 0;
    path_end();
}
else image_speed = old_image_speed;

//Debug
/*
draw_set_font(global.font_numberSmall);
draw_text(x,y-30,ai_state);

if (ai_state == 'PATROL')
{
    draw_text(x,y+30,string(ai_patrol_x)+','+string(ai_patrol_y));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
