<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>9999998</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Global Quality Init
global.reflections = false;
global.persistent_objects = false;
global.shadows = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reflections
reflection_init();

reflection_add_object(class_player);
reflection_add_object(class_enemy);
reflection_add_object(class_gun);
reflection_add_object(obj_gloves);
reflection_add_object(obj_buckler);
reflection_add_object(class_gun_enemy);
reflection_add_object(class_projectile);
reflection_add_object(class_grenadeNew);
reflection_add_object(obj_wall);
reflection_add_object(obj_wall_stage3);
reflection_add_object(obj_ass);
reflection_add_object(class_character_swap);
reflection_add_object(class_pickup_weapon);
reflection_add_object(class_pickup_ammo);
reflection_add_object(class_pickup_health);
reflection_add_object(fx_teleporter);
reflection_add_object(obj_bigwindow);

reflection_define_area(0,0,room_width,room_height);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Persistent Objects
global.persistent_draw = noone;

/*global.persistent_draw = surface_create(room_width,room_height);
surface_set_target(global.persistent_draw);
draw_clear_alpha(c_black, 0);
surface_reset_target();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shockwave Shader Init
/*
global.shock_enabled = false;
global.shock_positionX = mouse_x - view_xview;
global.shock_positionY = mouse_y - view_yview;

draw_set_color(c_white);

uni_time = shader_get_uniform(shd_shockwave,"time");
var_time_var = 0;

uni_mouse_pos = shader_get_uniform(shd_shockwave,"mouse_pos");

//uni_mouse_pos = shader_get_uniform(shd_shockwave,"mouse_pos");
//var_mouse_pos_x = mouse_x - view_xview;
//var_mouse_pos_y = mouse_y - view_yview;

uni_resolution = shader_get_uniform(shd_shockwave,"resolution");
var_resolution_x = view_wview;
var_resolution_y = view_hview;

uni_shock_amplitude = shader_get_uniform(shd_shockwave,"shock_amplitude");
var_shock_amplitude = 10;

uni_shock_refraction = shader_get_uniform(shd_shockwave,"shock_refraction");
var_shock_refraction = 0.8;

uni_shock_width = shader_get_uniform(shd_shockwave,"shock_width");
var_shock_width = 0.1;

shader_enabled = true;
full_screen_effect = true;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shadows
shadow_init(0.4);

shadow_add_object(class_player);
shadow_add_object(class_enemy);
shadow_add_object(obj_boss_spawner);
shadow_add_object(class_generator);
shadow_add_object(obj_kamikazelite_flying);
shadow_add_object_tall(obj_wall_stage1);
shadow_add_object_tall(obj_wall_stage2);
shadow_add_object_tall(obj_wall_stage4);
shadow_add_object_tall(obj_wall_halloween);

tall_object = instance_create(x,y,controller_shadow_tall);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean-Up

global.surface_view_offset_shadows = 300;
global.surface_view_offset_reflections = 500;

if surface_exists(global.persistent_draw) surface_free(global.persistent_draw);
if surface_exists(global.reflection_surface) surface_free(global.reflection_surface);
if surface_exists(global.shadow_surface) surface_free(global.shadow_surface);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle Effects ON and OFF

if (!global.shadows_toggle) global.shadows = false;
if (!global.reflections_toggle) global.reflections = false;
if (!global.persistent_toggle) global.persistent_objects = false;
else global.persistent_objects = true;

// SUPER DISGUSTING HACK GO!
if (room == room_start) || (room == room_shop) || (room == room_shop) || (room == room_tutorial) || (room == level3_1) || (room == level3_2) || (room == level3_3) || (room == room_endShop)
{
    global.shadows = false;
    if (global.reflections_toggle) global.reflections = true;
}
else
{
    if (global.shadows_toggle) global.shadows = true;
    global.reflections = false;
}



if (!global.persistent_objects)
{
    if surface_exists(global.persistent_draw) surface_free(global.persistent_draw);
}

if (!global.reflections)
{
    if surface_exists(global.reflection_surface) surface_free(global.reflection_surface);
}

if (!global.shadows)
{
    if surface_exists(global.shadow_surface) surface_free(global.shadow_surface);
    if surface_exists(global.shadow_surface_tall) surface_free(global.shadow_surface_tall);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shockwave Fullscreen Draw
/*
if shader_enabled and shock_enabled 
    {
        shader_set(shd_shockwave);
        var_time_var+=0.004;
    }
    shader_set_uniform_f(uni_time, var_time_var);
    shader_set_uniform_f(uni_mouse_pos, var_mouse_pos_x, var_mouse_pos_y);
    shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
    shader_set_uniform_f(uni_shock_amplitude, var_shock_amplitude);
    shader_set_uniform_f(uni_shock_refraction, var_shock_refraction );
    shader_set_uniform_f(uni_shock_width, var_shock_width);
    if full_screen_effect draw_surface(application_surface,0,0);
shader_reset();

draw_text(0,0,"Real FPS: "+string(fps_real));
draw_text(0,12,"Shock amplitude (Q &amp; A to adjust): "+string(var_shock_amplitude));
draw_text(0,24,"Shock refraction (W &amp; S to adjust): "+string(var_shock_refraction));
draw_text(0,36,"Shock width (E &amp; D to adjust): "+string(var_shock_width));

draw_text(0,60,"Spacebar to toggle shader");
//draw_text(0,72,"Shift key to toggle fullscreen or sprite only"); //not currently working
draw_text(0,84,"Left mouse click to start a shockwave");
draw_text(0,96,"Escape key to exit");






/*
if (!global.shock_enabled) var_time_var = 0;

if shader_enabled &amp;&amp; global.shock_enabled
    {
        shader_set(shd_shockwave);
        var_time_var+=0.004;
    }
    shader_set_uniform_f(uni_time, var_time_var);
    shader_set_uniform_f(uni_mouse_pos, global.shock_positionX, global.shock_positionY);
    shader_set_uniform_f(uni_resolution, var_resolution_x, var_resolution_y);
    shader_set_uniform_f(uni_shock_amplitude, var_shock_amplitude);
    shader_set_uniform_f(uni_shock_refraction, var_shock_refraction );
    shader_set_uniform_f(uni_shock_width, var_shock_width);
    if full_screen_effect draw_surface(application_surface,0,0);
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Persistent Objects

if (global.persistent_objects)
{
    if surface_exists(global.persistent_draw) &amp;&amp; (global.persistent_draw != -1)
    {
        draw_surface_part(global.persistent_draw,view_xview[0],view_yview[0],view_wview[0],view_hview[0],view_xview[0],view_yview[0]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Reflective Area

if (global.reflections)
{
    reflection_update();
    reflection_draw(0.2);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Shadows

if (global.shadows)
{
    shadowColor = make_color_rgb(2,56,163);
    if (room == levelHalloween_1) || (room == levelHalloween_2) ||(room == levelHalloween_3 ){
        shadowColor = make_color_rgb(10,10,10);
    }
    
    shadow_update();
    shadow_draw(shadowColor,0.5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
