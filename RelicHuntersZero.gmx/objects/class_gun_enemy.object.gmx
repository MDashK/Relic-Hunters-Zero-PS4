<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Shit
owner = noone;
sound = 'pistol';
ammo_type = type_light;
is_sniper = false;

fire_amount = 1;
fire_burst = 1;
fire_burst_current = 0;
fire_burst_rate = room_speed*0.1;
fire_burst_rate_current = 0;
fire_rate = room_speed*0.1;
fire_rate_current = 0;
can_fire = true;

accuracy = 5;

is_rocket = false;

projectile_obj = obj_projectile_enemy;
projectile_speed = 0;
projectile_speed_decay = 0;
projectile_damage = 0;
projectile_range = 0;
projectile_power = 5;

spawn_distance_from_barrel = 24;

recoil_speed = 0;
recoil_return = 1.25;
recoil_current = 0;
recoil_max = 7;
drawX = x;
drawY = y;

reflection_object_setup(30,-1,image_index);
image_speed = 0;

shoot_direction = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Follow Owner Position
if instance_exists(owner)
{
    x = owner.x;
    y = owner.y-15;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.pause</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation and Rotation

if instance_exists(owner)
{
    if instance_exists(owner.ai_target)
    {
        image_angle = point_direction(x,y,owner.ai_target.x,owner.ai_target.y);
        if owner.look_direction == 0 image_angle = image_angle+180;
    }
    
    if owner.look_direction == 0 image_xscale = -1;
    if owner.look_direction == 1 image_xscale = 1; 
    
    depth = (owner.depth)-1;
}

//Recoil
recoil_current += recoil_speed;

if (recoil_current &gt; 0) recoil_speed -= recoil_return;
else
{
    recoil_current = 0;
    recoil_speed = 0;
}

if (recoil_current &gt; recoil_max) recoil_current = recoil_max



drawX = x +lengthdir_x( (-1*image_xscale*recoil_current), image_angle );
drawY = y +lengthdir_y( (-1*image_xscale*recoil_current), image_angle );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Firing Control

if instance_exists(owner)
{
    if instance_exists(owner.ai_target)
    {
        shoot_direction = point_direction(x,y,owner.ai_target.x,owner.ai_target.y);
        if (owner.firing) &amp;&amp; (can_fire)
        {
            shot_type = 0;
            cmd_fire_enemy();
        }
    }
    
    //Rate of Fire
    if (!can_fire) &amp;&amp; (fire_burst_current &gt;= fire_burst)
    {
        if (!is_sniper) fire_rate_current++;
        else if instance_exists(owner)
        {
            if (owner.firing) fire_rate_current++;
        }
        
        if (global.challengeBloodlust) fire_rate_current += global.challengeBloodlustRate;
        
        if fire_rate_current &gt;= fire_rate
        {
            fire_rate_current = 0;
            fire_burst_current = 0;
            can_fire = true;
        }
    }
    
    //Burst Fire
    if (fire_burst_current &lt; fire_burst) &amp;&amp; (!can_fire) &amp;&amp; (owner.firing)
    {
        fire_burst_rate_current++;
        if fire_burst_rate_current &gt;= fire_burst_rate
        {
            fire_burst_rate_current = 0;
            cmd_fire_enemy();
        }   
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
if (!instance_exists(owner)) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (sprite_exists(sprite_index)) draw_sprite_ext(sprite_index,image_index,drawX,drawY,image_xscale,image_yscale,image_angle,c_white,1);

if instance_exists(owner)
{
    if (owner.firing) &amp;&amp; (is_sniper) &amp;&amp; instance_exists(owner.ai_target)
    {
        aiming_direction = point_direction(x,y,owner.ai_target.x,owner.ai_target.y);
        
        range_to_solid = range_finder(x,y,aiming_direction,projectile_range,class_solid,false,true);
        range_to_enemy = range_finder(x,y,aiming_direction,projectile_range,class_player,false,true);
        {
            if (!range_to_solid) range_to_solid = 9999999;
            if (!range_to_enemy) range_to_enemy = 9999999;
            draw_range = min(range_to_solid,range_to_enemy,projectile_range);
            
            lineX = x+lengthdir_x(draw_range,aiming_direction);
            lineY = y+lengthdir_y(draw_range,aiming_direction);
            draw_line_width_colour(x,y,lineX,lineY,2,c_green,c_green);
            if (draw_range &lt; projectile_range) draw_circle_colour(lineX, lineY, 4, c_green, c_green, false);
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
