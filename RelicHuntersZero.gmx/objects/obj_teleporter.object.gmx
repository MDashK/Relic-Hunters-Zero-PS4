<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_teleporter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1410065407</depth>
  <persistent>0</persistent>
  <parentName>class_interactive_master</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

image_speed = 0;

active = true;
buy = false;

range = 40;
in_range = false;

myPrompt = instance_create(x,y-60,fx_prompt_e);
myPrompt.owner = id;

myEffect = instance_create(x,y,fx_teleporter);
myEffect.owner = id;

myLevel = -1;
myPrice = 0;

overrideCurrentLevel = false;
overrideLevel = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interaction

if instance_exists(activationClient) &amp;&amp; (active)
{
    if (point_distance(x,y,activationClient.x,activationClient.y) &lt;= range) in_range = true;   

    if (wantToActivate) &amp;&amp; (in_range)
    { 
        global.level_complete = true;

        if (myLevel != -1)
        {
            global.stage_current = myLevel;
            global.hasUsedCheckpoint = true; //Achievement purposes
        }
        
        if (overrideCurrentLevel)
        {
            global.overrideLevel = overrideLevel;
        }
    }
}
else in_range = false;


///Buy
if (buy = true) &amp;&amp; (!active)
{
    if (myLevel == 1) myPrice = global.price_checkpoint1;
    if (myLevel == 2) myPrice = global.price_checkpoint2;
    if (myLevel == 3) myPrice = global.price_checkpoint3;
    
    if instance_exists(activationClient)
    {
        if (point_distance(x,y,activationClient.x,activationClient.y) &lt;= range) in_range = true;   
        
        if (wantToActivate) &amp;&amp; (in_range) 
        { 
            if (global.score_total &gt;= myPrice)
            {
                global.score_total -= myPrice;
                if (myLevel == 1) global.checkpoint1 = 2;
                if (myLevel == 2) global.checkpoint2 = 2;
                if (myLevel == 3) global.checkpoint3 = 2;
                audio_play(class_player.audio_emitter,false,1,sfx_buy);
                
                //Raff Unlock
                if (global.checkpoint1 == 2) &amp;&amp; (global.checkpoint2 == 2) &amp;&amp; (global.checkpoint3 == 2) &amp;&amp; (!global.unlockRaff)
                {
                    global.unlockRaff = true;
                    achievement_give("ACHIEVEMENT_UNLOCKRAFF");
                    announce = instance_create(x,y,fx_bigMessage);
                    announce.textBig = loc_key("HUD_UNLOCK_HUNTER");
                    announce.textSmall = loc_key("HUD_UNLOCK_RAFF");
                    announce.hunterUnlockSprite = spr_hud_face_raff;
                }
            }
            else{
                guiInfo = instance_create(activationClient.x,activationClient.y,gui_info);
                guiInfo.myString = loc_key("INFO_NOTENOUGHBOUNTY");
                guiInfo.colorMain = K_BETU_RED;
                guiInfo.owner = activationClient;
                audio_play(activationClient.audio_emitter, false, 1, sfx_pickup_full);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Persistence

if myLevel == 1
{
    if (global.checkpoint1 != 2) active = false;
    else active = true;
    if (global.checkpoint1 == 1) buy = true;
    
}

if myLevel == 2
{
    if (global.checkpoint2 != 2) active = false;
    else active = true;
    if (global.checkpoint2 == 1) buy = true;
}

if myLevel == 3
{
    if (global.checkpoint3 != 2) active = false;
    else active = true;
    if (global.checkpoint3 == 1) buy = true;
}

if (active == false) &amp;&amp; (buy == false) &amp;&amp; (myLevel != -1)
{
    image_blend = c_white;
    image_alpha = 0.42;
}
else
{
    image_blend = c_white;
    image_alpha = 1;
}

if (active) image_index = 0;
else image_index = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Draw
draw_self();

draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_set_font(global.font_shopPrice);

if (buy) &amp;&amp; (!active)
{
    if (global.score_total &gt;= myPrice) color = c_white;
    else color = c_red;

    draw_sprite(spr_coin_ground,0,x-14,y+56);
    draw_text_outline(x-2,y+56,string(myPrice),color);
}

if (active) &amp;&amp; (room == room_start)
{
    unlock_max = global.shop_size_1;
    unlock_current = (unlock_max - ds_list_size(global.shop_list_1));

    if (myLevel == 1)
    {
        unlock_max = global.shop_size_2;
        unlock_current = (unlock_max - ds_list_size(global.shop_list_2));
    }
    
    if (myLevel == 2)
    {
        unlock_max = global.shop_size_3;
        unlock_current = (unlock_max - ds_list_size(global.shop_list_3));
    }
    
    if (myLevel == 3)
    {
        unlock_max = global.shop_size_4;
        unlock_current = (unlock_max - ds_list_size(global.shop_list_4));
    }
    
    draw_sprite(spr_unlock,0,x-18,y+56);
    draw_text_outline(x-6,y+56,string(unlock_current)+' / '+string(unlock_max),c_white);
}

//Draw Stage Feedback
if (room==room_start)
{
    draw_set_font(global.font_tinyText);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    
    draw_text_dropshadow_ext_transformed(x+2,y+37,loc_key("GENERAL_TELEPORTER_STAGE")+' '+string(max(1,myLevel+1)),c_white,c_black,0.7,2,1,1,0,1);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>39,99</point>
    <point>55,55</point>
  </PhysicsShapePoints>
</object>
