<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Configuration

//Initialization
draw_texture_flush();
stringCurrentDate = string(current_day)+string(current_month)+string(current_year);

if (!global.isDaily) randomize();
//else random_set_seed(global.dailySeed);
joy_init();


global.gameOver = false;
global.relicDetected = false;
global.overrideLevel = noone;


global.steamApi = false;

if (steam_initialised())
{
    if (steam_stats_ready()) &amp;&amp; (steam_is_overlay_enabled())
    {
       global.steamApi = true;
    }
    else show_debug_message('ERROR: Steam Stats Not Accessible At This Time');
}
else show_debug_message('ERROR: Steam not initialized');



//Camera and Crosshair
global.crosshairX[1] = 0;
global.crosshairY[1] = 0;
global.crosshair_scale[1] = 1;
global.crosshairX[2] = 0;
global.crosshairY[2] = 0;
global.crosshair_scale[2] = 1;

global.default_shadow_yscale = 0.3;
global.music = true;

main_camera = instance_create(x,y,controller_camera);
main_effects = instance_create(x,y,controller_effects);

level_end = false;
global.level_complete = false;
global.pause = 0;

view_xview[0] = x;
view_yview[0] = y;

//Survival Mode Configuration
global.survivalWaves = 0;
survivalWaveSize = 0;

if (room == levelHalloween_3) {global.survivalWaves = 3; survivalWaveSize = 3;}

//Combat Options
global.autoAimAngle = 38;
global.precisionAngle = 20;
global.precisionDistance = 32;
global.friendlyFireDamageRatio = 0.7;
global.enemyProjectileSpeed = 0.8;

//Level Build
level_built = false;

//Pathfinding
path_refresh = room_speed*1; // Updates the grid once per second
alarm[1] = path_refresh;
global.astar_grid = mp_grid_create(0,0,round(room_width/64),round(room_height/64),64,64);
mp_grid_add_instances(global.astar_grid,class_solid,false);

//Debug Pathfinding
global.drawGridDebug = false;

//GUI
guiSurface = surface_create(1920,1080);
global.total_value = 0;
score_time = room_speed*1.2;
score_time_current = 0;
score_value = 10;
score_string = 'KILL';

guiShieldAlertDraw = false;
guiShieldAlertTime = room_speed*0.5;
guiShieldAlertTimeCurrent = 0;

guiReloadAlertDraw = false;
guiReloadAlertTime = room_speed*0.5;
guiReloadAlertTimeCurrent = 0;

//Dynamic GUI
global.dynamicBounty = instance_create(0,0,gui_dynamic_bounty);
global.dynamicRelic1 = instance_create(0,0,gui_dynamic_relic1);
global.dynamicRelic2 = instance_create(0,0,gui_dynamic_relic2);
global.dynamicRelic3 = instance_create(0,0,gui_dynamic_relic3);
global.dynamicAmmo1 = instance_create(0,0,gui_dynamic_ammo1);
global.dynamicAmmo2 = instance_create(0,0,gui_dynamic_ammo2);

delayedAmmoLightBar[1] = 1;
delayedAmmoMediumBar[1] = 2;
delayedAmmoHeavyBar[1] = 3;
delayedCharHealthBar1[1] = 4;
delayedCharShieldBar1[1] = 5;
delayedAmmoLightBar[2] = 6;
delayedAmmoMediumBar[2] = 7;
delayedAmmoHeavyBar[2] = 8;
delayedCharHealthBar1[2] = 9;
delayedCharShieldBar1[2] = 10;
delayedP1AmmoBar = 11;
delayedP2AmmoBar = 12;
draw_healthbar_delayed_init(delayedAmmoLightBar[1]);
draw_healthbar_delayed_init(delayedAmmoMediumBar[1]);
draw_healthbar_delayed_init(delayedAmmoHeavyBar[1]);
draw_healthbar_delayed_init(delayedCharHealthBar1[1]);
draw_healthbar_delayed_init(delayedCharShieldBar1[1]);
draw_healthbar_delayed_init(delayedAmmoLightBar[2]);
draw_healthbar_delayed_init(delayedAmmoMediumBar[2]);
draw_healthbar_delayed_init(delayedAmmoHeavyBar[2]);
draw_healthbar_delayed_init(delayedCharHealthBar1[2]);
draw_healthbar_delayed_init(delayedCharShieldBar1[2]);
draw_healthbar_delayed_init(delayedP1AmmoBar);
draw_healthbar_delayed_init(delayedP2AmmoBar);

//BossFight GUI
bossBar = 666;
draw_healthbar_delayed_init(bossBar);
isBossSetup = false;
isGen1Setup = false;
isGen2Setup = false;
isGen3Setup = false;
fakeBarFill = 0;

//Score

global.coins_turtle1 = 1;
global.coins_turtle2 = 2;
global.coins_turtle3 = 3;
global.coins_duck1 = 3;
global.coins_duck2 = 4;
global.coins_duck3 = 5;

global.score_kill = 10;
global.score_headshot = 5;

global.score_doublekill = 5;
global.score_triplekill = 5;
global.score_multikill = 10;

//Prices
global.price_checkpoint1 = 1000;
global.price_checkpoint2 = 3000;
global.price_checkpoint3 = 6000;

global.price_pistol_assault = 650;
global.price_pistol_heavy = 3000;
global.price_pistol_plasma = 4200;
global.price_shotgun = 1200;
global.price_submachinegun = 2000;
global.price_highmag = 4000;
global.price_machinegun = 5000;
global.price_assault_rifle = 5000;
global.price_sniper_rifle = 5000;
global.price_shotgun_heavy = 5000;
global.price_rocketlauncher = 5000;

global.price_shield1 = 1000;
global.price_shield2 = 3000;
global.price_light1 = 300;
global.price_light2 = 300;
global.price_medium1 = 500;
global.price_medium2 = 850;
global.price_heavy1 = 500;
global.price_heavy2 = 750;
global.price_heavy3 = 750;
global.price_heavy4 = 750;
global.price_grenades1 = 1000;
global.price_grenades2 = 1500;
global.price_grenades3 = 1500;

global.price_pineapple1 = 1500;
global.price_pineapple2 = 1500;
global.price_pineapple3 = 1500;
global.price_alcoholic1 = 1500;
global.price_alcoholic2 = 1500;
global.price_alcoholic3 = 1500;
global.price_crystal1 = 3000;
global.price_crystal2 = 4500;
global.price_crystal3 = 4500;
global.price_infinity1 = 4500;
global.price_infinity2 = 4500;
global.price_infinity3 = 4500;
global.price_midnight1 = 4000;
global.price_midnight2 = 4000;
global.price_midnight3 = 4000;
global.price_watchful1 = 2500;
global.price_watchful2 = 2500;
global.price_watchful3 = 2500;
global.price_dev1 = 3500;
global.price_dev2 = 4500;
global.price_dev3 = 4500;
global.price_yottabyte1 = 1750;
global.price_yottabyte2 = 1750;
global.price_yottabyte3 = 1750;

//Players &amp; Ammo

global.friendlyFire = false;

global.reviveHealth = 0.5;
global.reviveAmmoLight = 160;
global.reviveAmmoMedium = 100;
global.reviveAmmoHeavy = 160;

global.ammo_light_max = 360;
global.ammo_medium_max = 280;
global.ammo_heavy_max = 400;
global.grenades_max = 5;

global.ammoDropChanceLight = 0.1;
global.ammoDropChanceMedium = 0.035;
global.ammoDropChanceHeavy = 0.025;
global.ammoDropLowThreshold = 0.15;
global.ammoDropEquippedBonus = 0.1;
global.ammoDropLowBonus = 0.1;

ammo_light_max_regular = global.ammo_light_max;
ammo_medium_max_regular = global.ammo_medium_max;
ammo_heavy_max_regular = global.ammo_heavy_max;
grenades_max_regular = global.grenades_max;

ammo_light_max_relic = 250;
ammo_medium_max_relic = 150;
ammo_heavy_max_relic = 250;
grenades_max_relic = global.grenades_max;
grenades_max_biu = 10;

draw_ammo1 = 0;
draw_ammo2 = 0;

//Relics
global.midnightDamageMultiplier = 0.5;
global.crystalBaconRegen = 8;
global.devPotionRegenTime = room_speed*0.75;
global.watchfulEyePickupBonus = 1.5;
global.relicHpBonus = 1;
global.relicEnergyBonus = 1;
awarded4RelicsAchievement = false;

//Audio
global.falloffMainDist = 1280;
global.falloffMainMax = 2000;
global.falloffMainFactor = 1;

global.falloffMediumDist = 600;
global.falloffMediumMax = 1500;
global.falloffMediumFactor = 1;

global.falloffMinorDist = 280;
global.falloffMinorMax = 1000;
global.falloffMinorFactor = 1;

//Stats
timeCounter = 0;
gameOverHint = '';

//Endless Score
global.scoreEndlessLevel = 600; 
global.scoreEndlessLoop = 2000;
global.scoreEndlessLoopMultiplier = 2;

//Daily Score
global.dailyChecked = 0;
global.dailyPlayers = -1;
global.dailyBadge = 0;
global.dailyBadgeString = "";
global.dailyRankDebug = -1;

//Pause Menu
game_pause_init();

//Center Mouse Position At Beggining
display_mouse_set(window_get_width() / 2, window_get_height() / 2);

//Low Performance Detection
global.lowPerfTime = room_speed*4.2;
global.lowPerfTimeCurrent = 0;

debug_forceLevelExit = false;

///Enemy Tracker
global.edgeTrackEnemyList = noone;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Endless Economy &amp; Rare Challenge Timers Balance
if (global.gameMode == gamemode_endless)
{
    global.endPrice_lightAmmo[0] = 120;
    global.endPrice_lightAmmo[1] = 160;
    global.endPrice_lightAmmo[2] = 190;
    global.endPrice_lightAmmo[3] = 220;
    global.endPrice_lightAmmo[4] = 280;
    global.endPrice_lightAmmo[5] = 350;
    global.endPrice_lightAmmo[6] = 410;
    global.endPrice_lightAmmo[7] = 500;
    global.endPrice_lightAmmo[8] = 600;
    global.endPrice_lightAmmo[9] = 700;
    
    global.endPrice_mediumAmmo[0] = 120;
    global.endPrice_mediumAmmo[1] = 160;
    global.endPrice_mediumAmmo[2] = 190;
    global.endPrice_mediumAmmo[3] = 220;
    global.endPrice_mediumAmmo[4] = 280;
    global.endPrice_mediumAmmo[5] = 350;
    global.endPrice_mediumAmmo[6] = 410;
    global.endPrice_mediumAmmo[7] = 500;
    global.endPrice_mediumAmmo[8] = 600;
    global.endPrice_mediumAmmo[9] = 700;
    
    global.endPrice_heavyAmmo[0] = 120;
    global.endPrice_heavyAmmo[1] = 160;
    global.endPrice_heavyAmmo[2] = 190;
    global.endPrice_heavyAmmo[3] = 220;
    global.endPrice_heavyAmmo[4] = 280;
    global.endPrice_heavyAmmo[5] = 350;
    global.endPrice_heavyAmmo[6] = 410;
    global.endPrice_heavyAmmo[7] = 500;
    global.endPrice_heavyAmmo[8] = 600;
    global.endPrice_heavyAmmo[9] = 700;
    
    global.endPrice_grenades[0] = 120;
    global.endPrice_grenades[1] = 160;
    global.endPrice_grenades[2] = 190;
    global.endPrice_grenades[3] = 220;
    global.endPrice_grenades[4] = 280;
    global.endPrice_grenades[5] = 350;
    global.endPrice_grenades[6] = 410;
    global.endPrice_grenades[7] = 500;
    global.endPrice_grenades[8] = 600;
    global.endPrice_grenades[9] = 700;
    
    global.endPrice_overshield[0] = 120;
    global.endPrice_overshield[1] = 160;
    global.endPrice_overshield[2] = 190;
    global.endPrice_overshield[3] = 220;
    global.endPrice_overshield[4] = 280;
    global.endPrice_overshield[5] = 350;
    global.endPrice_overshield[6] = 410;
    global.endPrice_overshield[7] = 500;
    global.endPrice_overshield[8] = 600;
    global.endPrice_overshield[9] = 700;
    
    global.endPrice_health[0] = 120;
    global.endPrice_health[1] = 160;
    global.endPrice_health[2] = 190;
    global.endPrice_health[3] = 220;
    global.endPrice_health[4] = 280;
    global.endPrice_health[5] = 350;
    global.endPrice_health[6] = 410;
    global.endPrice_health[7] = 500;
    global.endPrice_health[8] = 600;
    global.endPrice_health[9] = 700;
    
    global.endPrice_revive[0] = 500;
    global.endPrice_revive[1] = 2000;
    global.endPrice_revive[2] = 3000;
    global.endPrice_revive[3] = 4000;
    global.endPrice_revive[4] = 5000;
    global.endPrice_revive[5] = 6000;
    global.endPrice_revive[6] = 7000;
    global.endPrice_revive[7] = 8000;
    global.endPrice_revive[8] = 9000;
    global.endPrice_revive[9] = 9999;
    
    global.endPrice_hackCommon[0] = 500;
    global.endPrice_hackCommon[1] = 1200;
    global.endPrice_hackCommon[2] = 1600;
    global.endPrice_hackCommon[3] = 3000;
    global.endPrice_hackCommon[4] = 3300;
    global.endPrice_hackCommon[5] = 4000;
    global.endPrice_hackCommon[6] = 5000;
    global.endPrice_hackCommon[7] = 6500;
    global.endPrice_hackCommon[8] = 8000;
    global.endPrice_hackCommon[9] = 9999;
    
    global.endPrice_hackUnique[0] = 500;
    global.endPrice_hackUnique[1] = 1200;
    global.endPrice_hackUnique[2] = 1600;
    global.endPrice_hackUnique[3] = 3000;
    global.endPrice_hackUnique[4] = 3300;
    global.endPrice_hackUnique[5] = 4000;
    global.endPrice_hackUnique[6] = 5000;
    global.endPrice_hackUnique[7] = 6500;
    global.endPrice_hackUnique[8] = 8000;
    global.endPrice_hackUnique[9] = 9999;
    
    global.endPrice_hackHunted = 2000;
    global.endPrice_hackHaunted = 1000;
    
    
    //Gunnar
    global.price_weaponUpgrade[0] = 500;
    global.price_weaponUpgrade[1] = 800;
    global.price_weaponUpgrade[2] = 1200;
    global.price_weaponUpgrade[3] = 1600;
    global.price_weaponUpgrade[4] = 2100;
    global.price_weaponUpgrade[5] = 2600;
    global.price_weaponUpgrade[6] = 3200;
    global.price_weaponUpgrade[7] = 3800;
    global.price_weaponUpgrade[8] = 5000;
    
    //Tier1
    global.price_endless_assaultPistol = 600;
    global.price_endless_sawedoff = 700;
    global.price_endless_smg = 800;
    global.price_endless_shotgun = 1000;
    global.price_endless_bouncerPistol = 1000;
    global.price_endless_heavyPistol = 1500;
    global.price_endless_crudeAssaultRifle = 1600;
    global.price_endless_blastPistol = 1600;
    global.price_endless_bouncer = 1900;
    global.price_endless_highmag = 2000;
    
    global.price_endless_morningStar = 1800;
    global.price_endless_watchfulEye = 1000;
    global.price_endless_alcoholicCarrot = 800;
    global.price_endless_infinityBattery = 800;
    global.price_endless_rabbitFoot = 1200;
    global.price_endless_megaQuantumChip = 1000;
    
    //Tier2
    global.price_endless_plasmaPistol = 2000;
    global.price_endless_machinegun = 2250;
    global.price_endless_minigun = 2600;
    global.price_endless_flakCannon = 2600;
    global.price_endless_assaultRifle = 2500;
    global.price_endless_blitz = 2500;
    global.price_endless_rocketLauncher = 3000;
    global.price_endless_sniperRifle = 3200;
    global.price_endless_heavyShotgun = 3000;
    global.price_endless_relicPistol = 3500;
    global.price_endless_kamilauncher = 3000;
    
    global.price_endless_yottabyteDrive = 2500;
    global.price_endless_pineapplePudding = 1800;
    global.price_endless_pineapplePie = 1800;
    global.price_endless_midnightBeer = 2200;
    
    //Tier3
    global.price_endless_plasmaSMG = 3500;
    global.price_endless_relicSMG = 3500;
    global.price_endless_relicShotgun = 4000;
    global.price_endless_relicRifle = 4000;
    global.price_endless_relicSniper = 4500;
    global.price_endless_relicMinigun = 4000;
    global.price_endless_relicCannon = 4000;
    global.price_endless_relicRocket = 5200;
    
    global.price_endless_devPotion = 4000;
    global.price_endless_crystalBacon = 4000;
    global.price_endless_midnightMeal = 3500;
    global.price_endless_yottabyteProcessor = 3000;
    
    //Rare Challenge Times (in Rounds)
  
    global.challengeHungerRounds = 6;
    global.challengeThirstRounds = 6;
    global.challengeOverchargeRounds = 4;
    global.challengeMedievalRounds = 4;
    global.challengeCatapultRounds = 6;
    global.challengeDucanWeaponsRounds = 6;
    global.challengeHeavyBurdenRounds = 4;
    global.challengeSupressorRounds = 4;
    global.challengeBloodlustRounds = 4;
    global.challengeJawsRounds = 6;
    global.challengeCountdownRounds = 4;
    
    global.challengeLightFocusRounds = 4;
    global.challengeMediumFocusRounds = 4;
    global.challengeHeavyFocusRounds = 4;
    
    global.challengeHuntedRounds = 4;
    global.challengeHauntedRounds = 4;
    
    
}




</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Soundtrack &amp; Memory Cleaner

global.audio_cleaner = ds_list_create();
global.ambientSound = noone;

alarm[3] = room_speed*3;

if (room == room_start) || (room == room_shop) || (room == room_endShop) || (room == level1_1) || (room == level2_1) || (room == level3_1) || (room == level4_1) || (room == room_boss) || (room == levelHalloween_1) || (audio_is_playing(bgm_dig))
{
    audio_stop_all();
}

//if (global.music)
{
    if (room == room_start)
    {
        audio_play_sound(bgm_main,99,true);
    }
    
    if (room == room_shop) || (room == room_endShop) 
    {
        audio_play_sound(bgm_shop,99,true);
    }
    
    if (room == level1_1) || (room == level1_2) || (room == level1_3)
    {
        if !audio_is_playing(bgm_stage1) audio_play_sound(bgm_stage1,99,true);
        audio_play_sound(sfx_amb_stage1,99,true);
        global.ambientSound = sfx_amb_stage1;
    }
    
    if (room == level2_1) || (room == level2_2) || (room == level2_3)
    {
        if !audio_is_playing(bgm_stage3) audio_play_sound(bgm_stage3,99,true);
        audio_play_sound(sfx_amb_stage2,99,true);
        global.ambientSound = sfx_amb_stage2;
    }
    
    if (room == level3_1) || (room == level3_2) || (room == level3_3)
    {
        if !audio_is_playing(bgm_stage2) audio_play_sound(bgm_stage2,99,true);
        audio_play_sound(sfx_amb_stage3,99,true);
        global.ambientSound = sfx_amb_stage3;
    }
    
    if (room == level4_1) || (room == level4_2) || (room == level4_3)
    {
        if !audio_is_playing(bgm_stage4) audio_play_sound(bgm_stage4,99,true);
        audio_play_sound(sfx_amb_stage4,99,true);
        global.ambientSound = sfx_amb_stage4;
    }
    
    if (room == room_boss)
    {
        if !audio_is_playing(bgm_boss) audio_play_sound(bgm_boss,99,true);
    }
    
    if (room == levelHalloween_1) || (room == levelHalloween_2) || (room == levelHalloween_3)
    {
        if !audio_is_playing(bgm_halloween) audio_play_sound(bgm_halloween,99,true);
        audio_play_sound(sfx_amb_stage4,99,true);
        global.ambientSound = sfx_amb_stage4;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Read Save File, Set Stage, State Initial, Achievements

save_sync_read();

//Achievements

///Halloween Achievements
if (room == levelHalloween_1) {
    global.spookylandsVisited = true;
    achievement_give("ACHIEVEMENT_ENTER_SPOOKYLANDS");
}

///"Unlock-All" Achievements

if (room == room_start)
{
    if (global.relic_pineapple_pudding) achievement_give("ACHIEVEMENT_FIRSTRELIC");

    var allUnlocks = true;
    
    if (global.unlockPinky) &amp;&amp; 
    (global.unlockRaff) &amp;&amp; 
    (global.unlockBiu) &amp;&amp; 
    (global.unlockPunny) &amp;&amp; 
    (global.unlockAss)
        {
            achievement_give("ACHIEVEMENT_UNLOCKALLHUNTERS");
        }
        else allUnlocks = false;
    
    if (global.relic_alcoholic_carrot &amp;&amp;
    global.relic_yottabyte_drive &amp;&amp;
    global.relic_pineapple_pudding &amp;&amp;
    global.relic_infinity_battery &amp;&amp;
    global.relic_crystal_bacon &amp;&amp;
    global.relic_midnight_beer &amp;&amp;
    global.relic_watchful_eye &amp;&amp;
    global.relic_dev_potion)
        {
            achievement_give("ACHIEVEMENT_ALLRELICS");
        }
        else allUnlocks = false;

    
    if (allUnlocks &amp;&amp;
    global.checkpoint1 &amp;&amp;
    global.checkpoint2 &amp;&amp;
    global.checkpoint3 &amp;&amp;
        
    global.unlock_pistol_assault &amp;&amp;
    global.unlock_pistol_heavy &amp;&amp;
    global.unlock_pistol_plasma &amp;&amp;
    global.unlock_shotgun &amp;&amp;
    global.unlock_shotgun_heavy &amp;&amp;
    global.unlock_submachinegun &amp;&amp;
    global.unlock_highmag &amp;&amp;
    global.unlock_machinegun &amp;&amp;
    global.unlock_assault_rifle &amp;&amp;
    global.unlock_rocketlauncher &amp;&amp;
    global.unlock_sniper_rifle &amp;&amp;
        
    global.unlock_light1 &amp;&amp;
    global.unlock_light2 &amp;&amp;
    global.unlock_medium1 &amp;&amp;
    global.unlock_medium2 &amp;&amp;
    global.unlock_heavy1 &amp;&amp;
    global.unlock_heavy2 &amp;&amp;
    global.unlock_heavy3 &amp;&amp;
    global.unlock_heavy4 &amp;&amp;
    global.unlock_grenades1 &amp;&amp;
    global.unlock_grenades2 &amp;&amp;
    global.unlock_grenades3)
        
        {
            achievement_give("ACHIEVEMENT_UNLOCKALL");
        }
}


//Char State Initial
if (room == room_start) || (room == room_tutorial) || ((global.gameMode == gamemode_endless) &amp;&amp; (room == level1_1))
{
    global.stage_current = 1;
    if (!global.currentLoop) char_state_initial(); 
}

if (room == room_start) global.stage_current = 0;
if (room == level1_3) global.stage_current = 1;
if (room == level2_3) global.stage_current = 2;
if (room == level3_3) global.stage_current = 3;
if (room == level4_3) global.stage_current = 4;


//Prepare for Achievements
if (room == room_start) global.hasPickedWeapon = false;
show_debug_message('Test if weapon was picked up before: '+string(global.hasPickedWeapon));

if (room == room_start) global.hasUsedCheckpoint = false;
show_debug_message('Test if Checkpoint was used before: '+string(global.hasUsedCheckpoint));

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle Systems

global.particle_list = ds_list_create();
global.particle_type_list = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cuscenes vs HUD

global.cutscene = true;

cutscene_bars_positionStart = 0.15;
cutscene_bars_position = cutscene_bars_positionStart;
cutscene_bars_exit_speed = 0.0025;
main_hud_alpha = 0;

//Stage GUI
alarm[4] = room_speed*0.75;

//Black Bars Duration
if (room == room_start) 
{
    alarm[2] = room_speed*4;
    //instance_create(x,y,gui_logo);
}
else  alarm[2] = room_speed*1.7;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reload Circle Bar Init
reloadBarRadius = 18;
reloadBarThickness = 8;
reloadBarSurfaceSize = 40;
reloadBarSurface = surface_create(reloadBarSurfaceSize,reloadBarSurfaceSize);
reloadBarSurface2 = surface_create(reloadBarSurfaceSize,reloadBarSurfaceSize);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Endless Challenges
if (global.gameMode == gamemode_endless) &amp;&amp; (ds_exists(global.challengeList,ds_type_list))
{
    if (global.isDaily) 
    {
        var setSeed = global.dailySeed+global.stage_current+global.currentLoop;
        if (room == level1_1) || (room == level2_1) || (room == level3_1) || (room == level4_3) setSeed++;
        else if (room == level1_2) || (room == level2_2) || (room == level3_2) || (room == level4_2) setSeed +=2;
        else if (room == level1_3) || (room == level2_3) || (room == level3_3) || (room == level4_3) setSeed +=3;
        random_set_seed(setSeed);
    }
    //Update Timers for existing Challenges, remove Challenges with expired Timers
    if (room != room_endShop)
    {
        if (global.challengeHunger) 
        { 
            global.challengeHungerTimer--; 
            if (global.challengeHungerTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_HUNGER');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeHunger = false;}
            }
        }
        
        if (global.challengeThirst) 
        { 
            global.challengeThirstTimer--;
            if (global.challengeThirstTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_THIRST');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeThirst = false;}
            }
        }
        
        if (global.challengeOvercharge) 
        { 
            global.challengeOverchargeTimer--; 
            if (global.challengeOverchargeTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_OVERCHARGE');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeOvercharge = false;}
            }
        }
        
        if (global.challengeMedieval) 
        { 
            global.challengeMedievalTimer--;
            if (global.challengeMedievalTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_MEDIEVAL');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeMedieval = false;}
            }
        }
        
        if (global.challengeCatapult) 
        { 
            global.challengeCatapultTimer--; 
            if (global.challengeCatapultTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_CATAPULT');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeCatapult = false;}
            }
        }
        
        if (global.challengeDucanWeapons) 
        { 
            global.challengeDucanWeaponsTimer--; 
            if (global.challengeDucanWeaponsTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_DUCANWEAPONS');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeDucanWeapons = false;}
            }
        }
        
        if (global.challengeHeavyBurden) 
        { 
            global.challengeHeavyBurdenTimer--; 
            if (global.challengeHeavyBurdenTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_HEAVYBURDEN');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeHeavyBurden = false;}
            }
        }
        
        if (global.challengeSupressor) 
        { 
            global.challengeSupressorTimer--; 
            if (global.challengeSupressorTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_SUPRESSOR');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeSupressor = false;}
            }
        }
        
        if (global.challengeBloodlust) 
        { 
            global.challengeBloodlustTimer--; 
            if (global.challengeBloodlustTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_BLOODLUST');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeBloodlust = false;}
            }
        }
        
        if (global.challengeJaws) 
        { 
            global.challengeJawsTimer--; 
            if (global.challengeJawsTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_JAWS');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeJaws = false;}
            }
        }
        
        if (global.challengeCountdown) 
        { 
            global.challengeCountdownTimer--; 
            if (global.challengeCountdownTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_COUNTDOWN');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeCountdown = false;}
            }
        }
        
        if (global.challengeHunted) 
        { 
            global.challengeHuntedTimer--; 
            if (global.challengeHuntedTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_HUNTED');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeHunted = false;}
            }
        }
        
        if (global.challengeHaunted) 
        { 
            global.challengeHauntedTimer--; 
            if (global.challengeHauntedTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_HAUNTED');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeHaunted = false;}
            }
        }
        
        if (global.challengeLightFocus) 
        { 
            global.challengeLightFocusTimer--; 
            if (global.challengeLightFocusTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_LIGHTFOCUS');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeLightFocus = 0;}
            }
        }
        
        if (global.challengeMediumFocus) 
        { 
            global.challengeMediumFocusTimer--; 
            if (global.challengeMediumFocusTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_MEDIUMFOCUS');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeMediumFocus = 0;}
            }
        }
        
        if (global.challengeHeavyFocus) 
        { 
            global.challengeHeavyFocusTimer--; 
            if (global.challengeHeavyFocusTimer &lt;= 0) {
                var challengePos = ds_list_find_index(global.challengeList,'CHALLENGE_HEAVYFOCUS');
                if (challengePos != -1) { ds_list_delete(global.challengeList,challengePos); global.challengeHeavyFocus = 0;}
            }
        }
    }

    //Add new Challenges
    if (
        room == level1_2 ||
        room == level2_1 ||
        room == level2_3 ||
        room == level3_2 ||
        room == level4_1 ||
        room == level4_3 ||
        room == levelHalloween_2 ||
        (global.currentLoop &gt;= 3 &amp;&amp; room != room_endShop) ||
        (global.isDaily &amp;&amp; room != room_endShop)
        )
    {
        var stringChallenge = "";
        var stringDescription = "";
        var listName = "";
        var chUnique = false;
        
        if (global.currentLoop &lt; 2)
        {
            var uniqueChallengeChance = random(1);
            if (uniqueChallengeChance &lt;= 0.35){
                chUnique = true;
                var randomChallenge = irandom(12);
                switch (randomChallenge){
                    case 0 : if (ds_list_find_index(global.challengeList,"CHALLENGE_HUNGER") == -1) &amp;&amp; (ds_list_find_index(global.challengeForbiddenList,"CHALLENGE_HUNGER") == -1) { 
                        global.challengeHunger = true; stringChallenge="CHALLENGE_HUNGER"; stringDescription="CHALLENGE_HUNGER_DESC"; listName="CHALLENGE_HUNGER";
                        global.challengeHungerTimer = global.challengeHungerRounds;
                        } break;
                        
                    case 1 : if (ds_list_find_index(global.challengeList,"CHALLENGE_THIRST") == -1)  &amp;&amp; (ds_list_find_index(global.challengeForbiddenList,"CHALLENGE_THIRST") == -1) { 
                        global.challengeThirst = true; stringChallenge="CHALLENGE_THIRST"; stringDescription="CHALLENGE_THIRST_DESC"; listName="CHALLENGE_THIRST";
                        global.challengeThirstTimer = global.challengeThirstRounds;
                        } break;
                    
                    case 2 : if (ds_list_find_index(global.challengeList,"CHALLENGE_OVERCHARGE") == -1)  &amp;&amp; (ds_list_find_index(global.challengeForbiddenList,"CHALLENGE_OVERCHARGE") == -1) { 
                        global.challengeOvercharge = true; stringChallenge="CHALLENGE_OVERCHARGE"; stringDescription="CHALLENGE_OVERCHARGE_DESC"; listName="CHALLENGE_OVERCHARGE";
                        global.challengeOverchargeTimer = global.challengeOverchargeRounds;
                        } break;
                        
                    case 3 : if (ds_list_find_index(global.challengeList,"CHALLENGE_MEDIEVAL") == -1)  &amp;&amp; (ds_list_find_index(global.challengeForbiddenList,"CHALLENGE_MEDIEVAL") == -1) { 
                        global.challengeMedieval = true; stringChallenge="CHALLENGE_MEDIEVAL"; stringDescription="CHALLENGE_MEDIEVAL_DESC"; listName="CHALLENGE_MEDIEVAL";
                        global.challengeMedievalTimer = global.challengeMedievalRounds;
                        } break;
                        
                    case 4 : if (ds_list_find_index(global.challengeList,"CHALLENGE_SUPRESSOR") == -1)  &amp;&amp; (ds_list_find_index(global.challengeForbiddenList,"CHALLENGE_SUPRESSOR") == -1) { 
                        global.challengeSupressor = true; stringChallenge="CHALLENGE_SUPRESSOR"; stringDescription="CHALLENGE_SUPRESSOR_DESC"; listName="CHALLENGE_SUPRESSOR";
                        global.challengeSupressorTimer = global.challengeSupressorRounds;
                        } break;
                    
                    case 5 : if (ds_list_find_index(global.challengeList,"CHALLENGE_CATAPULT") == -1) &amp;&amp; (ds_list_find_index(global.challengeForbiddenList,"CHALLENGE_CATAPULT") == -1) { 
                        global.challengeCatapult = true; stringChallenge="CHALLENGE_CATAPULT"; stringDescription="CHALLENGE_CATAPULT_DESC"; listName="CHALLENGE_CATAPULT";
                        global.challengeCatapultTimer = global.challengeCatapultRounds;
                        } break;
                        
                    case 6 : if (ds_list_find_index(global.challengeList,"CHALLENGE_DUCANWEAPONS") == -1)  &amp;&amp; (ds_list_find_index(global.challengeForbiddenList,"CHALLENGE_DUCANWEAPONS") == -1) { 
                        global.challengeDucanWeapons = true; stringChallenge="CHALLENGE_DUCANWEAPONS"; stringDescription="CHALLENGE_DUCANWEAPONS_DESC"; listName="CHALLENGE_DUCANWEAPONS";
                        global.challengeDucanWeaponsTimer = global.challengeDucanWeaponsRounds;
                        } break;
                      
                    case 7 : if (ds_list_find_index(global.challengeList,"CHALLENGE_JAWS") == -1)  &amp;&amp; (ds_list_find_index(global.challengeForbiddenList,"CHALLENGE_JAWS") == -1){ 
                        global.challengeJaws = true; stringChallenge="CHALLENGE_JAWS"; stringDescription="CHALLENGE_JAWS_DESC"; listName="CHALLENGE_JAWS";
                        global.challengeJawsTimer = global.challengeJawsRounds;
                        } break;
                    
                    case 8 : if (ds_list_find_index(global.challengeList,"CHALLENGE_BLOODLUST") == -1) &amp;&amp; (ds_list_find_index(global.challengeForbiddenList,"CHALLENGE_BLOODLUST") == -1) { 
                        global.challengeBloodlust = true; stringChallenge="CHALLENGE_BLOODLUST"; stringDescription="CHALLENGE_BLOODLUST_DESC"; listName="CHALLENGE_BLOODLUST";
                        global.challengeBloodlustTimer = global.challengeBloodlustRounds;
                        } break;
                        
                    case 9 : if (ds_list_find_index(global.challengeList,"CHALLENGE_HEAVYBURDEN") == -1)  &amp;&amp; (ds_list_find_index(global.challengeForbiddenList,"CHALLENGE_HEAVYBURDEN") == -1) { 
                        global.challengeHeavyBurden = true; stringChallenge="CHALLENGE_HEAVYBURDEN"; stringDescription="CHALLENGE_HEAVYBURDEN_DESC"; listName="CHALLENGE_HEAVYBURDEN";
                        global.challengeHeavyBurdenTimer = global.challengeHeavyBurdenRounds;
                        } break;
                        
                    case 10 : if (ds_list_find_index(global.challengeList,"CHALLENGE_LIGHTFOCUS") == -1)  &amp;&amp; (ds_list_find_index(global.challengeForbiddenList,"CHALLENGE_LIGHTFOCUS") == -1) { 
                        global.challengeLightFocus++; stringChallenge="CHALLENGE_LIGHTFOCUS"; stringDescription="CHALLENGE_LIGHTFOCUS_DESC"; listName="CHALLENGE_LIGHTFOCUS";
                        global.challengeLightFocusTimer = global.challengeLightFocusRounds;
                        } break;
                        
                    case 11 : if (ds_list_find_index(global.challengeList,"CHALLENGE_MEDIUMFOCUS") == -1)  &amp;&amp; (ds_list_find_index(global.challengeForbiddenList,"CHALLENGE_MEDIUMFOCUS") == -1) { 
                        global.challengeMediumFocus++; stringChallenge="CHALLENGE_MEDIUMFOCUS"; stringDescription="CHALLENGE_MEDIUMFOCUS_DESC"; listName="CHALLENGE_MEDIUMFOCUS";
                        global.challengeMediumFocusTimer = global.challengeMediumFocusRounds;
                        } break;
                    
                    case 12 : if (ds_list_find_index(global.challengeList,"CHALLENGE_HEAVYFOCUS") == -1)  &amp;&amp; (ds_list_find_index(global.challengeForbiddenList,"CHALLENGE_HEAVYFOCUS") == -1) { 
                        global.challengeHeavyFocus++; stringChallenge="CHALLENGE_HEAVYFOCUS"; stringDescription="CHALLENGE_HEAVYFOCUS_DESC"; listName="CHALLENGE_HEAVYFOCUS";
                        global.challengeHeavyFocusTimer = global.challengeHeavyFocusRounds;
                        } break;
                }
            }
            
            //No luck? Roll the common ones
            if (stringChallenge == "") {
                chUnique = false;
                var randomChallenge = irandom(2);
                switch (randomChallenge){
                    case 0 : global.challengeSteroids++; stringChallenge="CHALLENGE_STEROIDS"; stringDescription="CHALLENGE_STEROIDS_DESC"; listName="CHALLENGE_STEROIDS"; break;
                    case 1 : global.challengeWanted++; stringChallenge="CHALLENGE_WANTED"; stringDescription="CHALLENGE_WANTED_DESC"; listName="CHALLENGE_WANTED"; break;
                    case 2 : global.challengeHighTech++; stringChallenge="CHALLENGE_HIGHTECH"; stringDescription="CHALLENGE_HIGHTECH_DESC"; listName="CHALLENGE_HIGHTECH"; break;
                    //case 3 : global.challengeLightFocus++; stringChallenge="CHALLENGE_LIGHTFOCUS"; stringDescription="CHALLENGE_LIGHTFOCUS_DESC"; listName="CHALLENGE_LIGHTFOCUS"; break;
                    //case 4 : global.challengeMediumFocus++; stringChallenge="CHALLENGE_MEDIUMFOCUS"; stringDescription="CHALLENGE_MEDIUMFOCUS_DESC"; listName="CHALLENGE_MEDIUMFOCUS"; break;
                    //case 5 : global.challengeHeavyFocus++; stringChallenge="CHALLENGE_HEAVYFOCUS"; stringDescription="CHALLENGE_HEAVYFOCUS_DESC"; listName="CHALLENGE_HEAVYFOCUS"; break;
                }
            } else global.entropy += 0.1; // &lt;--- If a Rare Challenge indeed spawns, increase Entropy for the player
        }
        else{
            var randomChallenge = irandom(2);
            chUnique = false;
            switch (randomChallenge){
                case 0 : global.challengeSteroids++; stringChallenge="CHALLENGE_STEROIDS"; stringDescription="CHALLENGE_STEROIDS_DESC"; listName="CHALLENGE_STEROIDS"; break;
                case 1 : global.challengeWanted++; stringChallenge="CHALLENGE_WANTED"; stringDescription="CHALLENGE_WANTED_DESC"; listName="CHALLENGE_WANTED"; break;
                case 2 : global.challengeHighTech++; stringChallenge="CHALLENGE_HIGHTECH"; stringDescription="CHALLENGE_HIGHTECH_DESC"; listName="CHALLENGE_HIGHTECH"; break;
            }
        }
        
        
        if (listName != "") 
        {
            ds_list_add(global.challengeList, listName);
            ds_list_add(global.challengeForbiddenList, listName);
        }
        
        var announceChallenge = instance_create(x,y,fx_bigMessage);
        announceChallenge.textBigColor = K_BETU_RED;
        if (chUnique) announceChallenge.hunterUnlockSprite = spr_challengeUnique;
        else announceChallenge.hunterUnlockSprite = spr_challengeCommon;
        announceChallenge.textBig = loc_key(stringChallenge);
        announceChallenge.textSmall = loc_key(stringDescription);
    }
}    

//Define Challenge Values
    global.challengeSteroidsMultiplier = 0.2;
    global.challengeWantedMultiplier = 0.3;
    global.challengeHighTechMultiplier = 0.3;
    global.challengeLightFocusMultiplier = 0.7; //was 0.3
    global.challengeMediumFocusMultiplier = 0.7; //was 0.3
    global.challengeHeavyFocusMultiplier = 0.7; //was 0.3
    global.challengeThirstMultiplier = 1;
    global.challengeOverchargeDamage = 50;
    global.challengeMedievalPenalty = 0.4;
    global.challengeMedievalBonus = 1;
    global.challengeCatapultMultiplier = 3;
    global.challengeHeavyBurdenPenalty = 0.55;
    global.challengeBloodlustRate = 1.5; //Im applying this to the fire rate at class_gun_enemy
    global.challengeDucanWeaponsSpeed = 1.2;
    
    global.challengeSteroidsMax = 100;
    global.challengeHighTechMax = 50;
    
//Apply these right here, right now
    if (global.challengeDucanWeapons) global.enemyProjectileSpeed = global.challengeDucanWeaponsSpeed;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tries to reconnect with Steam Leaderboards
global.dailyChecked = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawns the Stage GUI
instance_create(x,y,gui_stage);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleans unused emitters every X seconds

while (!ds_list_empty(global.audio_cleaner))
{
    destroy_audio = ds_list_find_value(global.audio_cleaner, ds_list_size(global.audio_cleaner)-1);
    if (destroy_audio) audio_emitter_free(destroy_audio);
    ds_list_delete(global.audio_cleaner, ds_list_size(global.audio_cleaner)-1);
}

alarm[3] = room_speed*3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Removes black bars and draws HUD
global.cutscene = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Updates the path-finding for all AI entities
mp_grid_clear_all(global.astar_grid);
mp_grid_add_instances(global.astar_grid,class_solid,false);
alarm[1] = path_refresh;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unpause the game
instance_activate_all(); 
draw_enable_drawevent(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply Global Buffs (Relics and Characters)

//Watchful Eye &amp; Biu
if (global.relic_watchful_eye == 2)
{
    global.ammo_light_max = ammo_light_max_regular + ammo_light_max_relic;
    global.ammo_medium_max = ammo_medium_max_regular + ammo_medium_max_relic;
    global.ammo_heavy_max = ammo_heavy_max_regular + ammo_heavy_max_relic;
    
    if (global.character[1] == char_biu) || (global.character[2] == char_biu) global.grenades_max = grenades_max_biu+grenades_max_relic;
    else global.grenades_max = grenades_max_regular+grenades_max_relic;
}
else 
{
    global.ammo_light_max = ammo_light_max_regular;
    global.ammo_medium_max = ammo_medium_max_regular;
    global.ammo_heavy_max = ammo_heavy_max_regular;
    
    if (global.character[1] == char_biu) || (global.character[2] == char_biu) global.grenades_max = grenades_max_biu;
    else global.grenades_max = grenades_max_regular;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Constrain Mouse to Screen
// This is bad but better than nothing I guess

var hsafety,vsafety;

hsafety = 0.05*window_get_width();
vsafety = 0.05*window_get_height();

if (window_mouse_get_x() &lt; 0+hsafety) window_mouse_set(0+hsafety, window_mouse_get_y());
if (window_mouse_get_y() &lt; 0+vsafety) window_mouse_set(window_mouse_get_x(), 0+vsafety);
if (window_mouse_get_x() &gt; window_get_width()-hsafety) window_mouse_set(window_get_width()-hsafety, window_mouse_get_y());
if (window_mouse_get_y() &gt; window_get_height()-vsafety) window_mouse_set(window_mouse_get_x(), window_get_height()-vsafety);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause
if (global.pause)
{
    global.pause--;
    if global.pause &lt; 0 global.pause = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ammo Control

var p = 1; while (p &lt;= global.playerCount)
{
    if (global.ammo_light[p] &gt; global.ammo_light_max) global.ammo_light[p] = global.ammo_light_max;
    if (global.ammo_light[p] &lt; 0) global.ammo_light[p] = 0;
    if (global.ammo_medium[p] &gt; global.ammo_medium_max) global.ammo_medium[p] = global.ammo_medium_max;
    if (global.ammo_medium[p] &lt; 0) global.ammo_medium[p] = 0;
    if (global.ammo_heavy[p] &gt; global.ammo_heavy_max) global.ammo_heavy[p] = global.ammo_heavy_max;
    if (global.ammo_heavy[p] &lt; 0) global.ammo_heavy[p] = 0;
    if (global.grenades[p] &gt; global.grenades_max) global.grenades[p] = global.grenades_max;
    if (global.grenades[p] &lt; 0) global.grenades[p] = 0;
    
    p++;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level Instantiator

if (!level_built)
{
    if (global.isDaily) random_set_seed(global.dailySeed+global.stage_current+global.currentLoop);
    
    //Create global shop data objects
    if (room == room_endShop) instance_create(0,0,data_shopEndless);
    else instance_create(0,0,data_shop);

    //Instantiate Player
    player_spawn_number = instance_number(obj_spawn_player);
    random_spawn = irandom(player_spawn_number-1);
    target_spawn = instance_find(obj_spawn_player,random_spawn);
        
    var p = 1; while (p &lt;= global.playerCount)
    {
        if (global.playerAlive[p])
        {
            var playerSpawned;
            if (global.character[p] == char_jimmy) playerSpawned = instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_jimmy);
            if (global.character[p] == char_pinky) playerSpawned = instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_pinky);
            if (global.character[p] == char_raff) playerSpawned = instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_raff);
            if (global.character[p] == char_biu) playerSpawned = instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_biu);
            if (global.character[p] == char_punny) playerSpawned = instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_punny);
            if (global.character[p] == char_ass) playerSpawned = instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_assPlayer);
            if (global.character[p] == char_rider) playerSpawned = instance_create(target_spawn.spawnX,target_spawn.spawnY,obj_rider);
            
            playerSpawned.myPlayerId = p;
            with (playerSpawned) event_perform(ev_other,ev_user0);
        }
        p++;
    }
    
    //Stop here if it's the first room
    if (room == room_start) { level_built = true; exit; }
    
    //Still here? Create the teleporter entry point;
    teleporter = instance_create(target_spawn.spawnX,target_spawn.spawnY-10,obj_teleporter);
    teleporter.active = false;
    
    //Instantiate Data Objects and set enemy and item lists
    if (global.gameMode == gamemode_adventure)
    {
        enemyData = instance_create(0,0,data_enemies);
        itemData = instance_create(0,0,data_items);
        
        enemy_pool = enemyData.enemyPool;
        item_pool = itemData.itemPool;
    }
    
    if (global.gameMode == gamemode_endless)
    {
        enemyData = instance_create(0,0,data_enemiesEndless);
        itemData = instance_create(0,0,data_itemsEndless);
        
        enemy_pool = enemyData.enemyPool;
        item_pool = itemData.itemPool;
    }
    
    
        //Resolve Enemies
        
        //Challenge Enemies
        if (global.challengeHunted)
        {
            enemy_spawn_number = instance_number(obj_spawn_enemy);
            random_spawn = irandom(enemy_spawn_number-1);
            target_spawn = instance_find(obj_spawn_enemy,random_spawn);
            
            if (instance_exists(target_spawn)){
                spawnX = target_spawn.spawnX + random_range(-128,128);
                spawnY = target_spawn.spawnY + random_range(-128,128);
                
                if collision_circle(spawnX,spawnY,40,class_solid,false,true) &lt; 0 {
                    var randomSpawnRoll = irandom_range(1,4);
                    switch (randomSpawnRoll){
                        case 1 : spawnee = obj_ducanElite_rifle; break;
                        case 2 : spawnee = obj_ducanElite_shotgun; break;
                        case 3 : spawnee = obj_ducanElite_sniper; break;
                        case 4 : spawnee = obj_ducanElite_plasma; break;
                    }
                    instance_create(spawnX,spawnY,spawnee);
                }
            }
        }
        
        if (global.challengeHaunted)
        {
            enemy_spawn_number = instance_number(obj_spawn_enemy);
            random_spawn = irandom(enemy_spawn_number-1);
            target_spawn = instance_find(obj_spawn_enemy,random_spawn);
            
            if (instance_exists(target_spawn)){
                spawnX = target_spawn.spawnX + random_range(-128,128);
                spawnY = target_spawn.spawnY + random_range(-128,128);
                
                if collision_circle(spawnX,spawnY,40,class_solid,false,true) &lt; 0 {
                    spawnee = obj_ghost_ducan;
                    instance_create(spawnX,spawnY,spawnee);
                }
            }
        }
        
        //Regular Enemies
        if (!global.survivalWaves) 
        {
            while (!ds_list_empty(enemy_pool))
            {
                pick_random_group = irandom(ds_list_size(enemy_pool)-1);
                random_group = ds_list_find_value(enemy_pool,pick_random_group);
                ds_list_delete(enemy_pool,pick_random_group);
                
                current_group = ds_list_create();
                ds_list_copy(current_group, random_group);
                
                enemy_spawn_number = instance_number(obj_spawn_enemy);
                random_spawn = irandom(enemy_spawn_number-1);
                target_spawn = instance_find(obj_spawn_enemy,random_spawn);
                
                while (!ds_list_empty(current_group)) &amp;&amp; (instance_exists(target_spawn))
                {
                    spawnX = target_spawn.spawnX + random_range(-128,128);
                    spawnY = target_spawn.spawnY + random_range(-128,128);
                    
                    if collision_circle(spawnX,spawnY,40,class_solid,false,true) &lt; 0 
                    {
                        list_position = ds_list_size(current_group)-1;
                        spawnee = ds_list_find_value(current_group, list_position);
                        instance_create(spawnX,spawnY,spawnee);
                        ds_list_delete(current_group,list_position);
                    }
                }
                ds_list_destroy(current_group);
                with (target_spawn) { instance_destroy(); }
            }
            
            with (obj_spawn_enemy)
            {
                instance_destroy();
            }
        }
        
       //Resolve Items 
        while (!ds_list_empty(item_pool))
        {
            pick_random_group = irandom(ds_list_size(item_pool)-1);
            random_group = ds_list_find_value(item_pool,pick_random_group);
            ds_list_delete(item_pool,pick_random_group);
            
            current_group = ds_list_create();
            ds_list_copy(current_group, random_group);
            
            item_spawn_number = instance_number(obj_spawn_item);
            random_spawn = irandom(item_spawn_number-1);
            target_spawn = instance_find(obj_spawn_item,random_spawn);
            
            if instance_exists(target_spawn)
            {
                spawnX = target_spawn.spawnX;
                spawnY = target_spawn.spawnY;
                
                list_position = irandom(ds_list_size(current_group)-1);
                spawnee = ds_list_find_value(current_group, list_position);
                instance_create(spawnX,spawnY,spawnee);
                with (target_spawn) { instance_destroy(); }
            }
            ds_list_destroy(current_group);
        }
        
        with (obj_spawn_item) instance_destroy();

        
    //All Done
        level_built = true;  
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Level Exit + Dig System

if (!(room == room_start)) &amp;&amp; (!(room == room_tutorial)) &amp;&amp; (!(room == room_shop)) &amp;&amp; (!(room == room_boss)) &amp;&amp; (!(room == room_endShop))
{
    if ((!instance_exists(class_enemy)) &amp;&amp; (!instance_exists(obj_kamikazelite_flying)) &amp;&amp; (instance_exists(class_player)) &amp;&amp; (!global.survivalWaves) &amp;&amp; (!level_end)) || (debug_forceLevelExit &amp;&amp; !level_end)
    {
        //Instantiates Ass
        var tries;
        tries=0;
        while (!level_end)
        {
            randomX = class_player.x + irandom_range(-100,100);
            randomY = class_player.y + irandom_range(-100,100);
            
            if collision_circle(randomX,randomY,63,class_solid,false,true) &lt; 0
            {
                level_end = true
            }
            tries++;
            if (tries &gt;= 10)
            {
                randomX = class_player.x;
                randomY = class_player.y;
                level_end = true;
            }
        }
        ass = instance_create(randomX,randomY,obj_ass);   
 
        if (global.gameMode == gamemode_adventure)
        {
            //Revives any dead player
            var revivePlayerX = class_player.x;
            var revivePlayerY = class_player.y;
            
            var p = 1; while (p &lt;= global.playerCount)
            {
                if (!global.playerAlive[p])
                {
                    var playerSpawned;
                    if (global.character[p] == char_jimmy) playerSpawned = instance_create(revivePlayerX,revivePlayerY,obj_jimmy);
                    if (global.character[p] == char_pinky) playerSpawned = instance_create(revivePlayerX,revivePlayerY,obj_pinky);
                    if (global.character[p] == char_raff) playerSpawned = instance_create(revivePlayerX,revivePlayerY,obj_raff);
                    if (global.character[p] == char_biu) playerSpawned = instance_create(revivePlayerX,revivePlayerY,obj_biu);
                    if (global.character[p] == char_punny) playerSpawned = instance_create(revivePlayerX,revivePlayerY,obj_punny);
                    if (global.character[p] == char_ass) playerSpawned = instance_create(revivePlayerX,revivePlayerY,obj_assPlayer);
                    if (global.character[p] == char_rider) playerSpawned = instance_create(revivePlayerX,revivePlayerY,obj_rider);
                    playerSpawned.myPlayerId = p;
                    
                    //Reset weapons and HP
                    global.playerAlive[p] = true;
                    global.weapon1[p] = noone;
                    global.weapon2[p] = noone;
                    global.weapon1Level[p] = 0;
                    global.weapon2Level[p] = 0;
                    global.hp[p] = 999999;
                    global.overshield[p] = 0;
                    global.currentlyEquippedWeapon[p] = 0;
                    global.grenades[p] = 2;
                    
                    with (playerSpawned) event_perform(ev_other,ev_user0);
                    
                    playerSpawned.hp = playerSpawned.hp_max * global.reviveHealth;
                    global.ammo_light[p] = global.reviveAmmoLight;
                    global.ammo_medium[p] = global.reviveAmmoMedium;
                    global.ammo_heavy[p] = global.reviveAmmoHeavy;
                }
                p++;
            }
        
        
            //RELIC DETECTED!!!
            global.dirtColor = c_white;
            
            //Relic Chance
            var relicChance = -1;
            var shopList = -1;
            if (room==level1_1) || (room==level1_2) || (room==level1_3) { relicChance = 0.25;    shopList = global.shop_list_1;  global.dirtColor = make_color_rgb(183,137,49); }
            if (room==level2_1) || (room==level2_2) || (room==level2_3) { relicChance = 0.2;    shopList = global.shop_list_2;  global.dirtColor = make_color_rgb(111,197,148); }
            if (room==level3_1) || (room==level3_2) || (room==level3_3) { relicChance = 0.2;   shopList = global.shop_list_3;  global.dirtColor = make_color_rgb(74,136,192); }
            if (room==level4_1) || (room==level4_2) || (room==level4_3) { relicChance = 0.2;   shopList = global.shop_list_4;  global.dirtColor = make_color_rgb(159,55,60); }
            
            if (!global.totalDigs) relicChance = 1 //Force on the first time
            
            if (random(1) &lt;= relicChance)
            {
                //Find out if there is a relic to spawn
                var spawnRelic = noone;
                if ds_exists(shopList,ds_type_list) while (!ds_list_empty(shopList))
                {
                    var randomPos = irandom_range(0, ds_list_size(shopList)-1);
                    var candidate = ds_list_find_value(shopList,randomPos);
                    if (candidate)
                    {
                        var spawnToTestVariable = instance_create(0,0,candidate);
                        if (spawnToTestVariable.shopType == 'relic') spawnRelic = candidate;
                        
                        with (spawnToTestVariable) instance_destroy();
                        
                        if (spawnRelic != noone) break;
                    }
                    ds_list_delete(shopList,randomPos);
                }
                
                //Stop here if there is no relic to spawn
                if (spawnRelic == noone) exit;
                
                //Randomize Dig Site Position
                if (instance_exists(obj_spawn_topLeft)) &amp;&amp; (instance_exists(obj_spawn_botRight))
                {
                    var validPosition = false;
                    var relicSpawnX, relicSpawnY;
                    
                    while (!validPosition)
                    {
                        relicSpawnX = irandom_range( obj_spawn_topLeft.x , obj_spawn_botRight.x );
                        relicSpawnY = irandom_range( obj_spawn_topLeft.y , obj_spawn_botRight.y );
                        if (!collision_circle(relicSpawnX,relicSpawnY,42,obj_limit,false,true)) validPosition = true;
                    }
                }
                else exit;
                
                  
                //Spawn Relic
                
                audio_stop_all();
                audio_play_sound(bgm_dig,99,true);
                volume_update();
                audio_play_sound(sfx_relic_on,00,false); //Relic Detected Sound Will Go Here Someday
                
                global.relicDetected = true;
                var announceRelic = instance_create(x,y,fx_bigMessage);
                announceRelic.textBig = loc_key("HUD_RELIC_DETECT");
                announceRelic.textBigColor = K_BETU_RED;
                if (global.input[1] == K_INPUT_KEYBOARD) announceRelic.textSmall = loc_key("HUD_RELIC_DETECT_KEY");
                else announceRelic.textSmall = loc_key("HUD_RELIC_DETECT_JOY");
                
                var relicDig = instance_create(relicSpawnX,relicSpawnY,obj_digSpot);
                relicDig.myItem = spawnRelic;
            }
        }
        
        if (global.gameMode == gamemode_endless)
        {
            if (global.isDaily) random_set_seed(global.dailySeed+global.stage_current+global.currentLoop);
            
            global.dirtColor = c_white;
            
            //Treasure Chance
            var relicChance = -1;
            if (room==level1_1) || (room==level1_2) || (room==level1_3) { relicChance = 0.25 + global.relicChanceBonus;    global.dirtColor = make_color_rgb(183,137,49); }
            if (room==level2_1) || (room==level2_2) || (room==level2_3) { relicChance = 0.2 + global.relicChanceBonus;    global.dirtColor = make_color_rgb(111,197,148); }
            if (room==level3_1) || (room==level3_2) || (room==level3_3) { relicChance = 0.2 + global.relicChanceBonus;   global.dirtColor = make_color_rgb(74,136,192); }
            if (room==level4_1) || (room==level4_2) || (room==level4_3) { relicChance = 0.2 + global.relicChanceBonus;   global.dirtColor = make_color_rgb(159,55,60); }
            if (room==levelHalloween_1) { relicChance = 0.3;   shopList = global.shop_list_3;  global.dirtColor = make_color_rgb(10,10,10); }
                        
            relicChance -= 0.2 * global.currentLoop;
            if (global.relic_rabbit_foot == 2) relicChance += 0.2;
            relicChance += global.entropy;
            
            if (random(1) &lt;= relicChance)
            {
                global.relicChanceBonus = -0.15;
                global.entropy -= min(0.1,global.entropy);
 
                //Define object to spawn
                var spawnObject = noone;    
                var randomRoll = random(100);  
                         
                if (randomRoll &lt;= 80) spawnObject = obj_chestRegular; // &lt;-- one day this will add chances for slot machine and sacrifice table
                else if (randomRoll &lt;= 90 &amp;&amp; !global.spookylandsVisited || room == level1_1) spawnObject = obj_teleporter_haunted;
                else if (randomRoll &lt;= 95) &amp;&amp; (!global.challengeHunted) spawnObject = obj_chestDucan;
                else if (!global.challengeHaunted) spawnObject = obj_chestHaunted;
                else spawnObject = obj_chestRegular;
                
                
                //Stop here if there is no object to spawn
                if (spawnObject == noone) exit;
                
                //Randomize Dig Site Position
                if (instance_exists(obj_spawn_topLeft)) &amp;&amp; (instance_exists(obj_spawn_botRight))
                {
                    var validPosition = false;
                    var relicSpawnX, relicSpawnY;
                    
                    while (!validPosition)
                    {
                        relicSpawnX = irandom_range( obj_spawn_topLeft.x , obj_spawn_botRight.x );
                        relicSpawnY = irandom_range( obj_spawn_topLeft.y , obj_spawn_botRight.y );
                        if (!collision_circle(relicSpawnX,relicSpawnY,42,obj_limit,false,true)) validPosition = true;
                    }
                }
                else exit;
                
                //Spawn
                audio_stop_all();
                audio_play_sound(bgm_dig,99,true);
                volume_update();
                audio_play_sound(sfx_relic_on,00,false);
                
                global.relicDetected = true;
                var announceRelic = instance_create(x,y,fx_bigMessage);
                announceRelic.textBig = loc_key("HUD_TREASURE_DETECT");
                announceRelic.textBigColor = K_BETU_RED;
                if (global.input[1] == K_INPUT_KEYBOARD) announceRelic.textSmall = loc_key("HUD_RELIC_DETECT_KEY");
                else announceRelic.textSmall = loc_key("HUD_RELIC_DETECT_JOY");
                
                var relicDig = instance_create(relicSpawnX,relicSpawnY,obj_digSpot);
                relicDig.myItem = spawnObject;
            }
            else{
                global.relicChanceBonus += 0.12;
            }
        }
        
        //Special Rewards
        if (room == levelHalloween_3)
        {
            instance_create(2432,1664,obj_chestHaunted);
            achievement_give("ACHIEVEMENT_COMPLETE_SPOOKYLANDS");
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dust and Fog

tile_layer_shift(-9024, -0.12, 0);
tile_layer_shift(-9048, -0.2, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save Data and Advance the Game

if (global.stage_current == 1) &amp;&amp; (global.checkpoint1 == 0) global.checkpoint1 = 1;
if (global.stage_current == 2) &amp;&amp; (global.checkpoint2 == 0) global.checkpoint2 = 1;
if (global.stage_current == 3) &amp;&amp; (global.checkpoint3 == 0) global.checkpoint3 = 1;

if (global.level_complete)
{
    //Update Endless Score
    if (global.gameMode == gamemode_endless) global.scoreEndless += round(global.scoreEndlessLevel * max(1, (global.currentLoop*global.scoreEndlessLoopMultiplier) ));

    save_and_clean();
    
    if (global.overrideLevel != noone) &amp;&amp; (room_exists(global.overrideLevel)) { room_goto(global.overrideLevel); exit; }

    if (room == room_shop) || (room == room_start) || (room == room_endShop)
    {
        //Test boss: room_goto(room_boss); exit;  
        //Test halloween: room_goto(levelHalloween_1); exit; 
        if (global.stage_current == 0) room_goto(level1_1);
        else if (global.stage_current == 1) room_goto(level2_1);
        else if (global.stage_current == 2) room_goto(level3_1);
        else if (global.stage_current == 3) room_goto(level4_1);
        else if (global.stage_current == 4) room_goto(room_boss);

        exit;
    }
    
    //Go to Shop
    if (global.gameMode == gamemode_adventure)
    {
        if (room == level1_3) { room_goto(room_shop); exit; }
        if (room == level2_3) { room_goto(room_shop); exit; }
        if (room == level3_3) { room_goto(room_shop); exit; }
        if (room == level4_3) { room_goto(room_shop); exit; }
    }
    
    if (global.gameMode == gamemode_endless)
    {
        show_debug_message("Time to change the room!");
        if (room == level1_3) {  show_debug_message("I am on Level 1-3, it's shop time!"); room_goto(room_endShop); exit; }
        if (room == level2_3) {  show_debug_message("I am on Level 2-3, it's shop time!"); room_goto(room_endShop); exit; }
        if (room == level3_3) {  show_debug_message("I am on Level 3-3, it's shop time!"); room_goto(room_endShop);exit; }
        if (room == level4_3) {  show_debug_message("I am on Level 4-3, it's shop time!"); room_goto(room_endShop);exit; }
        if (room == levelHalloween_3) { global.stage_current = min(4,global.stage_current+2); room_goto(room_endShop); show_debug_message("I am on Level Halloween-3, it's shop time!"); exit; }
    }
    
    
    if (room == room_boss) 
    {
        if (global.gameMode == gamemode_adventure)
        {
                if (global.stage_current != -9)
                {
                    show_debug_message("CHEGUEI ATE AQUI SEM MORRER");
                    room_goto(room_end); 
                    exit;
                }
                else { room_goto(level1_1); exit; } //Secret room portal
        }
        else if (global.gameMode == gamemode_endless)
        {
            global.currentLoop++;
            global.statTotalLoops++;
            steam_set_stat_int("STAT_TOTAL_LOOPS", steam_get_stat_int("STAT_TOTAL_LOOPS") + 1  ); 
            if (steam_get_stat_int("STAT_TOTAL_LOOPS") &gt;= 50) achievement_give("ACHIEVEMENT_LOOPS_50");
            global.stage_current = 0;
            save_all();
            room_goto(room_endShop);
            exit;
        }
    }
    
    if room_exists(room_next(room)) room_goto_next();
    else room_goto(room == room_start);
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle Systems Manager

if (!ds_list_empty(global.particle_list)) &amp;&amp; (!global.pause)
{
    for (i=0; i&lt;ds_list_size(global.particle_list); i++)
    {
        particle_system = ds_list_find_value(global.particle_list,i);
        part_system_update(particle_system);
        
        if !part_particles_count(particle_system)
        {
            //part_emitter_destroy_all(particle_system);
            part_system_destroy(particle_system);
            ds_list_delete(global.particle_list,i);
        }
    }
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause Menu Control

var pauseKeyPressed = false;

if (!global.gameOver) &amp;&amp; instance_exists(class_player)
{
    var p = 1; while (p &lt;= global.playerCount)
    {
        if (global.playerAlive[p])
        {
            if (global.input[p] == K_INPUT_KEYBOARD &amp;&amp; keyboard_check_pressed(vk_escape)) || (global.input[p] != K_INPUT_KEYBOARD &amp;&amp; joy_check_pressed(global.input[p],8))
            {
                pauseKeyPressed = true;
                global.pauseClient = p;
            }
        }
        p++;
    }
    
    if (!pauseKeyPressed) //Force ESC pausing
    {
        if (keyboard_check_pressed(vk_escape))
        {
            pauseKeyPressed = true;
            if global.playerAlive[1] global.pauseClient = 1;
            else if global.playerAlive[2] global.pauseClient = 2;
        }
    }
}

if (pauseKeyPressed)
{
    if (!global.pauseMenu) game_pause();
    else game_unpause();
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Quality Options

screen_update();

///Maximum Number of Shot Particles
global.count_particles = instance_number(fx_hit);

//Maximum Number of Shot Casings
global.count_casings = instance_number(fx_casing) + instance_number(fx_blood);



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DEBUG COMMANDS   
  
if keyboard_check_pressed(ord('M')) global.currentLoop++;
     if keyboard_check_pressed(ord('B')) global.bountyEndless += 500;
     //Debug: Kill Everything
    if keyboard_check_pressed(vk_f9)
    {
        if instance_exists(class_enemy)
        {
            with (class_enemy)
            {
                instance_destroy();
            }
        }
    } 
     
if (debug_mode)
{
if keyboard_check_pressed(ord('M')) global.currentLoop++;

//Debug Endless Shop Portal
if keyboard_check_pressed(ord('N')) room_goto(room_endShop);

//Debug Endless Bounty
    if keyboard_check_pressed(ord('B')) global.bountyEndless += 500;
    
//Debug: Kill Everything
    if keyboard_check_pressed(vk_f9)
    {
        if instance_exists(class_enemy)
        {
            with (class_enemy)
            {
                instance_destroy();
            }
        }
    }

       
    //Debug: Stage Clear
    if keyboard_check_pressed(vk_f10)
    {
        debug_forceLevelExit = true;
    }

    

    ///Mute the Music
    
    if keyboard_check_pressed(ord('M'))
    {
        global.music = !global.music;
    }
    
    if (!global.music)
    {
        if audio_is_playing(bgm_main) audio_stop_sound(bgm_main);
        if audio_is_playing(bgm_shop) audio_stop_sound(bgm_shop);
        if audio_is_playing(bgm_stage1) audio_stop_sound(bgm_stage1);
        if audio_is_playing(bgm_stage2) audio_stop_sound(bgm_stage2);
        if audio_is_playing(bgm_stage3) audio_stop_sound(bgm_stage3);
        if audio_is_playing(bgm_stage4) audio_stop_sound(bgm_stage4);
    }
    
    ///Toggle Reflections
    if keyboard_check_pressed(vk_f5) global.reflections_toggle = !global.reflections_toggle;
    
    ///Toggle Persistent Objects
    if keyboard_check_pressed(vk_f6) global.persistent_toggle = !global.persistent_toggle;
    
    ///Toggle Shadows
    if keyboard_check_pressed(vk_f7) global.shadows_toggle = !global.shadows_toggle;
    
    //Toggle Joystick Aiming Options
    if keyboard_check_pressed(ord('P'))
    {
        if (global.auto_aim == K_AUTOAIM_ASSIST) global.auto_aim = K_AUTOAIM_FULL;
        else global.auto_aim = K_AUTOAIM_ASSIST;
    }
    
    //Toggle Debug Visualization of Pathfinding Grid
    if keyboard_check_pressed(vk_f11)
    {
        global.drawGridDebug = !global.drawGridDebug;
    }
    
    //Debug: Manually Restart the Game
    if keyboard_check_pressed(vk_f12)
    {
        save_and_clean();
        game_restart();
    }
    
    
    
    //Debug: Toggle Hud, comment this to deactivate
    main_hud_alpha = 0;

    //Debug: Erase Steam Achievements
    if keyboard_check_pressed(ord("U"))
    {
        steam_clear_achievement("ACHIEVEMENT_KILLCOMBO"); //set by gui_score
        steam_clear_achievement("ACHIEVEMENT_FIRSTRELIC"); //set by the 3 obj_shop_pineapple ... also on Main to award retroactively 
        steam_clear_achievement("ACHIEVEMENT_ALLRELICS"); //set by Main
        steam_clear_achievement("ACHIEVEMENT_UNLOCKALL"); //set by Create on controller_main
        steam_clear_achievement("ACHIEVEMENT_BEATGAME"); //set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_UNLOCKALLHUNTERS"); //set by Create on controller_main
        steam_clear_achievement("ACHIEVEMENT_UNLOCKRAFF"); //set by obj_teleporter
        steam_clear_achievement("ACHIEVEMENT_ULTIMATERAFF"); //set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_UNLOCKBIU"); //set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_UNLOCKPUNNY"); //set on Step event of controller_main
        steam_clear_achievement("ACHIEVEMENT_ULTIMATEPUNNY"); //dset by Boss corpse 
        steam_clear_achievement("ACHIEVEMENT_JIMMYNOWEAPONS");  //set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_BIUNOWEAPONS");  //set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_UNLOCKASS"); //set on Step event of controller_main
        steam_clear_achievement("ACHIEVEMENT_BEATGAMEWITHASS");  //set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_ULTIMATEPINKY");  //set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_TUTORIAL"); //set on dummy immortal
        steam_clear_achievement("ACHIEVEMENT_TEAMKILL"); //set on the Friendly Fire events (player projectile, sonic boom, melee arc)
        steam_clear_achievement("ACHIEVEMENT_BEATGAMECOOP"); //set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_ULTIMATECOOP");   //set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_FIRSTDIG"); //set by digSpot
        
        steam_clear_achievement("ACHIEVEMENT_FIRSTLOOP"); //set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_LOOP2_JIMMY"); //set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_LOOP2_PINKYY");//set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_LOOP2_RAFF");//set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_LOOP2_BIU");//set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_LOOP2_PUNNY");//set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_LOOP2_ACE");//set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_LOOP2_RIDER"); //set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_GUNNAR_3"); //set by Gunnar
        steam_clear_achievement("ACHIEVEMENT_GUNNAR_9"); //set by Gunnar
        steam_clear_achievement("ACHIEVEMENT_SAE_3"); // set by class_hack
        steam_clear_achievement("ACHIEVEMENT_RELICWEAPONS"); //set by class_player
        steam_clear_achievement("ACHIEVEMENT_LOOPS_50"); //set when I do currentLoop++ on controller_main
        steam_clear_achievement("ACHIEVEMENT_GUNNAR_360"); //set by Gunnar
        steam_clear_achievement("ACHIEVEMENT_SAE_200"); // set by class_hack
        steam_clear_achievement("ACHIEVEMENT_LOOP_NOBUY"); //set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_LOOP3"); //set by Boss corpse
        steam_clear_achievement("ACHIEVEMENT_RELICS_4"); //set by controller_main Step event
        
        steam_clear_achievement("ACHIEVEMENT_ENTER_SPOOKYLANDS"); //set by controller_main Create event
        steam_clear_achievement("ACHIEVEMENT_COMPLETE_SPOOKYLANDS"); //set by controller_main on the Level Exit script
        steam_clear_achievement("ACHIEVEMENT_EAT_CANDY"); //set by the candy pickup
        
        steam_clear_achievement("ACHIEVEMENT_UNLOCK_RIDER"); //set by the cage on its Destroy event;
        steam_clear_achievement("ACHIEVEMENT_DESTROY_KAMIKAGES"); //set by the cage on its Destroy event (alongside Steam Stat);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take Screenshot
steam_screenshot_check();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game Over
if (global.gameOver)
{
    //Load Steam Async
    if (global.isDaily) if (!instance_exists(controller_steamAsync)) instance_create(0,0,controller_steamAsync);
    
    //TIPS
    if (gameOverHint == '')
    {
        if (global.statTotalDeaths &lt;= 1) gameOverHint = loc_key("TIPS_FIRSTDEATH");
        else if (!global.totalDigs &amp;&amp; global.gameMode == gamemode_adventure) gameOverHint = loc_key("TIPS_DIG");
        else if ((global.relic_pineapple_pudding || global.relic_alcoholic_carrot) &amp;&amp; global.relic_slot[1] == '' &amp;&amp; global.gameMode == gamemode_adventure) gameOverHint = loc_key("TIPS_RELIC");
        else{
        
            if (global.gameMode == gamemode_adventure){
                var randomHint = irandom_range(1,10);
                switch (randomHint){
                    case 1: gameOverHint = loc_key("TIPS_RANDOM1"); break;
                    case 2: gameOverHint = loc_key("TIPS_RANDOM2"); break;
                    case 3: gameOverHint = loc_key("TIPS_RANDOM3"); break;
                    case 4: gameOverHint = loc_key("TIPS_RANDOM4"); break;
                    case 5: gameOverHint = loc_key("TIPS_RANDOM5"); break;
                    case 6: gameOverHint = loc_key("TIPS_RANDOM6"); break;
                    case 7: gameOverHint = loc_key("TIPS_RANDOM7"); break;
                    case 8: gameOverHint = loc_key("TIPS_RANDOM8"); break;
                    case 9: gameOverHint = loc_key("TIPS_RANDOM9"); break;
                    case 10: gameOverHint = loc_key("TIPS_RANDOM10"); break;
                }
            }
            
            if (global.gameMode == gamemode_endless){
                var randomHint = irandom_range(1,7);
                switch (randomHint){
                    case 1: gameOverHint = loc_key("TIPS_ENDLESS1"); break;
                    case 2: gameOverHint = loc_key("TIPS_ENDLESS2"); break;
                    case 3: gameOverHint = loc_key("TIPS_ENDLESS3"); break;
                    case 4: gameOverHint = loc_key("TIPS_ENDLESS4"); break;
                    case 5: gameOverHint = loc_key("TIPS_ENDLESS5"); break;
                    case 6: gameOverHint = loc_key("TIPS_ENDLESS6"); break;
                    case 7: gameOverHint = loc_key("TIPS_ENDLESS7"); break;
                }
            }
        }
    }
    
    var wantToRestart = false;
    var wantToQuit = false;
    
    //Restart &amp; Back to Menu
    var p = 1; while (p &lt;= global.playerCount)
    {
        var input = global.input[p];
        
        if (input != K_INPUT_KEYBOARD &amp;&amp; joy_check_pressed(input,1)) || ( input == K_INPUT_KEYBOARD &amp;&amp; (keyboard_check(vk_space)))
        {
            wantToRestart = true;
            break;
        }
        
        if (input != K_INPUT_KEYBOARD &amp;&amp; joy_check_pressed(input,2)) || ( input == K_INPUT_KEYBOARD &amp;&amp; (keyboard_check(vk_escape)))
        {
            wantToQuit = true;
            break;
        }
  
        p++;
    }
    
    if (wantToRestart || wantToQuit)
    {
        //Update stats &amp; reset Loop
        if (!global.statLongestRun || global.statRunTime &gt; global.statLongestRun) global.statLongestRun = global.statRunTime;
        if (!global.scoreEndlessBest || global.scoreEndless &gt; global.scoreEndlessBest) global.scoreEndlessBest = global.scoreEndless;
        if (!global.statBestLoop || global.currentLoop &gt; global.statBestLoop) global.statBestLoop = global.currentLoop;
        
        if (global.isDaily)
        {
            global.dailyCompleted = string(current_day)+string(current_month)+string(current_year);
            global.dailyCompletedScore = global.scoreEndless;
            global.dailyCompletedBadge = global.dailyBadge;
        }
        
        global.currentLoop = 0;
        save_and_clean();
        
        //Resolve
        if (wantToRestart) &amp;&amp; (!global.isDaily)
        {
            if (global.gameMode == gamemode_adventure) room_goto(room_start);
            else room_goto(level1_1);
        }
        else if (wantToQuit) || (global.isDaily)
        {
            game_restart();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Unlock New Hunters + Achievements

if (global.statTotalBounty &gt;= 80000) &amp;&amp; (!global.unlockPunny)
{
    global.unlockPunny = true;
    achievement_give("ACHIEVEMENT_UNLOCKPUNNY");
    announce = instance_create(x,y,fx_bigMessage);
    announce.textBig = loc_key("HUD_UNLOCK_HUNTER");
    announce.textSmall = loc_key("HUD_UNLOCK_PUNNY");
    announce.hunterUnlockSprite = spr_hud_face_punny;
}

if (global.statKilledByBoss &gt;= 5) &amp;&amp; (!global.unlockAss)
{
    global.unlockAss = true;
    achievement_give("ACHIEVEMENT_UNLOCKASS");
    announce = instance_create(x,y,fx_bigMessage);
    announce.textBig = loc_key("HUD_UNLOCK_HUNTER");
    announce.textSmall = loc_key("HUD_UNLOCK_ASS");
    announce.hunterUnlockSprite = spr_hud_face_ass;
}

if (global.gameMode == gamemode_endless) &amp;&amp; (!awarded4RelicsAchievement) {
    var countRelics = 0;
    if (global.relic_morning_star) countRelics++;
    if (global.relic_pineapple_pie) countRelics++;
    if (global.relic_rabbit_foot) countRelics++;
    if (global.relic_midnight_meal) countRelics++;
    if (global.relic_yottabyte_processor) countRelics++;
    if (global.relic_alcoholic_carrot) countRelics++;
    if (global.relic_yottabyte_drive)  countRelics++;
    if (global.relic_pineapple_pudding)  countRelics++;
    if (global.relic_infinity_battery)   countRelics++;
    if (global.relic_crystal_bacon) countRelics++;
    if (global.relic_midnight_beer) countRelics++;
    if (global.relic_watchful_eye) countRelics++;
    if (global.relic_dev_potion) countRelics++;
    if (global.relic_mega_quantum_chip) countRelics++;
    if (countRelics &gt;= 4) {
        achievement_give("ACHIEVEMENT_RELICS_4");
        awarded4RelicsAchievement = true;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Count Game Time Every Second

timeCounter++

if (timeCounter &gt;= room_speed)
{
    timeCounter = 0;
    global.statTotalTime++;
    
    if (!global.gameOver) &amp;&amp; (!global.pauseMenu) global.statRunTime++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Edge Tracking for Enemies

var maxEdgeTrackingDistance = 1000;

if (!ds_exists(global.edgeTrackEnemyList,ds_type_list)) global.edgeTrackEnemyList = ds_list_create();
ds_list_clear(global.edgeTrackEnemyList);

if (instance_exists(class_enemy))
{
    var enemyCount = instance_number(class_enemy);
    for (var i=0; i&lt;enemyCount; i++)
    {
        var enemy = instance_find(class_enemy,i);
        if (instance_exists(enemy)) 
        {
            if (!on_screen_offset(enemy.x,enemy.y,32)) 
            {
                var enemyDist = abs(point_distance(view_xview[0]+(view_wview[0]/2),view_yview[0]+(view_hview[0]/2),enemy.x,enemy.y));
                if (enemyDist &lt;= maxEdgeTrackingDistance) 
                {
                    ds_list_add(global.edgeTrackEnemyList,enemy);
                }
            }
        }
    }
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn Survival Wave Enemies

if ((!instance_exists(class_enemy)) &amp;&amp; (!instance_exists(obj_kamikazelite_flying)) &amp;&amp; (instance_exists(class_player)) &amp;&amp; (global.survivalWaves))
{
    global.survivalWaves--;
    
    repeat(survivalWaveSize){
       if (!ds_list_empty(enemy_pool))
       {
            pick_random_group = irandom(ds_list_size(enemy_pool)-1);
            random_group = ds_list_find_value(enemy_pool,pick_random_group);
            ds_list_delete(enemy_pool,pick_random_group);
                
            current_group = ds_list_create();
            ds_list_copy(current_group, random_group);
                
            enemy_spawn_number = instance_number(obj_spawn_enemy);
            random_spawn = irandom(enemy_spawn_number-1);
            target_spawn = instance_find(obj_spawn_enemy,random_spawn);
                
            while (!ds_list_empty(current_group)) &amp;&amp; (instance_exists(target_spawn))
            {
                spawnX = target_spawn.spawnX + random_range(-128,128);
                spawnY = target_spawn.spawnY + random_range(-128,128);
                    
                if collision_circle(spawnX,spawnY,40,class_solid,false,true) &lt; 0 
                {
                    list_position = ds_list_size(current_group)-1;
                    spawnee = ds_list_find_value(current_group, list_position);
                    spawnedEnemy = instance_create(spawnX,spawnY,spawnee);
                    
                    spawnedEnemy.ai_activation_range = 2000;
                    spawnedEnemy.ai_shutdown_range = 2000;
                    
                    ds_list_delete(current_group,list_position);
                }
            }
            
            ds_list_destroy(current_group);
            with (target_spawn) { instance_destroy(); }
       }
       else exit;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Daily Run Force Save
if (global.isDaily)
{
    global.dailyCompleted = stringCurrentDate;
    global.dailyCompletedScore = global.scoreEndless;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///end of room cleanup

//free surfaces
if (surface_exists(guiSurface)) surface_free(guiSurface);
if (surface_exists(reloadBarSurface)) surface_free(reloadBarSurface);
if (surface_exists(reloadBarSurface2)) surface_free(reloadBarSurface2);

//destroy grids
mp_grid_destroy(global.astar_grid);
/*
save_and_clean();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set GUI Size
originalX = 1920;
originalY = 1080;
display_set_gui_size(window_get_width(), window_get_height());
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main HUD Draw

if (!surface_exists(guiSurface))
{
    guiSurface = surface_create(1920,1080);
}
surface_set_target(guiSurface);
draw_clear_alpha(c_white,0);

draw_set_alpha(main_hud_alpha);

var width = 1920;
var height = 1080;

var p = 1;
var playerInstanceNumber = 0;
while (p &lt;= global.playerCount)
{
    var curPlayer = instance_find(class_player,playerInstanceNumber);
    if (curPlayer) &amp;&amp; instance_exists(curPlayer)
    {
        //Get Basic Player Values
        var energy = curPlayer.energy;
        var energy_max = curPlayer.energy_max + curPlayer.overshield;
        var hp = curPlayer.hp;
        var hp_max = curPlayer.hp_max;
        var stamina = curPlayer.stamina;
        var stamina_max = curPlayer.stamina_max;
        var playerId = curPlayer.myPlayerId;
        
        //Character Portrait
        if playerId == 1
        {
            var charPortraitX = width*0.02;
            var charPortraitY = height*0.09;
            var charPortraitOrientation = 1;
        }
        else
        {
            var charPortraitX = width*0.98;
            var charPortraitY = height*0.09;
            var charPortraitOrientation = -1;
        }
        
        
        if (curPlayer.hp &gt;= curPlayer.hp_max*0.66) { sprite_face = 0; healthColor = c_white; }
        if (curPlayer.hp &lt; curPlayer.hp_max*0.66) { sprite_face = 1; healthColor = c_yellow; }
        if (curPlayer.hp &lt; curPlayer.hp_max*0.33) { sprite_face = 2; healthColor = c_red; }
        
        if (global.character[playerId] == char_jimmy) draw_sprite_ext(spr_hud_face_jimmy,sprite_face,charPortraitX,charPortraitY,1.5*charPortraitOrientation,1.5,1,c_white,main_hud_alpha);
        if (global.character[playerId] == char_pinky) draw_sprite_ext(spr_hud_face_pinky,sprite_face,charPortraitX,charPortraitY,1.5*charPortraitOrientation,1.5,1,c_white,main_hud_alpha);
        if (global.character[playerId] == char_raff) draw_sprite_ext(spr_hud_face_raff,sprite_face,charPortraitX,charPortraitY,1.5*charPortraitOrientation,1.5,1,c_white,main_hud_alpha);
        if (global.character[playerId] == char_biu) draw_sprite_ext(spr_hud_face_biu,sprite_face,charPortraitX,charPortraitY,1.5*charPortraitOrientation,1.5,1,c_white,main_hud_alpha);
        if (global.character[playerId] == char_punny) draw_sprite_ext(spr_hud_face_punny,sprite_face,charPortraitX,charPortraitY,1.5*charPortraitOrientation,1.5,1,c_white,main_hud_alpha);
        if (global.character[playerId] == char_ass) draw_sprite_ext(spr_hud_face_ass,sprite_face,charPortraitX,charPortraitY,1.5*charPortraitOrientation,1.5,1,c_white,main_hud_alpha);
        if (global.character[playerId] == char_rider) draw_sprite_ext(spr_hud_face_rider,sprite_face,charPortraitX,charPortraitY,1.5*charPortraitOrientation,1.5,1,c_white,main_hud_alpha);
        
        //Character Bars
        var charLifeBarTopX = width*0.08;
        var charLifeBarTopY = height*0.062;
        var charLifeBarWidth = 250;
        var charLifeBarHeight = 70;
        
        var charShieldBarTopX = width*0.076;
        var charShieldBarTopY = height*0.1;
        var charShieldBarWidth = 230;
        var charShieldBarHeight = 37;
        
        var charStaminaBarTopX = charShieldBarTopX;
        var charStaminaBarTopY = charShieldBarTopY+charShieldBarHeight+6;
        var charStaminaBarWidth = 230;
        var charStaminaBarHeight = 10;
        
        if (playerId != 1)
        {
            charLifeBarTopX = width*0.92 - charLifeBarWidth;
            charShieldBarTopX = width*0.924 - charShieldBarWidth;
            charStaminaBarTopX = charShieldBarTopX;
        }
        
        draw_set_valign(fa_center);
        draw_set_halign(fa_right);
        
        var charLifeColor = make_color_rgb(184,49,35);
        var charShieldColor = make_color_rgb(50,133,158);
        if (curPlayer.overshield) &amp;&amp; (energy &gt; curPlayer.energy_max) charShieldColor = make_color_rgb(86,216,255);
        if (curPlayer.superShield) charShieldColor = K_BETU_ORANGE;
        var charBarDelaySpeed = 0.008;
        var charBarDelayTime = room_speed*0.6;
        
        //Health
        draw_set_color(c_black);
        draw_set_alpha(0.8*main_hud_alpha);
        draw_rectangle(charLifeBarTopX,charLifeBarTopY,charLifeBarTopX+charLifeBarWidth,charLifeBarTopY+charLifeBarHeight,false);
        draw_set_alpha(0.9*main_hud_alpha);
        draw_healthbar_delayed(delayedCharHealthBar1[playerId], charLifeBarTopX-5,charLifeBarTopY-5,charLifeBarTopX+charLifeBarWidth-5,charLifeBarTopY+charLifeBarHeight-5, hp, hp_max, charLifeColor, c_black, c_white, charBarDelaySpeed, charBarDelayTime, 0, false, false);
        draw_sprite_ext(spr_icon_health,0,charLifeBarTopX+20,charLifeBarTopY+20,1.5,1.5,0,c_white,main_hud_alpha);
        
        draw_set_color(c_white);
        draw_set_font(global.font_numberLarge);
        draw_text(charLifeBarTopX+charLifeBarWidth-14, charLifeBarTopY+14,string(hp));
        
        //Shields &amp; Stamina
        draw_set_color(c_black);
        draw_set_alpha(0.8*main_hud_alpha);
        draw_rectangle(charShieldBarTopX,charShieldBarTopY,charShieldBarTopX+charShieldBarWidth,charShieldBarTopY+charShieldBarHeight,false);
        draw_rectangle(charStaminaBarTopX,charStaminaBarTopY,charStaminaBarTopX+charStaminaBarWidth,charStaminaBarTopY+charStaminaBarHeight,false);
        
        draw_set_alpha(0.9*main_hud_alpha);
        if (energy_max) draw_healthbar_delayed(delayedCharShieldBar1[playerId], charShieldBarTopX-5,charShieldBarTopY-5,charShieldBarTopX+charShieldBarWidth-5,charShieldBarTopY+charShieldBarHeight-5, energy, energy_max, charShieldColor, c_black, c_white, charBarDelaySpeed, charBarDelayTime, 0, false, false);
        draw_sprite_ext(spr_icon_shield,0,charShieldBarTopX+20,charShieldBarTopY+(charShieldBarHeight/2),1.5,1.5,0,c_white,main_hud_alpha);
        draw_set_color(c_white);
        draw_set_font(global.font_numberMedium);
        draw_text(charLifeBarTopX+charShieldBarWidth-16, charShieldBarTopY+12,string(round(energy)));
        
        var staminaColor1,staminaColor2;
        if (stamina &gt; (stamina_max/2)) staminaColor1 = c_white;
        else staminaColor1 = c_gray;
        if (stamina &gt;= (stamina_max)) staminaColor2 = c_white;
        else staminaColor2 = c_gray;
        draw_healthbar(charStaminaBarTopX-2, charStaminaBarTopY-2, charStaminaBarTopX+(charStaminaBarWidth/2)-4, charStaminaBarTopY+charStaminaBarHeight-2, min( 1,(stamina/(stamina_max/2)) )*100, c_black, staminaColor1, staminaColor1, 0, false, false);
        var secondValue = stamina-(stamina_max/2);
        if (secondValue) draw_healthbar(charStaminaBarTopX+(charStaminaBarWidth/2), charStaminaBarTopY-2, charStaminaBarTopX+charStaminaBarWidth-2, charStaminaBarTopY+charStaminaBarHeight-2, ( secondValue/(stamina_max/2 ))*100, c_black, staminaColor2, staminaColor2, 0, false, false);  
        
        
        //Main Weapon HUD
        var weaponSelectedX = width*0.05;
        var weaponSelectedY = height*0.9;
        var weaponBackX = width*0.03;
        var weaponBackY = height*0.95;
        
        if (playerId != 1)
        {
            weaponSelectedX = width*0.92;
            weaponBackX = width*0.90;
        }
        
        var weaponSelected = noone;
        var weaponBack = noone;
        
        var stupidOffsetSelectedY = 0; //because of gloves and buckler. Not called "stupid" lightly
        var stupidOffsetBackY = 0;
        var stupidOverrideSpriteSelected = -1;
        var stupidOverrideSpriteBack = -1;
        
        if (curPlayer.weapon1) &amp;&amp; (instance_exists(curPlayer.weapon1))
        {
            if (curPlayer.weapon1.isActive) 
            {
                weaponSelected = curPlayer.weapon1;  
                if (curPlayer.weapon1 == obj_gloves)    { stupidOverrideSpriteSelected = spr_gloves_idle;  stupidOffsetSelectedY=22; }
                if (curPlayer.weapon1 == obj_buckler)   { stupidOverrideSpriteSelected = spr_buckler_idle; stupidOffsetSelectedY=42; }
            }
            else{
                weaponBack = curPlayer.weapon1;
                if (curPlayer.weapon1 == obj_gloves)    { stupidOverrideSpriteBack = spr_gloves_idle;  stupidOffsetBackY=22; }
                if (curPlayer.weapon1 == obj_buckler)   { stupidOverrideSpriteBack = spr_buckler_idle; stupidOffsetBackY=42; }
            }
        }
        if (curPlayer.weapon2) &amp;&amp; (instance_exists(curPlayer.weapon2))
        {
            if (weaponSelected == noone) &amp;&amp; (curPlayer.weapon2.isActive)
            {
                weaponSelected = curPlayer.weapon2;
                if (curPlayer.weapon2 == obj_gloves)    { stupidOverrideSpriteSelected = spr_gloves_idle;  stupidOffsetSelectedY=22; }
                if (curPlayer.weapon2 == obj_buckler)   { stupidOverrideSpriteSelected = spr_buckler_idle; stupidOffsetSelectedY=42; }
            }
            else{
                weaponBack = curPlayer.weapon2;
                if (curPlayer.weapon2 == obj_gloves)    { stupidOverrideSpriteBack = spr_gloves_idle;  stupidOffsetBackY=22; }
                if (curPlayer.weapon2 == obj_buckler)   { stupidOverrideSpriteBack = spr_buckler_idle; stupidOffsetBackY=42; }
            }
        }
        
        var weaponSelectedSprite = -1;
        var weaponSelectedColor = c_black;
        
        if (instance_exists(weaponSelected))
        {
            weaponSelectedSprite = weaponSelected.sprite_index;
            if (weaponSelected.ammo_type == type_light) weaponSelectedColor = K_BETU_GREEN2;
            if (weaponSelected.ammo_type == type_medium) weaponSelectedColor = K_BETU_RED;
            if (weaponSelected.ammo_type == type_heavy) weaponSelectedColor = K_BETU_BLUE;
            
            if (stupidOverrideSpriteSelected) weaponSelectedSprite = stupidOverrideSpriteSelected;
        }
        
        var weaponBackSprite = -1;
        var weaponBackColor = c_black;
        
        if (instance_exists(weaponBack))
        {
            weaponBackSprite = weaponBack.sprite_index;
            if (weaponBack.ammo_type == type_light) weaponBackColor = K_BETU_GREEN2;
            if (weaponBack.ammo_type == type_medium) weaponBackColor = K_BETU_RED;
            if (weaponBack.ammo_type == type_heavy) weaponBackColor = K_BETU_BLUE;
            
            if (stupidOverrideSpriteBack) weaponBackSprite = stupidOverrideSpriteBack;
        }
        
        if (sprite_exists(weaponSelectedSprite)) 
        {
            draw_sprite_ext(weaponSelectedSprite, 2, weaponSelectedX+4, weaponSelectedY+stupidOffsetSelectedY+4, 2, 2, 0, c_black, 0.8*main_hud_alpha);
            draw_sprite_ext(weaponSelectedSprite, 2, weaponSelectedX, weaponSelectedY+stupidOffsetSelectedY, 2, 2, 0, weaponSelectedColor, main_hud_alpha);
        }
        if (sprite_exists(weaponBackSprite)) draw_sprite_ext(weaponBackSprite, 2, weaponBackX, weaponBackY+stupidOffsetBackY, 2, 2, 0, weaponBackColor, 0.8*main_hud_alpha);
        
        
        //Ammo Numbers
        
        var ammoNumberGunX = width*0.17;
        var ammoNumberGunY = height*0.9;
        var ammoNumberTotalX = ammoNumberGunX+8;
        var ammoNumberTotalY = ammoNumberGunY+18;
        
        var ammoBarTotalWidth = 40;
        var ammoBarTotalHeight = 16;
        var ammoBarDelaySpeed = 0.004;
        var ammoBarDelayTime = room_speed*0.6;
        var ammoBarTotalX = ammoNumberTotalX+(ammoBarTotalWidth/2);
        var ammoBarTotalY = ammoNumberGunY-8;
        
        if (playerId != 1)
        {
            ammoNumberGunX = width*0.83;
            ammoNumberTotalX = ammoNumberGunX+8;
            ammoBarTotalX = ammoNumberTotalX+(ammoBarTotalWidth/2);
        }
        
        if (instance_exists(weaponSelected))
        {
            //Gun Ammo
            draw_set_halign(fa_right);
            draw_set_valign(fa_center);
            draw_set_font(global.font_numberVeryLarge);
            draw_text_dropoutline_ext_transformed(ammoNumberGunX, ammoNumberGunY, string(weaponSelected.ammo_current), c_white, c_white, c_black, 1, 5, 1, 1, 0, main_hud_alpha);
            
            //Total Ammo
            var pAmmoTotal = 0;
            var pAmmoTotalMax = 0;
            var pAmmoBarId = -1;
            if (weaponSelected.ammo_type == type_light)   { pAmmoTotal = global.ammo_light[playerId];    pAmmoTotalMax = global.ammo_light_max;   pAmmoBarId =  delayedAmmoLightBar[playerId]; }
            if (weaponSelected.ammo_type == type_medium)  { pAmmoTotal = global.ammo_medium[playerId];   pAmmoTotalMax = global.ammo_medium_max;  pAmmoBarId =  delayedAmmoMediumBar[playerId]; }
            if (weaponSelected.ammo_type == type_heavy)   { pAmmoTotal = global.ammo_heavy[playerId];    pAmmoTotalMax = global.ammo_heavy_max;   pAmmoBarId =  delayedAmmoHeavyBar[playerId]; }
            draw_set_halign(fa_left);
            draw_set_valign(fa_center);
            draw_set_font(global.font_numberMedium);
            
            if (weaponSelected.ammo_cost &gt; 0) draw_text_dropshadow_ext_transformed(ammoNumberTotalX, ammoNumberTotalY, string(floor(pAmmoTotal/weaponSelected.ammo_cost)), c_white, c_black, 0.8, 2, 1, 1,0, main_hud_alpha);
        
            //Total Ammo Bar
            draw_healthbar_delayed(pAmmoBarId, ammoBarTotalX-(ammoBarTotalWidth/2), ammoBarTotalY-(ammoBarTotalHeight/2), ammoBarTotalX+(ammoBarTotalWidth/2), ammoBarTotalY+(ammoBarTotalHeight/2), 
            pAmmoTotal, pAmmoTotalMax, weaponSelectedColor, c_black, c_white, ammoBarDelaySpeed, ammoBarDelayTime, 0, false, false);  
        }
        
        //Grenades
            var grenadesVerSpacing = 30;
            var grenadesHorSpacing = 25;
            var grenadesHorOrientation = 1;
            
            var pGrenadesX = width*0.025;
            var pGrenadesY = height*0.85;
            
            if (playerId != 1) 
            {
                pGrenadesX = width*0.975;
                grenadesHorOrientation = -1;
            }
            
            var grenadeCount = global.grenades[playerId];
            var grMaxHorizontal = 5;
            var grDrawCount = 0;
            var grOffsetX = 0;
            var grOffsetY = 0;
            
            if (grenadeCount) repeat (grenadeCount)
            {
                draw_sprite_ext(spr_grenadeNew,0,pGrenadesX+grOffsetX, pGrenadesY+grOffsetY, 1, 1, 0, c_white, main_hud_alpha);
                grOffsetX += grenadesHorSpacing*grenadesHorOrientation;
                grDrawCount++;
                if (grDrawCount &gt;= grMaxHorizontal)
                {
                    grOffsetX = 0;
                    grOffsetY -= grenadesVerSpacing;
                    grDrawCount = 0;
                }
            }
            else if (global.character[playerId] == char_rider) {
                //If it's rider, draw a special grenade icon for zero grenades
                draw_sprite_ext(spr_grenadeNew,0,pGrenadesX+grOffsetX, pGrenadesY+grOffsetY, 1, 1, 0, c_white, main_hud_alpha);
                draw_sprite_ext(spr_icon_health,0,pGrenadesX+grOffsetX+8, pGrenadesY+grOffsetY+8, 1, 1, 0, K_BETU_RED, main_hud_alpha);
            }
        
        //gui_score Objects
        if instance_exists(gui_score)
        {
            draw_set_halign(fa_center);
            draw_set_valign(fa_center);
            
            var drawScoreX = width*0.5;
            var drawScoreY = height*0.15;
            
            draw_set_font(global.font_numberLarge);
            draw_text_dropoutline_ext_transformed(drawScoreX,drawScoreY,gui_score.myString,c_white,c_white,c_black,0.7,4,1,1,0,main_hud_alpha);
            
            draw_set_font(global.font_numberVeryLarge);
            draw_text_dropoutline_ext_transformed(drawScoreX,drawScoreY+43,'+'+string(gui_score.value),c_white,c_white,c_black,0.7,4,gui_score.size_current,gui_score.size_current,0,main_hud_alpha);
        }
        
        //fx_bigMessage Objects  
        if instance_exists(fx_bigMessage)
        {
            draw_set_halign(fa_center);
            draw_set_valign(fa_center);
            var drawBigX = width*0.5;
            var drawBigY = height*0.62;
        
            for (var big=0; big&lt;instance_number(fx_bigMessage); big++)
            {
                var bigMessage = instance_find(fx_bigMessage,big);
                if (bigMessage.active)
                {
                    draw_set_font(bigMessage.textBigFont);
                    draw_text_dropoutline_ext_transformed(drawBigX,drawBigY,bigMessage.textBig,bigMessage.textBigColor,bigMessage.textBigColor,c_black,0.7,4,1,1,0, bigMessage.myAlpha);
                    
                    draw_set_font(bigMessage.textSmallFont);
                    draw_text_dropoutline_ext_transformed(drawBigX,drawBigY+43,bigMessage.textSmall,bigMessage.textSmallColor,bigMessage.textSmallColor,c_black,0.7,4,1,1,0, bigMessage.myAlpha);
                
                    if (bigMessage.relicCompleteSprite != -1) draw_sprite_ext(bigMessage.relicCompleteSprite,0,drawBigX,drawBigY-43,2,2,0,c_white,bigMessage.myAlpha);
                    else if (bigMessage.hunterUnlockSprite != -1) draw_sprite_ext(bigMessage.hunterUnlockSprite,0,drawBigX,drawBigY-50,1,1,0,c_white,bigMessage.myAlpha);
                    else if (bigMessage.relicSprite1 != -1)
                    {
                        var relicBlend;
                        if (bigMessage.relicSprite1Draw) relicBlend = c_white;  else relicBlend = c_black;
                        draw_sprite_ext(bigMessage.relicSprite1,0,drawBigX-70,drawBigY-43,2,2,0,relicBlend,bigMessage.myAlpha);
                        if (bigMessage.relicSprite2Draw) relicBlend = c_white;  else relicBlend = c_black;
                        draw_sprite_ext(bigMessage.relicSprite2,0,drawBigX,drawBigY-43,2,2,0,relicBlend,bigMessage.myAlpha);
                        if (bigMessage.relicSprite3Draw) relicBlend = c_white;  else relicBlend = c_black;
                        draw_sprite_ext(bigMessage.relicSprite3,0,drawBigX+70,drawBigY-43,2,2,0,relicBlend,bigMessage.myAlpha);
                    }
                }
            }
        }
        
        //Draw Dynamic Ammo Bars
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_set_alpha(main_hud_alpha);
        
        var dynamicAmmoObj = gui_dynamic_ammo1;
        
        var dynamicAmmoX = -1*width*0.1;
        var dynamicAmmoY1 = height*0.46;
        var dynamicAmmoY2 = height*0.5;
        var dynamicAmmoY3 = height*0.54;
        var dynamicAmmoBarHeight = 32;
        var dynamicAmmoBarWidth = 160;
        
        if (playerId != 1)
        {
            dynamicAmmoObj = gui_dynamic_ammo2;
            dynamicAmmoX = width*1.1;
        }
            
        var dynamicAmmoString1 = loc_key("GENERAL_LIGHTAMMO");
        var dynamicAmmoString2 = loc_key("GENERAL_MEDIUMAMMO");
        var dynamicAmmoString3 = loc_key("GENERAL_HEAVYAMMO");
            
        if (instance_exists(dynamicAmmoObj))
        {
            var bgX1 = dynamicAmmoX-(dynamicAmmoBarWidth/2) + dynamicAmmoObj.offsetX;
            var bgX2 = dynamicAmmoX+(dynamicAmmoBarWidth/2) + dynamicAmmoObj.offsetX;
            
            var bg1Y1 = dynamicAmmoY1-(dynamicAmmoBarHeight/2) +dynamicAmmoObj.offsetY;
            var bg1Y2 = dynamicAmmoY1+(dynamicAmmoBarHeight/2) +dynamicAmmoObj.offsetY;
            var bg2Y1 = dynamicAmmoY2-(dynamicAmmoBarHeight/2) +dynamicAmmoObj.offsetY;
            var bg2Y2 = dynamicAmmoY2+(dynamicAmmoBarHeight/2) +dynamicAmmoObj.offsetY;
            var bg3Y1 = dynamicAmmoY3-(dynamicAmmoBarHeight/2) +dynamicAmmoObj.offsetY;
            var bg3Y2 = dynamicAmmoY3+(dynamicAmmoBarHeight/2) +dynamicAmmoObj.offsetY;
            
            draw_set_color(c_black);
            draw_set_alpha(0.8*main_hud_alpha);
            draw_rectangle(bgX1,bg1Y1,bgX2,bg1Y2,false);
            draw_rectangle(bgX1,bg2Y1,bgX2,bg2Y2,false);
            draw_rectangle(bgX1,bg3Y1,bgX2,bg3Y2,false);
            
            draw_set_halign(fa_center);
            draw_set_valign(fa_center);
            draw_set_alpha(main_hud_alpha);
            var ammoBarLightColor = make_color_rgb(0,178,77);
            var ammoBarMediumColor = make_color_rgb(178,0,65);
            var ammoBarHeavyColor = make_color_rgb(0,88,178);
            
            var ammoBarDelaySpeed = 0.004;
            var ammoBarDelayTime = room_speed*0.6;
            
            draw_healthbar_delayed(delayedAmmoLightBar[playerId], bgX1-2,bg1Y1-2,bgX2-2,bg1Y2-2, global.ammo_light[playerId], global.ammo_light_max, ammoBarLightColor, c_black, c_white, ammoBarDelaySpeed, ammoBarDelayTime, 0, false, false);
            draw_healthbar_delayed(delayedAmmoMediumBar[playerId], bgX1-2,bg2Y1-2,bgX2-2,bg2Y2-2, global.ammo_medium[playerId], global.ammo_medium_max, ammoBarMediumColor, c_black, c_white, ammoBarDelaySpeed, ammoBarDelayTime, 0, false, false);
            draw_healthbar_delayed(delayedAmmoHeavyBar[playerId], bgX1-2,bg3Y1-2,bgX2-2,bg3Y2-2, global.ammo_heavy[playerId], global.ammo_heavy_max, ammoBarHeavyColor, c_black, c_white, ammoBarDelaySpeed, ammoBarDelayTime, 0, false, false);
        
            draw_set_font(global.font_numberSmall);
            draw_set_halign(fa_left);
            
            draw_text_dropshadow_ext_transformed(bgX1+3,dynamicAmmoY1+dynamicAmmoObj.offsetY,dynamicAmmoString1,c_white,c_black,0.7,1,1,1,0,main_hud_alpha);
            draw_text_dropshadow_ext_transformed(bgX1+3,dynamicAmmoY2+dynamicAmmoObj.offsetY,dynamicAmmoString2,c_white,c_black,0.7,1,1,1,0,main_hud_alpha);
            draw_text_dropshadow_ext_transformed(bgX1+3,dynamicAmmoY3+dynamicAmmoObj.offsetY,dynamicAmmoString3,c_white,c_black,0.7,1,1,1,0,main_hud_alpha);
        }
        
        //Boss Fight Lifebar
        if instance_exists(obj_boss)
        {
            draw_set_halign(fa_center);
            draw_set_valign(fa_center);
            
            var drawBossX1 = width*0.3;
            var drawBossY1 = height*0.9;
            var drawBossX2 = width*0.7;
            var drawBossY2 = height*0.95;
            
            var drawBossColorMain = c_red;
            var drawBossColorDelay = c_white;
            var drawBossColorBack = c_black;
            var drawBossColorGenerator = c_blue;
            
            var drawBossDelayTime = room_speed*0.6;
            var drawBossDelaySpeed = 0.0025;
            
            var allowBossDraw = true;
            var drawBossText = loc_key("BOSS_DUCANCOMMANDER");
            
            //Draw Generator1 Healthbar
            if (obj_boss.hpMilestoneCurrent == 1) &amp;&amp; (instance_exists(obj_generator1))
            {
                allowBossDraw = false;
                
                if (isGen1Setup) draw_healthbar_delayed(bossBar,drawBossX1, drawBossY1, drawBossX2, drawBossY2, obj_generator1.hp, obj_generator1.maxhp, drawBossColorGenerator, drawBossColorBack, drawBossColorDelay, drawBossDelaySpeed, drawBossDelayTime,0,true,false);
                else{
                    draw_healthbar(drawBossX1, drawBossY1, drawBossX2, drawBossY2,fakeBarFill,drawBossColorBack,drawBossColorGenerator,drawBossColorGenerator,0,true,false);
                    if (fakeBarFill &lt; 100) fakeBarFill++;
                    else { isGen1Setup = true; fakeBarFill=0; }
                }
                 draw_sprite(spr_boss_barGen,0,drawBossX1,drawBossY1+((drawBossY2-drawBossY1)/2));
            }
            
            //Draw Generator2 Healthbar
            if (obj_boss.hpMilestoneCurrent == 2) &amp;&amp; (instance_exists(obj_generator2))
            {
                allowBossDraw = false;
                
                if (isGen1Setup) draw_healthbar_delayed(bossBar,drawBossX1, drawBossY1, drawBossX2, drawBossY2, obj_generator2.hp, obj_generator2.maxhp, drawBossColorGenerator, drawBossColorBack, drawBossColorDelay, drawBossDelaySpeed, drawBossDelayTime,0,true,false);
                else{
                    draw_healthbar(drawBossX1, drawBossY1, drawBossX2, drawBossY2,fakeBarFill,drawBossColorBack,drawBossColorGenerator,drawBossColorGenerator,0,true,false);
                    if (fakeBarFill &lt; 100) fakeBarFill++;
                    else { isGen1Setup = true; fakeBarFill=0; }
                }
                 draw_sprite(spr_boss_barGen,0,drawBossX1,drawBossY1+((drawBossY2-drawBossY1)/2));
            }
            
            //Draw Generator3 Healthbar
            if (obj_boss.hpMilestoneCurrent == 4) &amp;&amp; (instance_exists(obj_generator3))
            {
                allowBossDraw = false;
                
                if (isGen1Setup) draw_healthbar_delayed(bossBar,drawBossX1, drawBossY1, drawBossX2, drawBossY2, obj_generator3.hp, obj_generator3.maxhp, drawBossColorGenerator, drawBossColorBack, drawBossColorDelay, drawBossDelaySpeed, drawBossDelayTime,0,true,false);
                else{
                    draw_healthbar(drawBossX1, drawBossY1, drawBossX2, drawBossY2,fakeBarFill,drawBossColorBack,drawBossColorGenerator,drawBossColorGenerator,0,true,false);
                    if (fakeBarFill &lt; 100) fakeBarFill++;
                    else { isGen1Setup = true; fakeBarFill=0; }
                }
                draw_sprite(spr_boss_barGen,0,drawBossX1,drawBossY1+((drawBossY2-drawBossY1)/2));
            }
            
            //Draw Boss Healthbar
            if (allowBossDraw)
            {
                if (isBossSetup) draw_healthbar_delayed(bossBar,drawBossX1, drawBossY1, drawBossX2, drawBossY2, obj_boss.hp, obj_boss.hp_max, drawBossColorMain, drawBossColorBack, drawBossColorDelay, drawBossDelaySpeed, drawBossDelayTime,0,true,false);
                else{
                    draw_healthbar(drawBossX1, drawBossY1, drawBossX2, drawBossY2,fakeBarFill,drawBossColorBack,drawBossColorMain,drawBossColorMain,0,true,false);
                    if (fakeBarFill &lt; 100) fakeBarFill++;
                    else { isBossSetup = true; fakeBarFill=0; }
                }
                var bossImage = 0;
                if (obj_boss.hpMilestoneCurrent == 2) bossImage = 1;
                if (obj_boss.hpMilestoneCurrent == 4) bossImage = 2;
                draw_sprite(spr_boss_barFace,bossImage,drawBossX1,drawBossY1+((drawBossY2-drawBossY1)/2));
            }
            else drawBossText = loc_key("BOSS_SHIELDGENERATOR");
            
            draw_set_font(global.font_menuLarge);
            draw_set_color(c_white);
            draw_set_halign(fa_center);
            draw_set_valign(fa_center);
            
            draw_text( drawBossX1+((drawBossX2-drawBossX1)/2), drawBossY1+((drawBossY2-drawBossY1)/2), drawBossText);
        }
    }
    p++;
    playerInstanceNumber++;
}

//Dynamic Bounty
draw_set_halign(fa_right);
draw_set_valign(fa_center);
draw_set_font(global.font_numberLarge);
draw_set_color(c_white);
if (!global.pauseMenu) draw_set_alpha(main_hud_alpha);
else draw_set_alpha(1);

var dynamicBountyX = width*0.5;
var dynamicBountyY = -1*height*0.1;
var bountyString = string(global.score_total);
if (global.gameMode == gamemode_endless) bountyString = string(global.bountyEndless);

if (instance_exists(gui_dynamic_bounty))
{
    draw_sprite(gui_dynamic_bounty.sprite_index,gui_dynamic_bounty.image_index, dynamicBountyX+gui_dynamic_bounty.offsetX, dynamicBountyY+gui_dynamic_bounty.offsetY);
    draw_text(dynamicBountyX+gui_dynamic_bounty.offsetX+103, dynamicBountyY+gui_dynamic_bounty.offsetY+2, bountyString);
}

//Dynamic Relics
var dynamicRelicX1 = width*0.35;
var dynamicRelicX2 = width*0.5;
var dynamicRelicX3 = width*0.65;
var dynamicRelicY = height*1.1;

var offsetRelicSpriteX = -87;
var offsetRelicSpriteY = 2;
var offsetRelicStringX = 36;
var offsetRelicStringY = -8;
 
draw_set_alpha(main_hud_alpha);
draw_set_color(c_white);
draw_set_font(global.font_numberMedium);
draw_set_halign(fa_center);
draw_set_valign(fa_center);
var relicTextSep = 30;
var relicTextWidth = 132;

if (instance_exists(gui_dynamic_relic1)) 
{
    if (sprite_exists(gui_dynamic_relic1.sprite_index)) draw_sprite(gui_dynamic_relic1.sprite_index,gui_dynamic_relic1.image_index, dynamicRelicX1+gui_dynamic_relic1.offsetX, dynamicRelicY+gui_dynamic_relic1.offsetY); 
    if (sprite_exists(gui_dynamic_relic1.mySprite)) draw_sprite_ext(gui_dynamic_relic1.mySprite,0, (dynamicRelicX1 +gui_dynamic_relic1.offsetX +offsetRelicSpriteX), (dynamicRelicY +gui_dynamic_relic1.offsetY +offsetRelicSpriteY),1.5,1.5,0,c_white,main_hud_alpha); 
    draw_text_ext((dynamicRelicX1 +gui_dynamic_relic1.offsetX +offsetRelicStringX), (dynamicRelicY +gui_dynamic_relic1.offsetY +offsetRelicStringY), gui_dynamic_relic1.myString, relicTextSep, relicTextWidth );
}

if (instance_exists(gui_dynamic_relic2))
{
    if (sprite_exists(gui_dynamic_relic2.sprite_index)) draw_sprite(gui_dynamic_relic2.sprite_index,gui_dynamic_relic2.image_index, dynamicRelicX2+gui_dynamic_relic2.offsetX, dynamicRelicY+gui_dynamic_relic2.offsetY);
    if (sprite_exists(gui_dynamic_relic2.mySprite)) draw_sprite_ext(gui_dynamic_relic2.mySprite,0, (dynamicRelicX2 +gui_dynamic_relic2.offsetX +offsetRelicSpriteX), (dynamicRelicY +gui_dynamic_relic2.offsetY +offsetRelicSpriteY),1.5,1.5,0,c_white,main_hud_alpha);
    draw_text_ext((dynamicRelicX2 +gui_dynamic_relic2.offsetX +offsetRelicStringX), (dynamicRelicY +gui_dynamic_relic2.offsetY +offsetRelicStringY), gui_dynamic_relic2.myString, relicTextSep, relicTextWidth );
}

if (instance_exists(gui_dynamic_relic3)) 
{
    if (sprite_exists(gui_dynamic_relic3.sprite_index))  draw_sprite(gui_dynamic_relic3.sprite_index,gui_dynamic_relic3.image_index, dynamicRelicX3+gui_dynamic_relic3.offsetX, dynamicRelicY+gui_dynamic_relic3.offsetY);
    if (sprite_exists(gui_dynamic_relic3.mySprite)) draw_sprite_ext(gui_dynamic_relic3.mySprite,0, (dynamicRelicX3 +gui_dynamic_relic3.offsetX +offsetRelicSpriteX), (dynamicRelicY +gui_dynamic_relic3.offsetY +offsetRelicSpriteY),1.5,1.5,0,c_white,main_hud_alpha); 
    draw_text_ext((dynamicRelicX3 +gui_dynamic_relic3.offsetX +offsetRelicStringX), (dynamicRelicY +gui_dynamic_relic3.offsetY +offsetRelicStringY), gui_dynamic_relic3.myString, relicTextSep, relicTextWidth );
}

//Show Challenges on Pause Menu
if (global.pauseMenu) &amp;&amp; (global.gameMode == gamemode_endless)
{
    if (ds_exists(global.challengeList,ds_type_list))
    {
        var chIconX = width*0.02;
        var chX = width*0.035;
        var chY = height*0.57;
        var chSpacing = 48;
        var chSpacingCurrent = 0;
        
        draw_set_font(global.font_numberLarge);
        draw_set_valign(fa_center);
        draw_set_halign(fa_left);
        draw_set_color(c_white);
    
        var listSize = ds_list_size(global.challengeList);
        if (listSize) for (var i=listSize-1; i&gt;=0; i--){
            var challenge = ds_list_find_value(global.challengeList,i);
            
            var chSprite = spr_challengeUnique;
            if (challenge == "CHALLENGE_STEROIDS") || (challenge == "CHALLENGE_WANTED") || (challenge == "CHALLENGE_HIGHTECH") || (challenge == "CHALLENGE_REINFORCEMENTS")
            {
                    chSprite = spr_challengeCommon;
            }
            
            var timerCount = '';
            if (chSprite == spr_challengeUnique)
            {
                switch (challenge)
                {
                    case "CHALLENGE_HUNGER" : timerCount = global.challengeHungerTimer; break;
                    case "CHALLENGE_THIRST" : timerCount = global.challengeThirstTimer; break;
                    case "CHALLENGE_OVERCHARGE" : timerCount = global.challengeOverchargeTimer; break;
                    case "CHALLENGE_MEDIEVAL" : timerCount = global.challengeMedievalTimer; break;
                    case "CHALLENGE_CATAPULT" : timerCount = global.challengeCatapultTimer; break;
                    case "CHALLENGE_DUCANWEAPONS" : timerCount = global.challengeDucanWeaponsTimer; break;
                    case "CHALLENGE_HEAVYBURDEN" : timerCount = global.challengeHeavyBurdenTimer; break;
                    case "CHALLENGE_SUPRESSOR" : timerCount = global.challengeSupressorTimer; break;
                    case "CHALLENGE_BLOODLUST" : timerCount = global.challengeBloodlustTimer; break;
                    case "CHALLENGE_JAWS" : timerCount = global.challengeJawsTimer; break;
                    case "CHALLENGE_COUNTDOWN" : timerCount = global.challengeCountdownTimer; break;
                    case "CHALLENGE_HUNTED" : timerCount = global.challengeHuntedTimer; break;
                    case "CHALLENGE_HAUNTED" : timerCount = global.challengeHauntedTimer; break;
                    case "CHALLENGE_LIGHTFOCUS" : timerCount = global.challengeLightFocusTimer; break;
                    case "CHALLENGE_MEDIUMFOCUS" : timerCount = global.challengeMediumFocusTimer; break;
                    case "CHALLENGE_HEAVYFOCUS" : timerCount = global.challengeHeavyFocusTimer; break;
                }
            }
            
            var drawChallengeText = loc_key(challenge);
            if (timerCount != '') drawChallengeText += ( ' (' + string(timerCount) + ')' );
            
            draw_sprite(chSprite,0,chIconX,chY+chSpacingCurrent);
            draw_text(chX,chY+chSpacingCurrent, drawChallengeText);
            chSpacingCurrent += chSpacing;
        }
    }
}

///Draw Game Over
if (global.gameOver)
{
    draw_set_alpha(1);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_font(global.font_numberVeryLarge);
    var gameOverMagenta = make_colour_rgb(204,10,68);
            
    var gameOverX = width*0.5;
    var gameOverY = height*0.42;
    if (!global.isDaily) draw_text_dropoutline_ext_transformed(gameOverX,gameOverY,loc_key("HUD_GAMEOVER"),gameOverMagenta,gameOverMagenta,c_black,0.6,4,1,1,0,1);
            
    draw_set_font(global.font_numberMedium);
    gameOverY2 = height*0.5;
    gameOverY3 = height*0.55;
            
    var gameOverString1, gameOverString2
            
    if (global.input[1] == K_INPUT_KEYBOARD) 
    {
        gameOverString1 = loc_key("HUD_GAMEOVER_RETRY");
        gameOverString2 = loc_key("HUD_GAMEOVER_MENU");
    }
    else
    {
        gameOverString1 = loc_key("HUD_GAMEOVER_RETRY_JOY");
        gameOverString2 = loc_key("HUD_GAMEOVER_MENU_JOY");
    }
            
    if (!global.isDaily) draw_text_dropoutline_ext_transformed(gameOverX,gameOverY2,gameOverString1,c_white,c_white,c_black,0.6,4,1,1,0,1);
    if (!global.isDaily) draw_text_dropoutline_ext_transformed(gameOverX,gameOverY3,gameOverString2,c_white,c_white,c_black,0.6,4,1,1,0,1);
    
    //Endless Stats
    if (global.gameMode == gamemode_endless)
    {
        ///Daily Endless Game Over HUD
        if (global.isDaily)
        {
            var badgeY = height*0.36;
            
            if (global.dailyPlayers != -1) &amp;&amp; (global.dailyRankDebug != -1)
            {
                var percentString = "";
                var rankString = loc_key("DAILY_RANK_UNRANKED");
                switch (global.dailyBadge)
                {
                    case 2 :
                        percentString = " (TOP 70%)";
                        rankString = loc_key("DAILY_RANK_BRONZE");
                        break;
                    case 3 :
                        percentString = " (TOP 50%)";
                        rankString = loc_key("DAILY_RANK_SILVER");
                        break;
                    case 4 :
                        percentString = " (TOP 30%)";
                        rankString = loc_key("DAILY_RANK_GOLD");
                        break;
                    case 5 : 
                        percentString = " (TOP 15%)";
                        rankString = loc_key("DAILY_RANK_PLATINUM");
                        break;
                    case 6 :
                        percentString = " (TOP 10%)";
                        rankString = loc_key("DAILY_RANK_DIAMOND");
                        break;
                    case 7 :
                        percentString = " (TOP 5%)";
                        rankString = loc_key("DAILY_RANK_MASTER");
                        break;
                }
                
                
                if (instance_exists(gui_badgeLoading)) with (gui_badgeLoading) { instance_destroy(); } 
                draw_sprite_ext(spr_badgeDaily,global.dailyBadge,gameOverX,badgeY,2,2,0,c_white,1);
                
                var endlessString1 = rankString;
                var endlessString2 = loc_key("HUD_ENDLESS_SCORE") + ": " + string(global.scoreEndless) + percentString;
                var endlessString3 = string(global.dailyPlayers) + " " + loc_key("DAILY_PLAYERS");
                var endlessString4 = 'YOUR POSITION: ' + string(global.dailyRankDebug);
                
                var endlessY1 = height*0.44;
                var endlessY2 = height*0.48;
                var endlessY3 = height*0.52;
                var endlessY4 = height*0.56;
                
                draw_set_font(global.font_numberMedium);
                draw_text_dropoutline_ext_transformed(gameOverX,endlessY1,endlessString1,c_white,c_white,c_black,0.6,4,1.5,1.5,0,1);
                draw_text_dropoutline_ext_transformed(gameOverX,endlessY2,endlessString2,c_white,c_white,c_black,0.6,4,1,1,0,1);
                draw_text_dropoutline_ext_transformed(gameOverX,endlessY3,endlessString3,c_white,c_white,c_black,0.6,4,1,1,0,1);
                //DEBUG ONLY: draw_text_dropoutline_ext_transformed(gameOverX,endlessY4,endlessString4,c_white,c_white,c_black,0.6,4,1,1,0,1);
            }
            else 
            {
                //Loading messages
                if (!instance_exists(gui_badgeLoading)) instance_create(0,0,gui_badgeLoading);
                else{
                    var loading = instance_find(gui_badgeLoading,0);
                    draw_sprite_ext(loading.sprite_index,loading.image_index,gameOverX,badgeY,2,2,0,c_white,1);
                 } 
                draw_text_dropoutline_ext_transformed(gameOverX,height*0.44,loc_key("DAILY_CONNECTING"),c_white,c_white,c_black,0.6,4,1,1,0,1);
                draw_text_dropoutline_ext_transformed(gameOverX,height*0.48,loc_key("DAILY_CONNECTING2"),c_white,c_white,c_black,0.6,4,1,1,0,1);
            }
        }
        else{
            ///Regular Endless Game Over HUD
            var endlessY1 = height*0.26;
            var endlessY2 = height*0.30;
            var endlessY3 = height*0.34;
            var endlessString1 = loc_key("HUD_ENDLESS_SCORE") + ": " + string(global.scoreEndless);
            var endlessString2 = loc_key("HUD_LOOP") + ": " + string(global.currentLoop);
            
            var myTime = global.statRunTime;
            var myTimeMinutes = myTime div 60;
            var myTimeSeconds = myTime mod 60;
            var myTimeString = string(myTimeMinutes) + 'm ' + string(myTimeSeconds);
            
            var endlessString3 = loc_key("HUD_ENDLESS_TIME") + ": " + myTimeString;
            
            draw_set_font(global.font_numberMedium);
            draw_text_dropoutline_ext_transformed(gameOverX,endlessY1,endlessString1,c_white,c_white,c_black,0.6,4,1,1,0,1);
            draw_text_dropoutline_ext_transformed(gameOverX,endlessY2,endlessString2,c_white,c_white,c_black,0.6,4,1,1,0,1);
            draw_text_dropoutline_ext_transformed(gameOverX,endlessY3,endlessString3,c_white,c_white,c_black,0.6,4,1,1,0,1);
        }
    }
    
    //Gameplay Hints
    if (gameOverHint != '')
    {
        var hintBoxWidth = 740;
        var hintBoxHeight = 80;
        var hintVOffset = 15;
        var hintY = height*0.7;
        var hintString = loc_key("TIPS_TITLE") + ": " + gameOverHint;
        
        draw_set_colour(c_white);
        draw_rectangle(gameOverX-(hintBoxWidth/2), hintY-(hintBoxHeight/2)+hintVOffset, gameOverX+(hintBoxWidth/2), hintY+(hintBoxHeight/2)+hintVOffset,false);
        draw_set_font(global.font_numberSmall);
        draw_set_colour(K_BETU_RED);
        
        draw_text_ext(gameOverX, hintY, hintString, 24, 720);
    }
}

///Draw Low Performance Window Pop Up
if (instance_exists(gui_info_lowPerformance)) 
{
    draw_set_alpha(0.5);
    draw_set_color(c_black);
    draw_rectangle(view_xview[0],view_yview[0],view_xview[0]+view_xport[0],view_yview[0]+view_yport[0],false);
    
    draw_set_alpha(1);
    draw_set_color(c_white);
    
    var rectangleWidth = width*0.5;
    var rectangleHeight = height*0.2;
    var rectX = width * 0.5;
    var rectY = height * 0.5;
    
    draw_rectangle(rectX-(rectangleWidth/2), rectY-(rectangleHeight/2),rectX+(rectangleWidth/2), rectY+(rectangleHeight/2),false);
    
    var textSpacing = 52;
    draw_set_colour(K_BETU_MAGENTA_PAUSE);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_set_font(global.font_menuMedium);
    
    draw_text(rectX,rectY-textSpacing,loc_key("SETTINGS_LOWPERF1"));
    draw_set_colour(c_black);
    draw_text(rectX,rectY,loc_key("SETTINGS_LOWPERF2"));
    draw_set_colour(K_BETU_MAGENTA_PAUSE);
    
    draw_set_font(global.font_menuLarge);
    draw_text(rectX,rectY+textSpacing,loc_key("SETTINGS_LOWPERF3"));
}




draw_set_alpha(1);
surface_reset_target();
var surfaceXScale = window_get_width()/1920;
var surfaceYScale = window_get_height()/1080;

if (global.gameOver){ //Game Over Base Overlay
    draw_set_alpha(0.42);
    draw_set_colour(c_black);
    draw_rectangle(0,0,width,height,false);
    draw_set_alpha(1);
}
if (surface_exists(guiSurface)) draw_surface_ext(guiSurface, 0, 0, surfaceXScale, surfaceYScale, 0, c_white, 1);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fullscreen Effects


//Red Flash On Damage
if instance_exists(class_player)
{
    if (class_player.hit_taken) &amp;&amp; (!class_player.shield)
    {
        draw_set_alpha(0.3);
        draw_rectangle_colour(0,0,window_get_width(),window_get_height(),c_red,c_red,c_red,c_red,false);
        draw_set_alpha(1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///FPS, Autoaim, Low Performance Check
draw_set_halign(fa_right);
draw_set_valign(fa_center);
draw_set_color(c_white);
draw_set_font(global.font_numberSmall);

//Draw FPS if it is low!
if ((fps/room_speed) &lt; 0.9) 
{
    draw_text(window_get_width()*0.99, window_get_height()*0.95, "FPS " + string(fps) + '/' + string(room_speed) );
    
    ///Low Performance Check
    if (!global.lowPerfChecked)
    {
        if (global.lowPerfTimeCurrent &lt; global.lowPerfTime) global.lowPerfTimeCurrent++;
        else
        {
            global.persistent_toggle = false;
            //global.reflections_toggle = false;
            //global.shadows_toggle = false;
            
            instance_create(0,0,gui_info_lowPerformance);
            
            global.lowPerfChecked = true;
            
            draw_texture_flush();
        }
    }
    
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cutscene Bars Draw

if (!global.cutscene)
{
    cutscene_bars_position -= cutscene_bars_exit_speed;
}
else if (cutscene_bars_position &lt; cutscene_bars_positionStart)
{
    cutscene_bars_position += min(cutscene_bars_exit_speed, (cutscene_bars_positionStart-cutscene_bars_position));
}

if (cutscene_bars_position &gt; 0) &amp;&amp; (!global.pauseMenu)
{
    draw_set_colour(c_black);
    draw_rectangle(0,0,window_get_width(),window_get_height()*cutscene_bars_position,false);
    draw_rectangle(0,window_get_height()*(1-cutscene_bars_position),window_get_width(),window_get_height(),false);
    
    if (main_hud_alpha &gt; 0) main_hud_alpha-=0.15;
    else main_hud_alpha = 0;
}
else
{
    cutscene_bars_position = 0;
    
    if (main_hud_alpha &lt; 1) main_hud_alpha+=0.15;
    else main_hud_alpha = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug for Pathfinding

if (global.drawGridDebug)
{
    //show_debug_message('Trying to draw the grid!');
    draw_set_alpha(0.5);
    mp_grid_draw(global.astar_grid);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Crosshair

if (!global.pauseMenu) &amp;&amp; (!global.gameOver) &amp;&amp; (instance_exists(class_player))
{   
    var pCount = instance_number(class_player);
    for (var i=0; i&lt;pCount; i++)
    {
        pCur = instance_find(class_player,i);
        if (pCur) &amp;&amp; (instance_exists(pCur))
        {
            var drawCrosshair = true;
            
            var crossSprite = noone;
            var p = pCur.myPlayerId;
            
            if (p==1) crossSprite = spr_crosshair;
            if (p==2) crossSprite = spr_crosshair2;
            
            if collision_circle(global.crosshairX[p],global.crosshairY[p],5,class_enemy,false,true) crosshair_image = 1;
            else crosshair_image = 0;
                
            if (global.input[p] != K_INPUT_KEYBOARD)
            {
                if (pCur.aiming) drawCrosshair = false;
                if (!pCur.joyIsRightStickAiming) drawCrosshair = false;
            }
            
            if instance_exists(pCur.myGun)
            {
                if (pCur.myGun.reloading)
                {
                    var subImage = (pCur.myGun.reload_time_current/pCur.myGun.reload_time)*12; //12=animation frames;
                        
                    if (drawCrosshair)
                    {
                        draw_sprite_ext(crossSprite,3,global.crosshairX[p],global.crosshairY[p],global.crosshair_scale[p],global.crosshair_scale[p],0,c_white,1);
                        draw_sprite_ext(spr_crosshair_reload,subImage,global.crosshairX[p],global.crosshairY[p],1.6,1.6,0,c_white,1);
                    }
                    drawCrosshair = false;
                }
            }
            
            if (global.auto_aim == K_AUTOAIM_FULL) &amp;&amp; (pCur.joyAimLocked) drawCrosshair = true; //Force draw on auto-aim
            
            if (drawCrosshair) draw_sprite_ext(crossSprite,crosshair_image,global.crosshairX[p],global.crosshairY[p],global.crosshair_scale[p],global.crosshair_scale[p],0,c_white,1);
            
            if global.crosshair_scale[p] &gt; 1
            {
                global.crosshair_scale[p] -= 0.05;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Edge Tracking Enemies

if (ds_exists(global.edgeTrackEnemyList,ds_type_list)) &amp;&amp; (!global.pauseMenu) &amp;&amp; (!global.gameOver) &amp;&amp; (instance_exists(class_player))
{
    if (!ds_list_empty(global.edgeTrackEnemyList)) 
    {
        for (var i=0; i&lt;ds_list_size(global.edgeTrackEnemyList); i++)
        {
            var trackee = ds_list_find_value(global.edgeTrackEnemyList,i);
            if (instance_exists(trackee))
            {
                var trackX, trackY;
                
                if (trackee.x &gt;= view_xview[0]) trackX = min(view_xview[0]+view_wview[0], trackee.x);
                else trackX = max(view_xview[0], trackee.x);
                
                if (trackee.y &gt;= view_yview[0]) trackY = min(view_yview[0]+view_hview[0], trackee.y);
                else trackY = max(view_yview[0], trackee.y);
                
                var trackDir = point_direction(trackX, trackY, trackee.x, trackee.y);
                
                draw_sprite_ext(spr_edgeTrackEnemy,0,trackX,trackY,0.5,0.5,trackDir,c_white,1);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
