<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>class_interactive_master</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

weaponLevel = 0;

range = 130;
in_range = false;
if sprite_exists(sprite_index) sprite = sprite_index;
gun = noone;
gun_ammo_current = 99999;
active = false;

myPrompt = instance_create(x+10,y-25,fx_prompt_e);
myPrompt.owner = id;

name = "I AM ERROR";
myWeaponInfo = instance_create(x,y,fx_info_pickup);
myWeaponInfo.owner = id;

depth=-y-5;
image_speed = 0;

reflection_object_setup(25,-1,image_index);

on_top_of_object = false;
image_speed = 0;

wantToActivate = false;
activationClient = noone;

sprite = sprite_index;

arrowAnimation = 0; 
arrowAnimationSpeed = 0.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pick Up

if instance_exists(activationClient) 
{
    var p = activationClient.myPlayerId;
    
    if (point_distance(x,y,activationClient.x,activationClient.y) &lt;= range) in_range = true;
    
    var forbiddenWeapon = false;
    if (gun == obj_gloves &amp;&amp; global.character[p] != char_pinky) || 
    (gun == obj_pistol_jimmy &amp;&amp; global.character[p] != char_jimmy) || 
    (gun == obj_flamethrower &amp;&amp; global.character[p] != char_punny) || 
    (gun == obj_buckler &amp;&amp; global.character[p] != char_biu) ||
    (gun == obj_keytar &amp;&amp; global.character[p] != char_raff)
    {
        forbiddenWeapon = true;
    }

    if (!forbiddenWeapon) &amp;&amp; (wantToActivate) &amp;&amp; (in_range)
    {
        global.hasPickedWeapon = true; //Achievement purposes
    
        activationClient.play_sound_pickup_weapon = true;
    
        if (activationClient.weapon2 == noone)
        {
            activationClient.weapon2 = instance_create(activationClient.x,activationClient.y,gun);
            activationClient.weapon2.owner = activationClient.id;
            activationClient.weapon2.weaponLevel = weaponLevel;
            with (activationClient)
            {
                draw_gun(weapon2);
            }
    
            instance_destroy();
            exit;
        }
    
        //Gloves Special Rules
        if (activationClient.myGun == obj_gloves)
        {
            if activationClient.weapon1 == obj_gloves
            {
                new_pickup = instance_create(x,y,obj_pickup_gloves);
                new_pickup.weaponLevel = activationClient.weapon1.weaponLevel;
                with (obj_gloves)
                {
                    instance_destroy();
                }
                
                activationClient.weapon1 = instance_create(activationClient.x,activationClient.y,gun);
                activationClient.weapon1.owner = activationClient.id;
                activationClient.weapon1.weaponLevel = weaponLevel;
                with (activationClient)
                {
                    draw_gun(weapon1);
                }
                activationClient.weapon1.ammo_current = gun_ammo_current;
                
                instance_destroy();
                exit;
            }
            if activationClient.weapon2 == obj_gloves
            {
                new_pickup = instance_create(x,y,obj_pickup_gloves);
                new_pickup.weaponLevel = activationClient.weapon2.weaponLevel;
                with (obj_gloves)
                {
                    instance_destroy();
                }
                
                activationClient.weapon2 = instance_create(activationClient.x,activationClient.y,gun);
                activationClient.weapon2.owner = activationClient.id;
                activationClient.weapon2.weaponLevel = weaponLevel;
                with (activationClient)
                {
                    draw_gun(weapon2);
                }
                activationClient.weapon2.ammo_current = gun_ammo_current;
                
                instance_destroy();
                exit;
            }   
        }
        
        //Buckler Special Rules
        if (activationClient.myGun == obj_buckler)
        {
            if activationClient.weapon1 == obj_buckler
            {
                new_pickup = instance_create(x,y,obj_pickup_buckler);
                new_pickup.weaponLevel = activationClient.weapon1.weaponLevel;
                with (obj_buckler)
                {
                    instance_destroy();
                }
                
                activationClient.weapon1 = instance_create(activationClient.x,activationClient.y,gun);
                activationClient.weapon1.owner = activationClient.id;
                activationClient.weapon1.weaponLevel = weaponLevel;
                with (activationClient)
                {
                    draw_gun(weapon1);
                }
                activationClient.weapon1.ammo_current = gun_ammo_current;
                
                instance_destroy();
                exit;
            }
            if activationClient.weapon2 == obj_buckler
            {
                new_pickup = instance_create(x,y,obj_pickup_buckler);
                new_pickup.weaponLevel = activationClient.weapon2.weaponLevel;
                with (obj_buckler)
                {
                    instance_destroy();
                }
                
                activationClient.weapon2 = instance_create(activationClient.x,activationClient.y,gun);
                activationClient.weapon2.owner = activationClient.id;
                activationClient.weapon2.weaponLevel = weaponLevel;
                with (activationClient)
                {
                    draw_gun(weapon2);
                }
                activationClient.weapon2.ammo_current = gun_ammo_current;
                
                instance_destroy();
                exit;
            }   
        }
        
        if activationClient.myGun == activationClient.weapon1
        {
            new_pickup = instance_create(x,y,class_pickup_weapon);
            new_pickup.gun = activationClient.weapon1.object;
            new_pickup.gun_ammo_current = activationClient.weapon1.ammo_current;
            new_pickup.sprite = activationClient.weapon1.sprite_index;
            new_pickup.weaponLevel = activationClient.weapon1.weaponLevel;
            new_pickup.name = activationClient.weapon1.name;
            
            with(activationClient.weapon1)
            {
                instance_destroy();
            }
            
            if (gun != obj_gloves) &amp;&amp; (gun != obj_buckler) 
            {
                activationClient.weapon1 = instance_create(activationClient.x,activationClient.y,gun);
                activationClient.weapon1.owner = activationClient.id;
                activationClient.weapon1.weaponLevel = weaponLevel;
                with (activationClient)
                {
                    draw_gun(weapon1);
                }
                activationClient.weapon1.ammo_current = gun_ammo_current;
            }
            else if (gun == obj_gloves)
            {
                instance_create(activationClient.x,activationClient.y,obj_gloves);
                activationClient.weapon1 = obj_gloves;
                activationClient.weapon1.owner = activationClient.id;
                activationClient.weapon1.weaponLevel = weaponLevel;
                with (activationClient)
                {
                    draw_gun(weapon1);
                }
            }
            else if (gun == obj_buckler)
            {
                instance_create(activationClient.x,activationClient.y,obj_buckler);
                activationClient.weapon1 = obj_buckler;
                activationClient.weapon1.owner = activationClient.id;
                activationClient.weapon1.weaponLevel = weaponLevel;
                with (activationClient)
                {
                    draw_gun(weapon1);
                }
            }
            
            instance_destroy();
            exit;
        }
        
        if activationClient.myGun == activationClient.weapon2
        {
            new_pickup = instance_create(x,y,class_pickup_weapon);
            new_pickup.gun = activationClient.weapon2.object;
            new_pickup.gun_ammo_current = activationClient.weapon2.ammo_current;
            new_pickup.sprite = activationClient.weapon2.sprite_index;
            new_pickup.weaponLevel = activationClient.weapon2.weaponLevel;
            new_pickup.name = activationClient.weapon2.name;
            
            with(activationClient.weapon2)
            {
                instance_destroy();
            }
            
            if (gun != obj_gloves) &amp;&amp; (gun != obj_buckler) 
            {
                activationClient.weapon2 = instance_create(activationClient.x,activationClient.y,gun);
                activationClient.weapon2.owner = activationClient.id;
                activationClient.weapon2.weaponLevel = weaponLevel;
                with (activationClient)
                {
                    draw_gun(weapon2);
                }
                activationClient.weapon2.ammo_current = gun_ammo_current;
            }
            else if (gun == obj_gloves)
            {
                instance_create(activationClient.x,activationClient.y,obj_gloves);
                activationClient.weapon2 = obj_gloves;
                activationClient.weapon2.owner = activationClient.id;
                activationClient.weapon2.weaponLevel = weaponLevel;
                with (activationClient)
                {
                    draw_gun(weapon2);
                }
            }
            else if (gun == obj_buckler)
            {
                instance_create(activationClient.x,activationClient.y,obj_buckler);
                activationClient.weapon2 = obj_buckler;
                activationClient.weapon2.owner = activationClient.id;
                activationClient.weapon2.weaponLevel = weaponLevel;
                with (activationClient)
                {
                    draw_gun(weapon2);
                }
            }
            
            instance_destroy();
            exit;
        }
    }
}
else{ 
        wantToActivate = false; 
        in_range = false; 
        activationClient = noone;
    }


//Betu Gozano
if (!on_top_of_object)
{
    myObject = collision_point(x,y,obj_wall,false,true);
    if (instance_exists(myObject)) on_top_of_object = true;
}

if (on_top_of_object)
{
    if (!instance_exists(myObject))
    {
        y+=32;
        on_top_of_object = false;
    }
}

if (in_range) image_index = 1;
else image_index = 0;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Adjusment
sprite_index = sprite;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Arrow Feedback

if (sprite_exists(sprite_index)) draw_self();

arrowAnimation += arrowAnimationSpeed;
if (!in_range) &amp;&amp; (room!=room_start) draw_sprite_ext(spr_fx_weaponGround,arrowAnimation,x+8,y-4,1.5,1.5,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
