<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>class_interactive_master</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup

event_inherited();

image_speed = 0.2;
sprite_index = spr_terminalClear;

range = 150;
in_range = false;

myNumber = 0;
myChallenge = "";

allowNewChallenge = true;

price = 0;
priceTier = global.endPriceTier_hack;
priceArray = global.endPrice_hackCommon;

myPrompt = instance_create(x-44,y-21,fx_prompt_e);
myPrompt.owner = id;

name = "I AM ERROR";
myInfo = instance_create(x,y,fx_info_pickup);
myInfo.owner = id;

depth = -y-32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interaction

event_inherited();

if instance_exists(activationClient)
{   
    if (point_distance(x,y,activationClient.x,activationClient.y) &lt;= range) in_range = true;    
    
    if (wantToActivate) &amp;&amp; (in_range) &amp;&amp; (myChallenge != "")
    {
        if (global.bountyEndless &gt;= price)
        {
                wantToActivate = false;
                global.bountyEndless -= price;
                priceTier++; 
                global.endPriceTier_hack = priceTier;
                
                
                //Stats and Achievements
                global.statTotalHacks++;
                global.hacksOnThisRun++;
                global.hasPurchasedAnything = true;
                if (global.hacksOnThisRun == 3) achievement_give("ACHIEVEMENT_SAE_3");
                
                steam_set_stat_int("STAT_TOTAL_HACKS", steam_get_stat_int("STAT_TOTAL_HACKS") + 1  );
                if (steam_get_stat_int("STAT_TOTAL_HACKS") &gt;= 200) achievement_give("ACHIEVEMENT_SAE_200");
                
                //Remove the challenge
                var challengePos = ds_list_find_index(global.challengeList,myChallenge);
                if (challengePos &gt;= 0){
                    ds_list_delete(global.challengeList,challengePos);
                    switch (myChallenge){
                        case "CHALLENGE_HUNGER" : global.challengeHunger = false; break;
                        case "CHALLENGE_THIRST" : global.challengeThirst = false; break;
                        case "CHALLENGE_OVERCHARGE" : global.challengeOvercharge = false; break;
                        case "CHALLENGE_MEDIEVAL" : global.challengeMedieval = false; break;
                        case "CHALLENGE_SUPRESSOR" : global.challengeSupressor = false; break;
                        case "CHALLENGE_CATAPULT" : global.challengeCatapult = false; break;
                        case "CHALLENGE_DUCANWEAPONS" : global.challengeDucanWeapons = false; break;
                        case "CHALLENGE_JAWS" : global.challengeJaws = false; break;
                        case "CHALLENGE_BLOODLUST" : global.challengeBloodlust = false; break;
                        case "CHALLENGE_HEAVYBURDEN" : global.challengeHeavyBurden = false; break;
                        
                        case "CHALLENGE_HUNTED" : global.challengeHunted = false; break;
                        case "CHALLENGE_HAUNTED" : global.challengeHaunted = false; break;
                        
                        case "CHALLENGE_STEROIDS" : global.challengeSteroids -= (min(1,global.challengeSteroids)); break;
                        case "CHALLENGE_WANTED" : global.challengeWanted -= (min(1,global.challengeWanted)); break;
                        case "CHALLENGE_HIGHTECH" : global.challengeHighTech -= (min(1,global.challengeHighTech)); break;
                        case "CHALLENGE_LIGHTFOCUS" : global.challengeLightFocus -= (min(1,global.challengeLightFocus)); break;
                        case "CHALLENGE_MEDIUMFOCUS" : global.challengeMediumFocus -= (min(1,global.challengeMediumFocus)); break;
                        case "CHALLENGE_HEAVYFOCUS" : global.challengeHeavyFocus -= (min(1,global.challengeHeavyFocus)); break;
                    }
                }
                
                myChallenge = "";
                sprite_index = spr_terminalClear;

                guiInfo = instance_create(activationClient.x,activationClient.y,gui_info);
                guiInfo.myString = loc_key("SAE_INFO_HACKED");;
                guiInfo.colorMain = c_white;
                guiInfo.owner = activationClient;
                audio_play(activationClient.audio_emitter,false,1,sfx_buy);
                if (instance_exists(obj_sae)) if (instance_exists(obj_sae.myBalloon)) obj_sae.myBalloon.upgradeTalk = true;
        }
        else{
                guiInfo = instance_create(activationClient.x,activationClient.y,gui_info);
                guiInfo.myString = loc_key("INFO_NOTENOUGHBOUNTY");;
                guiInfo.colorMain = K_BETU_RED;
                guiInfo.owner = activationClient;
                audio_play(activationClient.audio_emitter, false, 1, sfx_pickup_full); 
        }    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Find my challenge / Update price
event_inherited();

if (allowNewChallenge){
    var listSize = ds_list_size(global.challengeList);
    
    if (listSize &gt; myNumber) {
        myChallenge = ds_list_find_value(global.challengeList,(listSize-1-myNumber) );
                
        sprite_index = spr_terminalChallengeUnique;
        if (myChallenge == "CHALLENGE_STEROIDS") || (myChallenge == "CHALLENGE_WANTED") || (myChallenge == "CHALLENGE_REINFORCEMENTS") || (myChallenge == "CHALLENGE_HIGHTECH")
        {
            sprite_index = spr_terminalChallengeCommon;
        }     
        allowNewChallenge = false;   
    }
}

///Set my price

if (myChallenge != "") {
    if (sprite_index == spr_terminalChallengeCommon) priceArray = global.endPrice_hackCommon;
    else priceArray = global.endPrice_hackUnique;

    priceTier = global.endPriceTier_hack;
    price = priceArray [ min(priceTier,9) ];
    
    if (myChallenge == "CHALLENGE_HUNTED") price = global.endPrice_hackHunted;
    if (myChallenge == "CHALLENGE_HAUNTED") price = global.endPrice_hackHaunted;
    
    name = loc_key("SAE_INFO_REMOVE") + " " + loc_key(myChallenge);
}
else{
    price = 0;
    name = loc_key("SAE_TERMINAL_CLEAR");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

var terminalImage = 0;
if (in_range) terminalImage = 1;
draw_sprite(spr_terminal,terminalImage,x,y);

if (sprite_exists(sprite_index)) draw_self();

draw_sprite(spr_priceTag,0,x,y+50);

if (price){
    draw_set_font(global.font_shopPrice);
    draw_set_halign(fa_left);
    draw_set_valign(fa_center);
        
    var myColor = c_white;
    if (global.bountyEndless &lt; price) myColor = K_BETU_RED;
        
    draw_text_outline(x-4,y+62,string(price),myColor);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
