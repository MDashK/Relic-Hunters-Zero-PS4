<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_jimmy_holo</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>class_interactive_master</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init + Check For Dead Players
event_inherited();

range = 100;
in_range = false;

price = 0;
priceTier = global.endPriceTier_revive;
priceArray = global.endPrice_revive;

active = false;
charToSpawn = noone;
idToSpawn = -1;
image_speed = 0.2;

myPrompt = instance_create(x-42,y+38,fx_prompt_e);
myPrompt.owner = id;

depth=-y-2;

//Find Dead Player
var p = 1;

while (p &lt;= global.playerCount){
    if (!global.playerAlive[p]){
        if (global.character[p] == char_jimmy) { charToSpawn = obj_jimmy; sprite_index = spr_jimmy_holo; }
        else if (global.character[p] == char_pinky) { charToSpawn = obj_pinky; sprite_index = spr_pinky_holo; }
        else if (global.character[p] == char_raff) { charToSpawn = obj_raff; sprite_index = spr_raff_holo; }
        else if (global.character[p] == char_biu) { charToSpawn = obj_biu; sprite_index = spr_biu_holo; }
        else if (global.character[p] == char_punny) { charToSpawn = obj_punny; sprite_index = spr_punny_holo; }
        else if (global.character[p] == char_ass) { charToSpawn = obj_assPlayer; sprite_index = spr_ass_holo; }
        else if (global.character[p] == char_rider) { charToSpawn = obj_rider; sprite_index = spr_rider_holo; }
        
        if (charToSpawn != noone) idToSpawn = p;
    }
    p++;
}


//Activation Toggle
if (charToSpawn != noone) &amp;&amp; (idToSpawn != -1) active = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Interact
event_inherited();

price = priceArray [ min(priceTier,9) ];

if instance_exists(activationClient) &amp;&amp; (active) &amp;&amp; (price){
    if (point_distance(x,y,activationClient.x,activationClient.y) &lt;= range) in_range = true;
    
    if (wantToActivate) &amp;&amp; (in_range) &amp;&amp; (idToSpawn) &amp;&amp; (charToSpawn  != noone) {
        if (global.bountyEndless &gt;= price){
        
            global.bountyEndless -= price;
            global.endPriceTier_revive++;
            audio_play(activationClient.audio_emitter, false, 1, sfx_buy);
            global.hasPurchasedAnything = true;
            
            var playerSpawned = instance_create(x,y,charToSpawn);
            playerSpawned.myPlayerId = idToSpawn;
                    
            global.playerAlive[idToSpawn] = true;
            global.weapon1[idToSpawn] = noone;
            global.weapon2[idToSpawn] = noone;
            global.weapon1Level[idToSpawn] = 0;
            global.weapon2Level[idToSpawn] = 0;
            global.hp[idToSpawn] = 999999;
            global.overshield[idToSpawn] = 0;
            global.currentlyEquippedWeapon[idToSpawn] = 0;
            global.grenades[idToSpawn] = 0;
            
            with (playerSpawned) event_perform(ev_other,ev_user0);
                    
            global.ammo_light[idToSpawn] = global.reviveAmmoLight;
            global.ammo_medium[idToSpawn] = global.reviveAmmoMedium;
            global.ammo_heavy[idToSpawn] = global.reviveAmmoHeavy;
            
            instance_destroy();
        }
        else{
            guiInfo = instance_create(activationClient.x,activationClient.y,gui_info);
            guiInfo.myString = loc_key("INFO_NOTENOUGHBOUNTY");;
            guiInfo.colorMain = K_BETU_RED;
            guiInfo.owner = activationClient;
            audio_play(activationClient.audio_emitter, false, 1, sfx_pickup_full);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
if (active) {
    draw_self();
    
    draw_sprite(spr_priceTag,0,x,y+16);

    
    draw_set_font(global.font_shopPrice);
    draw_set_halign(fa_left);
    draw_set_valign(fa_center);
        
    var myColor = c_white;
    if (global.bountyEndless &lt; price) myColor = K_BETU_RED;
        
    draw_text_outline(x-4,y+28,string(price),myColor);
       
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
