<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Stuff

isAvailable = true;
labelString = 'MISSING LABEL';
allowConsoleSelection = true;
myFont = global.font_menuMedium;

myVariable = -99;
myVariableMax = -99;
parentButton = noone;
myMinusButton = noone;
myPlusButton = noone;

image_speed = 0;

isSelected = false;
allowMultipleSelection = false;
selectionOrderVertical = 0;
selectionOrderHorizontal = 0;

executeAction = false;
joyCanSwitch[K_INPUT_JOYSTICK1] = true;
joyCanSwitch[K_INPUT_JOYSTICK2] = true;

starPositionX = point_distance(x,y,bbox_right,y) - 32;
starPositionY = 0;

starScaleInitial = 1.5;
starScale = starScaleInitial;
starScaleSpeed = 0.025;
starScaleFinal = 1;

audioSelectionPlayed = false;

//Grid Position for Console
buttonGridX = 0;
buttonGridY = 0;
isToggle = false;

keyboardShortcut = -1;
joystickShortcut[K_INPUT_JOYSTICK1] = -1;
joystickShortcut[K_INPUT_JOYSTICK2] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Toggle Button Draw Hack

if (instance_exists(myMinusButton)) &amp;&amp; (instance_exists(myPlusButton))
{
    if (myMinusButton.isSelected) isSelected = true;
    if (myPlusButton.isSelected) isSelected = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Plus &amp; Minus Buttons

if (myVariable != -99)
{
    if (myVariable &lt; 0) myVariable = 0;
    if (myVariable &gt; myVariableMax) myVariable = myVariableMax;
    
    if (myMinusButton == noone)
    {
        myMinusButton = instance_nearest(x,y,menu_btn_minus);
        myMinusButton.parentButton = id;
    }
    
     if (myPlusButton == noone)
    {
        myPlusButton = instance_nearest(x,y,menu_btn_plus);
        myPlusButton.parentButton = id;
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Use and Mouse Selection
//Joystick selection is done via controller_menuButtons

if (global.mouseActive) &amp;&amp; (!global.selectionLocked[K_INPUT_KEYBOARD])
{
    var mouseInput = K_INPUT_ALL;
    if (global.allowMultipleInput) mouseInput = K_INPUT_KEYBOARD;
    
    if (is_mouse_over(id))
    {
        if (isSelected = false || allowMultipleSelection) global.selectedButton[mouseInput] = id;
    }
    else if (global.selectedButton[mouseInput] == id) global.selectedButton[mouseInput] = -1;
}


if (global.selectedButton[K_INPUT_ALL] == id) || (global.selectedButton[K_INPUT_KEYBOARD] == id) || (global.selectedButton[K_INPUT_JOYSTICK1] == id) || (global.selectedButton[K_INPUT_JOYSTICK2] == id) isSelected = true;
else isSelected = false;

if (isSelected) &amp;&amp; (isAvailable)
{
    var triggerMyAction = false;

    if (global.selectedButton[K_INPUT_ALL] == id)
    {
        if (mouse_check_button_pressed(mb_left)) || (joy_check(K_INPUT_JOYSTICK1,1)) || (joy_check(K_INPUT_JOYSTICK2,1))
        {
            triggerMyAction = true;
        }
    }
    
    if (global.selectedButton[K_INPUT_KEYBOARD] == id) &amp;&amp; (mouse_check_button_pressed(mb_left)) triggerMyAction = true;
    if (global.selectedButton[K_INPUT_JOYSTICK1] == id) &amp;&amp; (joy_check(K_INPUT_JOYSTICK1,1)) triggerMyAction = true;
    if (global.selectedButton[K_INPUT_JOYSTICK2] == id) &amp;&amp; (joy_check(K_INPUT_JOYSTICK2,1)) triggerMyAction = true;
    
    if (triggerMyAction) //Resolve
    {
        executeAction = true;
        if (!audio_is_playing(sfx_menu_click)) audio_play_sound(sfx_menu_click,1,false);
    }
}

// Shortcut Keys
checkShortcut[K_INPUT_KEYBOARD] = false;
checkShortcut[K_INPUT_JOYSTICK1] = false;
checkShortcut[K_INPUT_JOYSTICK2] = false;

if (keyboardShortcut != -1) if (keyboard_check_pressed(keyboardShortcut)) checkShortcut[K_INPUT_KEYBOARD] = true;
if (joystickShortcut[K_INPUT_JOYSTICK1] != -1) if (joy_check_pressed(K_INPUT_JOYSTICK1,joystickShortcut[K_INPUT_JOYSTICK1])) checkShortcut[K_INPUT_JOYSTICK1] = true; 
if (joystickShortcut[K_INPUT_JOYSTICK2] != -1) if (joy_check_pressed(K_INPUT_JOYSTICK2,joystickShortcut[K_INPUT_JOYSTICK2])) checkShortcut[K_INPUT_JOYSTICK2] = true; 


if (isAvailable)
{
    var shortcutActivated = false;
    
    if (checkShortcut[K_INPUT_KEYBOARD])
    {
        checkShortcut[K_INPUT_KEYBOARD] = false;
        global.selectedButton[K_INPUT_KEYBOARD] = id;
        shortcutActivated = true;
    }
    
    if (checkShortcut[K_INPUT_JOYSTICK1])
    {
        checkShortcut[K_INPUT_JOYSTICK1] = false;
        global.selectedButton[K_INPUT_JOYSTICK1] = id;
        shortcutActivated = true;
    }
    
    if (checkShortcut[K_INPUT_JOYSTICK2])
    {
        checkShortcut[K_INPUT_JOYSTICK2] = false;
        global.selectedButton[K_INPUT_JOYSTICK2] = id;
        shortcutActivated = true;
    }
    
    if (shortcutActivated)
    {
        isSelected = true;
        executeAction = true;
        if (!audio_is_playing(sfx_menu_click)) audio_play_sound(sfx_menu_click,1,false);
    }
}


// Star Movement &amp; Audio
if (isSelected)
{
    if (!audioSelectionPlayed)
    {
        audio_play_sound(sfx_menu_mouse,1,false);
        audioSelectionPlayed = true;
    }
    if (starScale &gt; starScaleFinal) starScale -= min( starScaleSpeed, abs(starScale-starScaleFinal) );
}
else
{
    audioSelectionPlayed = false;
    starScale = starScaleInitial;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Event

if (!isAvailable) draw_set_alpha(0.5);

if (isSelected) image_index = 0;
else image_index = 1;

draw_self();

draw_set_font(myFont);
draw_set_halign(fa_center);
draw_set_valign(fa_center);

if (!isSelected) draw_set_colour(c_white);
else draw_set_colour(make_colour_rgb(239,4,68));

if (labelString != '') draw_text(x,y,labelString);

draw_set_alpha(1);

if (isSelected) draw_sprite_ext(spr_menu_star,0,x+starPositionX,y+starPositionY,starScale,starScale,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
