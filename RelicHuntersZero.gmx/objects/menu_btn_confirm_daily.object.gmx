<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_menu_button</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>class_menu_button</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button Config

event_inherited();


//Don't let people play twice!
if (global.dailyCompleted == string(current_day)+string(current_month)+string(current_year)) isAvailable = false;
else isAvailable = true;


labelString = loc_key("DAILY_PLAY");

dailyString1 = loc_key("DAILY_MENU_TEXT");
dailyString2 = loc_key("DAILY_MENU_TEXT2");
dailyString3 = loc_key("DAILY_MENU_TEXT3");
dailyString4 = loc_key("DAILY_MENU_TEXT4");
dailyString5 = loc_key("DAILY_MENU_TEXT5");

dailyString6 = loc_key("DAILY_MENU_TEXT6");
dailyString7 = loc_key("DAILY_MENU_TEXT7");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Button Action
event_inherited();

if (isAvailable)
{
    if (global.selectedButton[K_INPUT_KEYBOARD] == id)  { global.input[1] = K_INPUT_KEYBOARD; show_debug_message('Setting player input to KEYBOARD');}
    if (global.selectedButton[K_INPUT_JOYSTICK1] == id) { global.input[1] = K_INPUT_JOYSTICK1; show_debug_message('Setting player input to JOY1');}
    if (global.selectedButton[K_INPUT_JOYSTICK2] == id) { global.input[1] = K_INPUT_JOYSTICK2; show_debug_message('Setting player input to JOY2');}
        
    if (executeAction)
    {
        global.isDaily = true;
        global.gameMode = gamemode_endless;
        global.dailySeed = current_day+current_month+current_year;
        random_set_seed(global.dailySeed);
       
        var randomList = ds_list_create();
        ds_list_add(randomList,char_jimmy);
        ds_list_add(randomList,char_pinky);
        ds_list_add(randomList,char_raff);
        ds_list_add(randomList,char_punny);
        ds_list_add(randomList,char_rider);
        ds_list_add(randomList,char_ass);
        
        var randomPick = irandom_range(0,ds_list_size(randomList)-1);
        global.character[1] = ds_list_find_value(randomList, randomPick);
        global.character[2] = noone;
        ds_list_destroy(randomList);
    
        if (global.mouseActive)  { global.input[1] = K_INPUT_KEYBOARD; show_debug_message('Setting player input to KEYBOARD');}
        else { global.input[1] = K_INPUT_JOYSTICK1; show_debug_message('Setting player input to JOY1');}
        
        ini_open("saveData.ini");
        
        ini_write_real('Input','Input1',global.input[1]);
        ini_write_real('Character','Character1',global.character[1]);
        ini_write_real('Character','Character2',global.character[2]);
        ini_write_real('Temp','isDaily',true);
        ini_close();
        
         //start daily
         instance_create(x,y,controller_main); // This runs the "Create" event of the controller_main before going into level1_1. No time to go by the required Globals and refactoring the code right now =(
         room_goto(level1_1);
         executeAction=false;
    }
}
else{
    if (!instance_exists(controller_steamAsync)) instance_create(x,y,controller_steamAsync);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw All The Fun Stuff

var oldAlpha = draw_get_alpha();
draw_set_alpha(0.5);
draw_set_color(c_black);
draw_rectangle(0,0,display_get_width(),display_get_height(),false);

draw_set_alpha(oldAlpha);
event_inherited();

if (isAvailable)
{
    draw_set_valign(fa_center);
    draw_set_halign(fa_center);
    draw_set_font(global.font_menuLarge);
    draw_set_color(make_colour_rgb(255,16,11));
    draw_text_ext(x,y-196,dailyString1,32,720);
    draw_set_color(c_white);
    draw_set_valign(fa_top);
    draw_text_ext(x,y-165,dailyString2,32,1200);
    draw_text_ext(x,y-130,dailyString3,32,1200);
    draw_text_ext(x,y-95,dailyString4,32,1200);
    draw_text_ext(x,y-60,dailyString5,32,1200);
}
else
{
    if (instance_exists(controller_steamAsync))
    {
        ///Daily Endless Game Over HUD
        var badgeY = y-400;
                
        if (global.dailyPlayers != -1) &amp;&amp; (global.dailyRankDebug != -1)
        {
            var percentString = "";
            var rankString = loc_key("DAILY_RANK_UNRANKED");
            switch (global.dailyBadge)
            {
                case 2 :
                    percentString = " (TOP 70%)";
                    rankString = loc_key("DAILY_RANK_BRONZE");
                    break;
                case 3 :
                    percentString = " (TOP 50%)";
                    rankString = loc_key("DAILY_RANK_SILVER");
                    break;
                case 4 :
                    percentString = " (TOP 30%)";
                    rankString = loc_key("DAILY_RANK_GOLD");
                    break;
                case 5 : 
                    percentString = " (TOP 15%)";
                    rankString = loc_key("DAILY_RANK_PLATINUM");
                    break;
                case 6 :
                    percentString = " (TOP 10%)";
                    rankString = loc_key("DAILY_RANK_DIAMOND");
                    break;
                case 7 :
                    percentString = " (TOP 5%)";
                    rankString = loc_key("DAILY_RANK_MASTER");
                    break;
            }
                    
                    
            if (instance_exists(gui_badgeLoading)) with (gui_badgeLoading) { instance_destroy(); } 
            draw_sprite_ext(spr_badgeDaily,global.dailyBadge,x,badgeY,2,2,0,c_white,1);
                    
            var endlessString1 = rankString;
            var endlessString2 = loc_key("HUD_ENDLESS_SCORE") + ": " + string(global.scoreEndless) + percentString;
            var endlessString3 = string(global.dailyPlayers) + " " + loc_key("DAILY_PLAYERS");
            var endlessString4 = 'YOUR POSITION: ' + string(global.dailyRankDebug);
                    
            var endlessY1 = y-328;
            var endlessY2 = y-288;
            var endlessY3 = y-256;
            var endlessY4 = y-224;
                    
            draw_set_font(global.font_numberMedium);
            draw_text_dropoutline_ext_transformed(x,endlessY1,endlessString1,c_white,c_white,c_black,0.6,4,1.5,1.5,0,1);
            draw_text_dropoutline_ext_transformed(x,endlessY2,endlessString2,c_white,c_white,c_black,0.6,4,1,1,0,1);
            draw_text_dropoutline_ext_transformed(x,endlessY3,endlessString3,c_white,c_white,c_black,0.6,4,1,1,0,1);
            //DEBUG ONLY: draw_text_dropoutline_ext_transformed(x,endlessY4,endlessString4,c_white,c_white,c_black,0.6,4,1,1,0,1);
        }
        else 
        {
            //Loading messages
            if (!instance_exists(gui_badgeLoading)) instance_create(0,0,gui_badgeLoading);
            else{
                var loading = instance_find(gui_badgeLoading,0);
                draw_sprite_ext(loading.sprite_index,loading.image_index,x,badgeY,2,2,0,c_white,1);
            } 
            draw_text_dropoutline_ext_transformed(x,y-320,loc_key("DAILY_CONNECTING"),c_white,c_white,c_black,0.6,4,1,1,0,1);
            draw_text_dropoutline_ext_transformed(x,y-300,loc_key("DAILY_CONNECTING2"),c_white,c_white,c_black,0.6,4,1,1,0,1);
        }
    }
    draw_set_color(c_white);
    draw_set_font(global.font_menuLarge);
    draw_text_ext(x,y-95,dailyString6,32,1200);
    draw_text_ext(x,y-60,dailyString7,32,1200);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
