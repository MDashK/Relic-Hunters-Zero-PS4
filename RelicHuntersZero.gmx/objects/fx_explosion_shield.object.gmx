<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Variables

radiusStart = 12;
radiusFinal = 122;

radiusAccel = 0.3;
radiusSpeedMax = 8;
radiusSpeed = 0;

radius = radiusStart;

radiusAlpha = 1;
radiusAlphaSpeed = 0.025;

damage = 100;
push_power = 32;

damage_list = ds_list_create();
hit_list = ds_list_create();


image_speed_unpaused = image_speed;
want_to_pause = false;

screen_shaken = false;


audio_emitter = audio_emitter_create();
audio_emitter_falloff(audio_emitter, global.falloffMediumDist, global.falloffMediumMax, global.falloffMediumFactor);
audio_emitter_gain(audio_emitter,global.soundVolume);

audio_play(audio_emitter, false, 99, sfx_shield_destroy);

//Test
global.shock_enabled = true;
global.shock_positionX = x;
global.shock_positionY = y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Expand Radius
{
    if (radiusSpeed &lt; radiusSpeedMax) radiusSpeed += min ( radiusAccel, (radiusSpeedMax-radiusSpeed));

    if (radius &lt; radiusFinal) radius += min(radiusSpeed, (radiusFinal-radius) );
    else {
        audio_emitter_free(audio_emitter);
        instance_destroy();
    }
    radiusAlpha -= radiusAlphaSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage

if (damage)
{    
    var poor_guy = collision_circle(x,y,radiusFinal,class_enemy,false,true);

    if (poor_guy)
    {
        if (ds_list_find_index(damage_list,poor_guy) &lt; 0) &amp;&amp; (poor_guy.isVulnerable)
        {
            ds_list_add(damage_list,poor_guy);
            
            if (poor_guy.shield)
            {
                if damage &gt; poor_guy.energy
                {
                    damage -= poor_guy.energy;
                    poor_guy.energy = 0;
                    poor_guy.hp -= damage;

                    repeat(10) 
                    {
                        blood = instance_create(poor_guy.x,poor_guy.y,fx_blood);
                        blood.vertical_speed_start = random_range(5,10);
                        blood.speed = random_range(5,9);
                    }
                }
                else poor_guy.energy -= damage;
            }
            else 
            {
                poor_guy.hp -= damage;
                repeat(10) 
                {
                    blood = instance_create(poor_guy.x,poor_guy.y,fx_blood);
                    blood.vertical_speed_start = random_range(5,10);
                    blood.speed = random_range(5,9);
                }
            }
            
            if (poor_guy.hp &lt;= 0) want_to_pause = true;
            poor_guy.hit_taken = true;
            
            poor_guy.pushed = true;
            poor_guy.push_direction = point_direction(x,y,poor_guy.x,poor_guy.y);
            poor_guy.push_speed = push_power;
        }
    }
    
    poor_object = collision_circle(x,y,radiusFinal,obj_wall,false,true);
    if instance_exists(poor_object) &amp;&amp; (ds_list_find_index(damage_list,poor_object) &lt; 0)
    {
        ds_list_add(damage_list,poor_object);
        poor_object.hp -= damage*2;
        poor_object.shake_direction = irandom(360);
        poor_object.shake += 4;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio
audio_emitter_position(audio_emitter, x, y, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause-Controlled Animation

if (want_to_pause)
{
    if (global.allowKillFreeze) global.pause = room_speed*0.07;
    want_to_pause = false;
}


if (!screen_shaken)
{
    add_screen_shake(40,0,true);
    screen_shaken = true;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_set_colour(c_red);
    depth = -999999;
    draw_set_colour(K_BETU_RED);
    draw_set_alpha(radiusAlpha);
    draw_rectangle(x-radius-1,y-radius-1,x+radius+1,y+radius+1,true);
    draw_rectangle(x-radius,y-radius,x+radius,y+radius,true);
    draw_rectangle(x-radius+1,y-radius+1,x+radius-1,y+radius-1,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>88,110</point>
    <point>87,87</point>
  </PhysicsShapePoints>
</object>
