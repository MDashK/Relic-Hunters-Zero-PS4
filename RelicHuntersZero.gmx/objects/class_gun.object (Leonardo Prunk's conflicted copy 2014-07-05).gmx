<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Shit
owner = noone;
isActive = true;

shake_amount = 0;

ammo_type = 'pistol';
ammo = 999;
ammo_current = ammo;
reloading = false;
reload_time = room_speed*2.5;
reload_time_current = 0;

fire_automatic = false;
fire_amount = 1;
fire_burst = 1;
fire_burst_current = 0;
fire_burst_rate = room_speed*0.1;
fire_burst_rate_current = 0;
fire_rate = room_speed*0.1;
fire_rate_current = 0;
can_fire = true;

accuracy = 5;
accuracy_aiming = 0.5;

projectile_speed = 0;
projectile_speed_decay = 0;
projectile_damage = 0;
projectile_range = 0;
projectile_power = 5;

crosshair_recoil = 0.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Follow Owner Position
if instance_exists(owner)
{
    x = owner.x;
    y = owner.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.pause</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation and Rotation

if instance_exists(owner)
{

    if !owner.sprinting 
    {
        image_angle = point_direction(x,y,mouse_x,mouse_y);
    
        if owner.look_direction == 0 { image_xscale = -1; image_angle = image_angle+180; }
        if owner.look_direction == 1 image_xscale = 1; 
    }
    else
    {
        if (owner.move_direction &gt; 90 &amp;&amp; owner.move_direction &lt;= 270) { image_angle = 45; image_xscale = -1}
        else { image_angle = -45; image_xscale = 1; }
    }
        
        
    depth = (owner.depth)-1;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ammo
if ((!ammo_current) || keyboard_check_pressed(ord('R'))) &amp;&amp; (!reloading) &amp;&amp; (ammo_current &lt; ammo) &amp;&amp; instance_exists(owner)
{
    ammo_diff = (ammo - ammo_current);
    
    if (ammo_type = 'pistol' &amp;&amp; owner.stored_pistol) || (ammo_type = 'machinegun' &amp;&amp; owner.stored_machinegun) || (ammo_type = 'shotgun' &amp;&amp; owner.stored_shotgun) || (ammo_type = 'rifle' &amp;&amp; owner.stored_rifle)
    {
        if (ammo_type = 'pistol')
        {
            ammo_diff = min(ammo_diff,owner.stored_pistol);
            owner.stored_pistol -= ammo_diff;
        }
        if (ammo_type = 'machinegun') 
        {
            ammo_diff = min(ammo_diff,owner.stored_machinegun);
            owner.stored_machinegun -= ammo_diff;
        }
        if (ammo_type = 'shotgun')
        {
            ammo_diff = min(ammo_diff,owner.stored_shotgun);
            owner.stored_shotgun -= ammo_diff;
        }
        if (ammo_type = 'rifle')
        {
            ammo_diff = min(ammo_diff,owner.stored_rifle);
            owner.stored_rifle -= ammo_diff;
        }
        
        reloading = true;
    }
}

if (reloading)
{
    reload_time_current++;
    if reload_time_current &gt;= reload_time
    {
        reload_time_current = 0;
        reloading = false;
        ammo_current += ammo_diff;
    }
}

if ammo_current &gt; ammo ammo_current = ammo;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Firing Control

shot_type = 0;
if collision_circle(mouse_x,mouse_y,15,class_enemy,false,true) shot_type = 1;
if collision_circle(mouse_x,mouse_y,2.5,class_weakspot,false,true) shot_type = 2;
if (owner.serendipity) shot_type = 2;

if mouse_check_button(mb_left) &amp;&amp; (fire_automatic)
{
    if instance_exists(owner) &amp;&amp; (!reloading) &amp;&amp; (can_fire)
    {
        if owner.sprinting = false    
        {
            cmd_fire();
        }
    }
}

if mouse_check_button_pressed(mb_left) &amp;&amp; (!fire_automatic)
{
    if instance_exists(owner) &amp;&amp; (!reloading) &amp;&amp; (can_fire)
    {
        if owner.sprinting = false    
        {
            cmd_fire();
        }
    }
}

//Rate of Fire
if (!can_fire)
{
    fire_rate_current++;
    if fire_rate_current &gt;= fire_rate
    {
        fire_rate_current = 0;
        fire_burst_current = 0;
        can_fire = true;
    }
}

//Burst Fire
if fire_burst_current &lt; fire_burst &amp;&amp; (!can_fire)
{
    fire_burst_rate_current++;
    if fire_burst_rate_current &gt;= fire_burst_rate
    {
        fire_burst_rate_current = 0;
        cmd_fire();
    }   
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
if (!instance_exists(owner)) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weapon Switch

if (!isActive)
{
    instance_deactivate_object(id);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Draw
draw_self();

if (reloading) image_blend = c_gray;
else image_blend = c_white;

// Laser Aim
if instance_exists(owner)
{
    if (owner.aiming)
    {
        lineX = x;
        lineY = y;
        
        aiming_direction = point_direction(x,y,mouse_x,mouse_y);
        aimingX = x+lengthdir_x(projectile_range,aiming_direction);
        aimingY = y+lengthdir_y(projectile_range,aiming_direction);
        
        directionX = aimingX-lineX;
        directionY = aimingY-lineY;
         
        line_distance = point_distance(0,0,directionX,directionY) ;
        
        if line_distance &gt; 0
        {
            directionX /= line_distance;
            directionY /= line_distance;
            
            for(i=0 i&lt;line_distance i++)
            {
                if collision_point(lineX,lineY,class_solid,1,1) break;
                if collision_point(lineX,lineY,class_enemy,1,1) break;
                
                lineX+=directionX
                lineY+=directionY
            }
            
            draw_line_width_colour(x,y,lineX,lineY,3,c_red,c_red);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
