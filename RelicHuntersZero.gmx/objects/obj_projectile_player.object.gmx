<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bullet</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999999</depth>
  <persistent>0</persistent>
  <parentName>class_projectile</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="4" ename="class_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy Collision
if faction == f_player &amp;&amp; instance_exists(other)
{
    spreadX = irandom_range(-15,15);
    spreadY = irandom_range(-15,15);
        
    if (!other.dodging) &amp;&amp; (ds_list_find_index(damage_list,other.id) &lt; 0)
    {
        ds_list_add(damage_list,other.id);
        
        if (global.relic_midnight_beer == 2) damage += round(damage*global.midnightDamageMultiplier ); //Midnight Beer
        if (global.relic_midnight_meal == 2) damage += round(damage*global.midnightDamageMultiplier ); //Midnight Meal
        
        other.aggro += other.aggro_add_hit;
        
        isPrecise = false;
        var originalDamage = damage;
        
        if (other.shield)
        {
            if (distance_travelled &gt; range) damage = round(damage/3);
            if (global.challengeSupressor) damage = damage*2;
            other.energy -= damage;
            if (other.energy &lt;= 0) audio_play_exclusive(other.audio_emitter,false,1,sfx_shield_destroy);
            else audio_play_exclusive(other.audio_emitter,false,1,sfx_shield_hit1,sfx_shield_hit2);
        }
        else 
        {
            if (allowPrecision)
            {
                var otherBBoxCenter = get_bbox_center(other.id);
                var precisionAngle = angle_precision(x,y,otherBBoxCenter[0],otherBBoxCenter[1],direction);
                var angleToTarget = point_direction(x,y,otherBBoxCenter[0],otherBBoxCenter[1]);
                if  (precisionAngle != -1) &amp;&amp; (precisionAngle &lt;= global.precisionAngle) isPrecise = true;
                else isPrecise = false;
                
                if (isPrecise) damage = damage*1.5;
                //if (isPrecise) damage = precisionDamage;
            }
                
            if (distance_travelled &gt; range) damage = round(damage/3);
            other.hp -= damage;
            
            audio_play(audio_emitter,false,1,sfx_impact_flesh1,sfx_impact_flesh2,sfx_impact_flesh3,sfx_impact_flesh4);
        }
        other.hit_taken = true;
        
        other.pushed = true;
        other.push_direction = direction;
        other.push_speed += push_power;
        
        bloodAmount = round(damage/15);
        
        if (other.hp) &lt;= 0 
        {
            bloodAmount += 10;
        
            if (isPrecise)
            {
                other.critical_death = true;
                bloodAmount += 40;
            }
        }
        
        bloodAmount = min(bloodAmount, (global.max_casings-global.count_casings) );
        if (bloodAmount) &amp;&amp; (global.max_casings) repeat(bloodAmount) blood = instance_create(x,y,fx_blood);
        
        damageEffect = instance_create(other.x+spreadX,other.y+spreadY,fx_damage);
        if (isPrecise) &amp;&amp; (!other.shield) damageEffect.critical = true;
        damageEffect.damage = damage;
        
        if (global.count_particles &lt; global.max_particles)
        {
            hit = instance_create(x,y,fx_hit);
            hit.type = ammo_type;
        }
        
        if (piercing) &amp;&amp; (other.hp &lt;= 0) piercing--;
        else if (bounce) &amp;&amp; (bounceMax &gt; bounceCurrent) projectile_bounce();
        else if (!isBouncing)
        {
            ds_list_add(global.audio_cleaner,audio_emitter);
            instance_destroy();
        }
            
        damage = originalDamage;
    }
    
    if (other.dodging) &amp;&amp; (ds_list_find_index(damage_list,other.id) &lt; 0)
    {
        ds_list_add(damage_list,other.id);
        damageEffect = instance_create(other.x+spreadX,other.y+spreadY,fx_damage);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="class_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Friendly Fire
if (global.friendlyFire)
{
    if (instance_exists(other)) &amp;&amp; (instance_exists(owner))
    {
        if (other.myPlayerId != owner.myPlayerId)
        {
            ffDamage = round(damage * global.friendlyFireDamageRatio);
            
            spreadX = irandom_range(-15,15);
            spreadY = irandom_range(-15,15);
                
            if (!other.dodging)
            {
                ds_list_add(damage_list,other.id);
                
                if (global.relic_midnight_beer == 2) ffDamage += round(ffDamage*global.midnightDamageMultiplier ); //Midnight Beer
                if (global.relic_midnight_meal == 2) ffDamage += round(ffDamage*global.midnightDamageMultiplier ); //Midnight Meal
                
                if (other.shield)
                {
                    if (distance_travelled &gt; range) ffDamage = ffDamage/3;
                    other.energy -= ffDamage;
                    audio_play_exclusive(other.audio_emitter,false,1,sfx_shield_hit1,sfx_shield_hit2);
                    if (other.energy &lt;= 0) audio_play_exclusive(other.audio_emitter,false,1,sfx_shield_destroy);
                }
                else
                {
                    if (distance_travelled &gt; range) ffDamage = round(damage/3);
                    other.hp -= ffDamage;
                    audio_play(other.audio_emitter,false,1,sfx_impact_flesh1,sfx_impact_flesh2,sfx_impact_flesh3,sfx_impact_flesh4);
                    
                    bloodAmount = min(round(ffDamage/5), (global.max_casings-global.count_casings), 5);
                    if (bloodAmount) repeat(bloodAmount) blood = instance_create(x,y,fx_blood);
                    
                    if (other.hp &lt;= 0) achievement_give("ACHIEVEMENT_TEAMKILL");
                }
                other.hit_taken = true;
                
                
                damage_fx = instance_create(other.x+spreadX,other.y+spreadY,fx_damage);
                damage_fx.damage = ffDamage;
        
                ds_list_add(global.audio_cleaner,audio_emitter);
                if (!instance_exists(hit)) &amp;&amp; (global.count_particles &lt; global.max_particles)
                {
                    hit = instance_create(x,y,fx_hit);
                    hit.type = ammo_type;
                }
                instance_destroy();
            }
            
            if (other.dodging) &amp;&amp; (ds_list_find_index(damage_list,other.id) &lt; 0)
            {
                ds_list_add(damage_list,other.id);
                damageEffect = instance_create(other.x+spreadX,other.y+spreadY,fx_damage);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>18,17</point>
    <point>18,18</point>
  </PhysicsShapePoints>
</object>
