<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>class_weapon</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
event_inherited();

isMeleeWeapon = true;

damage = 0;
meleeDamage = 160;
meleeStepSpeed = 25;
maxHits = 5;
pushPower = 15;

name = loc_key("WPNAME_GLOVES");
owner = noone;
isActive = true;
object = obj_gloves;

weaponLevel = 0;
storeOriginalDamage = -1;
storeOriginalName = '';

ammo_type = type_light;
ammo_cost = 1;
ammo = 0;
ammo_current = ammo;

animationIdle = spr_gloves_idle;
animationWalk = spr_gloves_walk;
animationSprint = spr_gloves_sprint;
animationDash = spr_gloves_dash;
animationHit = spr_gloves_hit;
animationMelee = spr_gloves_melee;

meleeArcSprite = spr_melee_gloves;



drawX = x;
drawY = y;

reflection_object_setup(0,-1,image_index);

//Sound
//(Modders, these are just variations. You can repeat the same sound in all variables if you want to)
swingSound1 = sfx_gloves1;
swingSound2 = sfx_gloves2;
swingSound3 = sfx_gloves3;
swingSound4 = sfx_gloves4;
swingSound5 = sfx_gloves5;
swingSound6 = sfx_gloves6;
swingSound7 = sfx_gloves7;


//Keep these variables in just for consistency within weapons
reloading = false;
reload_time = room_speed*2.5;
reload_time_current = 0;

fire_automatic = false;
fire_amount = 1;
fire_burst = 1;
fire_burst_current = 0;
fire_burst_rate = room_speed*0.1;
fire_burst_rate_current = 0;
fire_rate = room_speed*0.1;
fire_rate_current = 0;
can_fire = true;

projectile_speed = 0;
projectile_speed_decay = 0;
projectile_recoil = 4;
projectile_damage = meleeDamage;
projectile_range = 0;
projectile_power = 5;
projectile_piercing = 0;
crosshair_recoil = 0.25;

recoil_speed = 0;
recoil_return = 1.25;
recoil_current = 0;
recoil_max = 7;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weapon Level
if (instance_exists(owner)){
    if (!storeOriginalDamage) || (storeOriginalName == '') {

        weaponLevelBonus[0] = 0;
        weaponLevelBonus[1] = 0.25*meleeDamage;
        weaponLevelBonus[2] = 0.5*meleeDamage;
        weaponLevelBonus[3] = 0.75*meleeDamage;
        weaponLevelBonus[4] = 1.0*meleeDamage;
        weaponLevelBonus[5] = 1.25*meleeDamage;
        weaponLevelBonus[6] = 1.5*meleeDamage;
        weaponLevelBonus[7] = 1.75*meleeDamage;
        weaponLevelBonus[8] = 2*meleeDamage;
        weaponLevelBonus[9] = 3*meleeDamage;
        
        storeOriginalDamage = meleeDamage;
        storeOriginalName = name;
    }
    else {
        meleeDamage = round(storeOriginalDamage + weaponLevelBonus[weaponLevel]);
        if (weaponLevel) name = storeOriginalName + ' +' + string(weaponLevel);
        
        damage = owner.melee_damage + meleeDamage;
        projectile_damage = damage;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation &amp; Movement

if instance_exists(owner)
{
    x = owner.x;
    y = owner.y;
    
    if (owner.animation_current == 'idle')      sprite_index = animationIdle;
    if (owner.animation_current == 'walk')      sprite_index = animationWalk;
    if (owner.animation_current == 'sprint')    sprite_index = animationSprint;
    if (owner.animation_current == 'dash')      sprite_index = animationDash;
    if (owner.animation_current == 'hit')       sprite_index = animationHit;
    if (owner.animation_current == 'melee')     sprite_index = animationMelee;
    
    image_speed = owner.animation_speed;
    image_xscale = owner.image_xscale;
    depth = owner.depth-1;
}
else instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Camera Distance When Zoomed
if (isActive) &amp;&amp; instance_exists(controller_camera)
{
    controller_camera.weaponRange = 500;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw if not digging
if (isActive) &amp;&amp; (owner) &amp;&amp; instance_exists(owner)
{
    if (!owner.isDigging) &amp;&amp; (owner.animation_current != 'dig') draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>57,76</point>
    <point>57,57</point>
  </PhysicsShapePoints>
</object>
