<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>class_weapon</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
event_inherited();

isMeleeWeapon = false;

owner = noone;
name = "I AM ERROR";
object = obj_pistol;
isActive = true;
lineX = x;
lineY = y;

weaponLevel = 0;
storeOriginalDamage = -1;
storeOriginalName = '';

allowPrecision = true;

shake_amount = 0;

ammo_type = type_light;
ammo_cost = 1;
ammo = 999;
ammo_current = ammo;
ammoCostDebuff = false;

ammo_regen_time = global.devPotionRegenTime;
ammo_regen_time_current = 0;
ammo_regen_amount = 1;

reloading = false;
reload_time = room_speed*2.5;
reload_time_current = 0;

fire_automatic = false;
fire_amount = 1;
fire_burst = 1;
fire_burst_current = 0;
fire_burst_rate = room_speed*0.1;
fire_burst_rate_current = 0;
fire_rate = room_speed*0.1;
fire_rate_current = 0;
can_fire = true;

fireRateDecay = 0;
fireRateDecayRecovery = 0;
fireRateDecayMin = 0;
fireRateDecayMax = 0;
fireRateDecayCurrent = 0;

accuracy = 5;
accuracy_aiming = 0.5;

projectile_obj = obj_projectile_player;
projectile_speed = 0;
projectile_speed_decay = 0;
projectile_damage = 0;
projectile_range = 0;
projectile_power = 5;
projectile_recoil = 4;
projectile_piercing = 0;

projectileBounce = false;
projectileBouceMax = 1;

crosshair_recoil = 0.25;

spawn_distance_from_barrel = 24;

recoil_speed = 0;
recoil_return = 1.25;
recoil_current = 0;
recoil_max = 7;
drawX = x;
drawY = y;
draw_range = 0;

sound = 'pistol';

reflection_object_setup(30,-1,image_index);
image_speed = 0;

trigger_pressed = false;
dropCasing = true;

input_held = false;
input_pressed = false;

isPrecisionAiming = false;

weaponClass = 'undefined';

goesThroughWalls = false;
beamColor = c_purple;
beamThickness = 2;

joypadRumbleFactor = 0;

grenadeSpriteOverride = spr_grenadeNew;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Follow Owner Position
if instance_exists(owner)
{
    x = owner.x;
    if (isActive) y = owner.y-15;
    else y = owner.y-35;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Relic Buffs, Weapon Level &amp; Challenges

//Dev Potion
if (global.relic_dev_potion == 2)
{
    if ammo_current &lt; ammo
    {
        ammo_regen_time_current++;
        if ammo_regen_time_current &gt;= (ammo_regen_time*ammo_cost)
        {
            ammo_current += ammo_regen_amount;
            ammo_regen_time_current = 0;
        }
    }
    else ammo_regen_time_current = 0;
}

//Weapon Level
if (!storeOriginalDamage) || (storeOriginalName == '') {
    weaponLevelBonus[0] = 0;
    weaponLevelBonus[1] = 0.25*projectile_damage;
    weaponLevelBonus[2] = 0.5*projectile_damage;
    weaponLevelBonus[3] = 0.75*projectile_damage;
    weaponLevelBonus[4] = 1.0*projectile_damage;
    weaponLevelBonus[5] = 1.25*projectile_damage;
    weaponLevelBonus[6] = 1.5*projectile_damage;
    weaponLevelBonus[7] = 1.75*projectile_damage;
    weaponLevelBonus[8] = 2*projectile_damage;
    weaponLevelBonus[9] = 3*projectile_damage;
    
    storeOriginalDamage = projectile_damage;
    storeOriginalName = name;
}
else {
    projectile_damage = ceil(storeOriginalDamage + weaponLevelBonus[weaponLevel]);
    if (weaponLevel) name = storeOriginalName + ' +' + string(weaponLevel);
}

//Challenges

if global.challengeThirst &amp;&amp; (!ammoCostDebuff){
    ammo_cost += ammo_cost*global.challengeThirstMultiplier;
    ammoCostDebuff = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Owner Accuracy Update

if instance_exists(owner)
{
    if (isActive)
    {
        if (weaponClass == 'undefined') owner.base_accuracy = 1;
        if (weaponClass == 'pistol') owner.base_accuracy = owner.accPistol;
        if (weaponClass == 'machinegun') owner.base_accuracy = owner.accMachinegun;
        if (weaponClass == 'shotgun') owner.base_accuracy = owner.accShotgun;
        if (weaponClass == 'sniper') owner.base_accuracy = owner.accSniper;
        if (weaponClass == 'smg') owner.base_accuracy = owner.accSmg;
        if (weaponClass == 'rocket') owner.base_accuracy = owner.accRocket;
        if (weaponClass == 'rifle') owner.base_accuracy = owner.accRifle;
        
        //show_debug_message('I am a '+sound+' and my owner acc is '+string(owner.base_accuracy));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.pause</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation and Rotation

if instance_exists(owner)
{
    var p = owner.myPlayerId;
    
    if (isActive)
    {
        if (!owner.sprinting)
        {
            image_angle = point_direction(x,y,global.crosshairX[p],global.crosshairY[p]);
        
            if owner.look_direction == 0 { image_xscale = -1; image_angle = image_angle+180; }
            if owner.look_direction == 1 image_xscale = 1; 
        }
        else
        {
            if (owner.move_direction &gt; 90 &amp;&amp; owner.move_direction &lt;= 270) { image_angle = 45; image_xscale = -1}
            else { image_angle = -45; image_xscale = 1; }
        }
            
        if ((owner.melee) || (owner.throw)) &amp;&amp; (owner.animation_current == 'melee')
        {
            if (owner.animation_index &gt;= 0) &amp;&amp; (owner.animation_index &lt; 1)
            {
                x = owner.x-(5*owner.look_direction);
                y = owner.y-15;
                image_angle = 0;
            }
            if (owner.animation_index &gt;= 1) &amp;&amp; (owner.animation_index &lt; 2)
            {
                x = owner.x-(5*owner.look_direction);
                y = owner.y-15;
                image_angle = 25;
            }
            if (owner.animation_index &gt;= 2) &amp;&amp; (owner.animation_index &lt; 5)
            {
                x = owner.x-(10*owner.look_direction);
                y = owner.y-10;
                image_angle = 25;
            }
            if (owner.animation_index &gt;= 5)
            {
                x = owner.x+(38*owner.look_direction);
                y = owner.y-7;
                image_angle = 160;
            }
            
            if (owner.look_direction == 0)
            { 
                image_xscale = -1;
                if (image_angle = 160)  x = owner.x-38;
                image_angle = -image_angle;
            }
            else image_xscale = 1;
        }   
        
        depth = (owner.depth)-1;
    }
    else
    {
        if (owner.look_direction == 0) { image_angle = 225; image_xscale = -1}
        else { image_angle = 135; image_xscale = 1; }
        depth = (owner.depth)+1;
    }
}

//Adjust Gun Height for Rider

if (instance_exists(owner)) if (owner.myChar == char_rider){
    y -= 18;
}

//Recoil

recoil_current += recoil_speed;

if (recoil_current &gt; 0) recoil_speed -= recoil_return;
else
{
    recoil_current = 0;
    recoil_speed = 0;
}

if (recoil_current &gt; recoil_max) recoil_current = recoil_max;



drawX = x +lengthdir_x( (-1*image_xscale*recoil_current), image_angle );
drawY = y +lengthdir_y( (-1*image_xscale*recoil_current), image_angle );
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ammo
if (isActive)
{
    var input_reloading = false;

    if (instance_exists(owner))
    {
        if (owner.reloadKey) input_reloading = true;
    }

    if ( ((!ammo_current) &amp;&amp; !(global.relic_dev_potion == 2)) || (input_reloading) ) &amp;&amp; (!reloading) &amp;&amp; (ammo_current &lt; ammo) &amp;&amp; instance_exists(owner)
    {
        var p = owner.myPlayerId;
        
        var ammoTotal = 999;
        if (ammo_cost &gt; 0)
        {
            if (ammo_type == type_light) ammoTotal = floor(global.ammo_light[p]/ammo_cost);
            if (ammo_type == type_medium) ammoTotal = floor(global.ammo_medium[p]/ammo_cost);
            if (ammo_type == type_heavy) ammoTotal = floor(global.ammo_heavy[p]/ammo_cost);
            if (ammo_type == type_grenade) ammoTotal = floor(global.ammo_grenade[p]/ammo_cost);
        }
        
        if (ammoTotal)
        {
            ammo_diff = min(ammoTotal, (ammo - ammo_current));
            
            reloading = true;

            audio_play(owner.audio_emitter,false,1,sfx_reload_start);
            audio_play_exclusive(owner.audio_emitter,false,1,sfx_reload_loop1,sfx_reload_loop2,sfx_reload_loop3);
        }
    }
    
    if (reloading) &amp;&amp; instance_exists(owner)
    {
        var p = owner.myPlayerId;
        
        if (!owner.melee) reload_time_current++;
        
        if reload_time_current &gt;= reload_time
        {
            reload_time_current = 0;
            reloading = false;
            ammo_current += ammo_diff;
            
            if (ammo_type = type_light) global.ammo_light[p] -= ammo_diff*ammo_cost;
            if (ammo_type = type_medium) global.ammo_medium[p] -= ammo_diff*ammo_cost;
            if (ammo_type = type_heavy) global.ammo_heavy[p] -= ammo_diff*ammo_cost;
            if (ammo_type = type_grenade) global.ammo_grenade[p] -= ammo_diff*ammo_cost;
            
            if instance_exists(owner) audio_play(owner.audio_emitter,false,1,sfx_reload_end);
            if (audio_is_playing(sfx_reload_loop1)) audio_stop_sound(sfx_reload_loop1);
            if (audio_is_playing(sfx_reload_loop2)) audio_stop_sound(sfx_reload_loop2);
            if (audio_is_playing(sfx_reload_loop3)) audio_stop_sound(sfx_reload_loop3);
        }
    }
    
    if ammo_current &gt; ammo ammo_current = ammo;
}
else 
{
    reload_time_current = 0;
    reloading = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Aiming

if instance_exists(owner) &amp;&amp; (isActive)
{
    var p = owner.myPlayerId;
    if (owner.aiming) || (projectile_obj == obj_projectile_beam) 
    {
        aiming_direction = point_direction(x,y,global.crosshairX[p],global.crosshairY[p]);
          
        range_to_solid = range_finder(x,y,aiming_direction,projectile_range,class_solid,false,true);
        range_to_enemy = range_finder(x,y,aiming_direction,projectile_range,class_enemy,false,true);
        
        range_to_friendly = -1;
        if (global.playerCount &gt; 1) &amp;&amp; (global.friendlyFire)
        {
            for (var i=0; i&lt;instance_number(class_player); i++)
            {
                var testFriendly = instance_find(class_player,i);
                if (testFriendly) &amp;&amp; instance_exists(testFriendly)
                {
                    if (testFriendly.myPlayerId != owner.myPlayerId) range_to_friendly = range_finder(x,y,aiming_direction,projectile_range,testFriendly,false,true);
                }
            }
        }
        
        if (!range_to_solid) range_to_solid = 9999999;
        if (!range_to_enemy) range_to_enemy = 9999999;
        if (!range_to_friendly) range_to_friendly = 9999999;

        if (!goesThroughWalls) draw_range = min(range_to_solid,range_to_enemy,range_to_friendly,projectile_range);
        else draw_range = projectile_range;
        
        lineX = x+lengthdir_x(draw_range,aiming_direction);
        lineY = y+lengthdir_y(draw_range,aiming_direction);
        
        isPrecisionAiming = false;
        
        var enemyTargetTest = collision_line(x, y, x+lengthdir_x(projectile_range,aiming_direction), y+lengthdir_y(projectile_range,aiming_direction), class_enemy , false , true )
        if instance_exists(enemyTargetTest)
        {
            var bbox_center = get_bbox_center(enemyTargetTest);
            var distanceToTarget = point_distance(x,y, bbox_center[0], bbox_center[1]) - global.precisionDistance;
            var angleToTarget = point_direction(x+lengthdir_x(distanceToTarget,aiming_direction), y+lengthdir_y(distanceToTarget,aiming_direction), bbox_center[0], bbox_center[1]);
            
            if ( abs( angle_difference(aiming_direction, angleToTarget) ) &lt;= (global.precisionAngle) )
            {
                isPrecisionAiming = true;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Firing Control
if (isActive) &amp;&amp; (owner) &amp;&amp; instance_exists(owner)
{
    input_held = false;
    input_pressed = false;
    
    if (global.input[owner.myPlayerId] == K_INPUT_KEYBOARD) &amp;&amp; (!owner.inputLocked)
    {
        if input_key_fire() input_held = true;
        if input_key_fire_pressed() input_pressed = true;
    }
    else if (!owner.inputLocked)
    {
        var joy = global.input[owner.myPlayerId];
        if (joy_rpos(joy) &gt; 0.7)
        {
            input_held = true;
            if (!trigger_pressed)
            {
                trigger_pressed = true;
                input_pressed = true;
            }
        }
        
        if (joy_rpos(joy) &lt; 0.4) &amp;&amp; (trigger_pressed) trigger_pressed = false;
    }
    
    if ((input_held) || (input_pressed)) &amp;&amp; (owner.sprinting) //hackz0r!
    {
        if (!reloading) &amp;&amp; (can_fire) owner.sprinting = false;
    }
    
    shot_type = 0;
    
    if (input_held) &amp;&amp; (fire_automatic)
    {
        if (!reloading) &amp;&amp; (can_fire) &amp;&amp; (!owner.sprinting) &amp;&amp; (!owner.melee) cmd_fire();
    }
    
    if (input_pressed) &amp;&amp; (!fire_automatic)
    {
        if (!reloading) &amp;&amp; (can_fire) &amp;&amp; (!owner.sprinting) &amp;&amp; (!owner.melee) cmd_fire();
    }
    
    if (input_pressed) &amp;&amp; (reloading)
    {
        audio_play(owner.audio_emitter,false,1,sfx_click);
        guiInfo = instance_create(owner.x,owner.y,gui_info);
        guiInfo.colorMain = K_BETU_RED;
        guiInfo.myString = loc_key("INFO_RELOADING");
        guiInfo.owner = id;
    }
    else if (input_pressed) &amp;&amp; (!ammo_current)
    {
        audio_play(owner.audio_emitter,false,1,sfx_click);
        guiInfo = instance_create(owner.x,owner.y,gui_info);
        guiInfo.owner = id;
        guiInfo.colorMain = K_BETU_RED;
        guiInfo.myString = loc_key("INFO_OUTOFAMMO");
    }
    
    //Rate of Fire
    if (!can_fire)
    {
        fire_rate_current++;
        if fire_rate_current &gt;= (fire_rate + fireRateDecayCurrent)
        {
            fire_rate_current = 0;
            fire_burst_current = 0;
            can_fire = true;
        }
    }
    
    //Rate of Fire Decay Recovery
    if (!input_held) || (reloading) || (!ammo_current)
    {
        fireRateDecayCurrent  += fireRateDecayRecovery;
    }
    
    //Burst Fire
    if fire_burst_current &lt; fire_burst &amp;&amp; (!can_fire)
    {
        fire_burst_rate_current++;
        if fire_burst_rate_current &gt;= fire_burst_rate
        {
            fire_burst_rate_current = 0;
            cmd_fire();
        }   
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
if (!instance_exists(owner)) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Camera Distance When Zoomed
if (isActive) &amp;&amp; instance_exists(controller_camera)
{
    controller_camera.weaponRange = projectile_range;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Draw
if instance_exists(owner)
{
    if (!owner.isDigging) &amp;&amp; (owner.animation_current != 'dig')
    {
        if (reloading) blend = c_gray;
        else blend = c_white;
        
        var drawGrenadeInsteadOfGun = false;
        
        if (owner.throw)
        {
            if (owner.animation_current == 'melee') &amp;&amp; (owner.animation_index &lt; owner.melee_hit_frame) drawGrenadeInsteadOfGun = true;
        }
        
        // Laser Beams
        if (projectile_obj == obj_projectile_beam) &amp;&amp; (isActive) &amp;&amp; (input_held) &amp;&amp; (!reloading) &amp;&amp; (can_fire) &amp;&amp; (!owner.sprinting) &amp;&amp; (!owner.melee)
        {
            draw_line_width_colour(x,y,lineX,lineY,beamThickness,beamColor,beamColor);
            if (draw_range &lt; projectile_range) draw_circle_colour(lineX, lineY, 4, beamColor, beamColor, false);
        }
        
        //Draw Self
        if (!drawGrenadeInsteadOfGun) draw_sprite_ext(sprite_index,image_index,drawX,drawY,image_xscale,image_yscale,image_angle,blend,1);
        else 
        {
            if (instance_exists(owner)) if (owner.myChar == char_rider) grenadeSpriteOverride = spr_grenadeRider;
            
            draw_sprite_ext(grenadeSpriteOverride,0,drawX,drawY,1,1,image_angle,blend,1);
        }
        
        // Aim
        if (isActive) &amp;&amp; (owner.aiming)
        {
            var laserColor = c_red;
            if (isPrecisionAiming) laserColor = c_white;
            
            draw_line_width_colour(x,y,lineX,lineY,2,laserColor,laserColor);
            if (draw_range &lt; projectile_range) draw_circle_colour(lineX, lineY, 4, laserColor, laserColor, false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
