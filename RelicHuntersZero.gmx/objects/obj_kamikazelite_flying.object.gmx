<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_kamikazelite_flying</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Variables

targetX = -1;
targetY = -1;

flightState = 'up';
hp = 0;

flightSpeed = 0;
flightSpeedMax = 4;
flightAccel = 0.5;
flightFriction = 0.25;

verticalSpeed = 0;
verticalSpeedMax = 3;
verticalAccel = 0.3;
verticalFriction = 0.25;
targetHeight = 120;

targetDistance = point_distance(x,y,targetX,targetY);
targetDirection = point_direction(x,y,targetX,targetY);
landingDistance = 70;

myHeight = 0;

image_xscale = 1.25;
image_yscale = 1.25;

//Animation &amp; Visuals
image_speed = 0.2;

reflection_object_setup(0,-1,image_index);

shadow_object_setup(myHeight,-1,-1,global.default_shadow_yscale);

//Audio
audio_emitter = audio_emitter_create();
audio_emitter_falloff(audio_emitter, global.falloffMinorDist, global.falloffMinorMax, global.falloffMinorFactor );
audio_emitter_gain(audio_emitter,global.soundVolume);

audio_play(audio_emitter, true, 1, sfx_kami_fly);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup
if audio_emitter_exists(audio_emitter) audio_emitter_free(audio_emitter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flight Control

//Target and Movement Control
if (targetX) &amp;&amp; (targetY)
{
    targetDistance = point_distance(x,y,targetX,targetY);
    targetDirection = point_direction(x,y,targetX,targetY);
}
else flightState = 'complete';
    
// Flight State Machine
if (flightState == 'up')
{
    verticalSpeed -= verticalFriction;
    verticalSpeed += verticalAccel;
    if (verticalSpeed &gt;= verticalSpeedMax) verticalSpeed = verticalSpeedMax;
    
    myHeight += verticalSpeed;
    
    if myHeight &gt;= targetHeight
    {
        flightState = 'go';
    }
}

if (flightState == 'go')
{
    verticalSpeed -= verticalFriction;
    
    if (myHeight != targetHeight)
    {
        myHeight += max(verticalSpeed,(targetHeight-myHeight));
        if (myHeight &lt; targetHeight) myHeight = targetHeight;
    }   
    
    flightSpeed -= flightFriction;
    flightSpeed += flightAccel;
    if (flightSpeed &gt; flightSpeedMax) flightSpeed = flightSpeedMax;
    
    if (targetDistance &lt;= landingDistance)
    {
        verticalSpeed = 0;
        flightState = 'down';
    }
}

if (flightState == 'down')
{
    if (flightSpeed) 
    {
        flightSpeed -= min(flightFriction,flightSpeed);
    }
    if (flightSpeed &lt; 0) flightSpeed = 0;

    verticalSpeed -= verticalFriction;
    verticalSpeed += verticalAccel;
    
    if (verticalSpeed &gt;= verticalSpeedMax) verticalSpeed = verticalSpeedMax;
    
    myHeight -= min(verticalSpeed,myHeight);
    
    if myHeight &lt;= 0
    {
        myHeight = 0;
        flightSpeed = 0;
        flightState = 'complete';
    }
}

//Resolve Horizontal Movement
if (flightSpeed)
{
    speed = flightSpeed;
    direction = targetDirection;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Landing

if (flightState == 'complete')
{
    var landed = instance_create(x,y,obj_kamikazelite);
    landed.hp = hp;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Update Shadow Draw Position
shadow_object_setup(myHeight,-1,-1,global.default_shadow_yscale);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio
audio_emitter_position(audio_emitter, x, y, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Draw

if (flightState == 'go') 
{
    depth = -99999999;
}
else depth = -y;

if (targetDirection &gt; 90) &amp;&amp; (targetDirection &lt; 270) image_xscale = -1;
else image_xscale = 1;

image_yscale = 1.25;

draw_sprite_ext(sprite_index,image_index,x,y-myHeight,image_xscale,image_yscale,image_angle,image_blend,1);

reflection_add_sprite_update(sprite_index,image_index,x,y+myHeight,image_xscale,1,image_angle,image_blend,1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>57,86</point>
    <point>57,57</point>
  </PhysicsShapePoints>
</object>
