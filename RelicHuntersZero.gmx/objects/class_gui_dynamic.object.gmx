<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

isActive = false;

offsetX = 0;
offsetY = 0;

activeOffsetX = 0;
activeOffsetY = 0;

orientationX = 1;
orientationY = 1;

activeSpeed = 0;
activeAccel = 0.4;
activeSpeedMax = 10;

timedActive = false;
activeTime = room_speed*3.5;
activeTimeCurrent = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dynamic Movement


//Accelerate
if ( (isActive) &amp;&amp; ((offsetX != activeOffsetX) || (offsetY != activeOffsetY)) ) || ( (!isActive) &amp;&amp; ((offsetX !=0) || (offsetY!=0)) )
{
    activeSpeed += min( activeAccel,  activeSpeedMax-activeSpeed);
}
else activeSpeed = 0;


//Movement Orientation
if (isActive)
{ 
    if ((orientationX == 1) &amp;&amp; (offsetX &lt; activeOffsetX)) || ((orientationX == -1) &amp;&amp; (offsetX &gt; activeOffsetX)) offsetX += orientationX * min ( activeSpeed, abs(activeOffsetX-offsetX));
    
    if ((orientationY == 1) &amp;&amp; (offsetY &lt; activeOffsetY)) || ((orientationY == -1) &amp;&amp; (offsetY &gt; activeOffsetY)) offsetY += orientationY * min ( activeSpeed, abs(activeOffsetY-offsetY));
}
else
{
    if ((orientationX == 1) &amp;&amp; (offsetX)) ||  ((orientationX == -1) &amp;&amp; (offsetX &lt; 0))                  offsetX -= orientationX * min ( activeSpeed, abs(offsetX));
    if ((orientationY == 1) &amp;&amp; (offsetY)) ||  ((orientationY == -1) &amp;&amp; (offsetY &lt; 0))                  offsetY -= orientationY * min ( activeSpeed, abs(offsetY));
}

//Timed Activation
if (timedActive)
{
    isActive = true;    

    if (activeTimeCurrent &lt; activeTime) activeTimeCurrent++;
    else {
        timedActive = false;
        activeTimeCurrent = 0;
    }
}


/* OLD CODE

//Accelerate
if ( (isActive) &amp;&amp; ((offsetX != activeOffsetX) || (offsetY != activeOffsetY)) ) || ( (!isActive) &amp;&amp; ((offsetX !=0) || (offsetY!=0)) )
{
    activeSpeed += min( activeAccel,  activeSpeedMax-activeSpeed);
}
else activeSpeed = 0;


//Movement Orientation
if (isActive)
{ 
    if (offsetX &lt; activeOffsetX) offsetX += min ( activeSpeed, activeOffsetX-offsetX);
    if (offsetY &lt; activeOffsetY) offsetY += min ( activeSpeed, activeOffsetY-offsetY);
}
else
{
    if (offsetX) offsetX -= min ( activeSpeed, offsetX);
    if (offsetY) offsetY -= min ( activeSpeed, offsetY);
}

//Timed Activation
if (timedActive)
{
    isActive = true;    

    if (activeTimeCurrent &lt; activeTime) activeTimeCurrent++;
    else {
        timedActive = false;
        activeTimeCurrent = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw happens at Main HUD Draw
//controller_main
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
