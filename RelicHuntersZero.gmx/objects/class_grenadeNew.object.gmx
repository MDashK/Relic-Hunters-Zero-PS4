<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>class_bouncer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bounce Stuff

event_inherited();
sprite = spr_grenadeNew;

angular_min = -10;
angular_max = 10;
angular_speed = random_range(angular_min,angular_max);

vertical_speed_start = 8;
vertical_speed = -vertical_speed_start;

speed = 4;

//Bounce min/max is reduced from vertical speed at each bounce, higher = bounces less
bounce_min = 2;
bounce_max = 2.5;

dynamicHeight = -60;

canRicochet = true;

allowBounce = false;
allowBounceTime = room_speed*0.4;
allowBounceTimeCurrent = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle Trail

global.smokeSystem[id] = part_system_create();
ds_list_add(global.particle_list,global.smokeSystem[id]);
part_system_depth(global.smokeSystem[id], depth+1 );
part_system_automatic_update(global.smokeSystem[id], false);

smoke_particle = part_type_create();
ds_list_add(global.particle_type_list, smoke_particle);
part_type_shape(smoke_particle, pt_shape_square);
part_type_size(smoke_particle, 0.5, 2, 0, 0);
part_type_scale(smoke_particle,0.15,0.15);
part_type_colour1(smoke_particle, c_white);
part_type_alpha2(smoke_particle, 0.5, 0);
part_type_speed(smoke_particle, 0.1, 0.25, 0, 0);
part_type_direction(smoke_particle, 90, 90, 0, 0);
part_type_gravity(smoke_particle, 0, 270);
part_type_orientation(smoke_particle, 0, 0, 0, 0, 1);
part_type_blend(smoke_particle, true);
part_type_life(smoke_particle, room_speed*0.3, room_speed*0.5);

smoke_emitter = part_emitter_create(global.smokeSystem[id]);
part_emitter_region(global.smokeSystem[id], smoke_emitter, x-5, x+5, y-5, y+5, ps_shape_ellipse, ps_distr_linear);
part_emitter_burst(global.smokeSystem[id], smoke_emitter, smoke_particle, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grenade Stuff

goBoom = false;

damage = 200;

myTarget = instance_create(x,y,fx_grenadeTarget);
myTarget.parent = id;
targetSetup = false;

playerTrigger = noone;
enemyTrigger = noone;

triggerRadiusForPlayers = 16;
triggerRadiusForEnemies = 32;

detonationTime = room_speed*1;
detonationTimeCurrent = 0;
detonationRadius = 75;

audio_emitter = audio_emitter_create();
audio_emitter_falloff(audio_emitter, global.falloffMinorDist, global.falloffMinorMax, global.falloffMinorFactor );
audio_emitter_gain(audio_emitter,global.soundVolume);
audio_play(audio_emitter,false,1,sfx_grenade_loop);

speedReset = false;
oldSpeed = 0;

reflection_object_setup(draw_height,spr_grenadeNew,image_index);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup
audio_emitter_free(audio_emitter);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Targeting Reticule

if (!targetSetup)
{
    var rX, rY;
    
    var virtualHeight = draw_height;
    var virtualVerticalSpeed = vertical_speed;
    var virtualHorizontalSpeed = speed;
    var virtualFriction = friction;
    var virtualGravity = fake_gravity;
    var totalDistance = 0;
    
    
    while (virtualHeight &lt; 0)
    {
        virtualHeight += virtualVerticalSpeed;
        virtualVerticalSpeed += virtualGravity;
        
        if (virtualHorizontalSpeed) virtualHorizontalSpeed -= min(virtualFriction, virtualHorizontalSpeed);
        totalDistance += virtualHorizontalSpeed;
    }
    
    var rangeToWall = range_finder(x,y,direction,totalDistance,obj_limit,false,true);

    if (rangeToWall) totalDistance = rangeToWall;
    
    rX = x + lengthdir_x(totalDistance,direction);
    rY = y + lengthdir_y(totalDistance,direction);
    
    myTarget.x = rX;
    myTarget.y = rY;
    
    targetSetup = true;
}

if (firstBounce) &amp;&amp; instance_exists(myTarget)
{
    with (myTarget) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.pause</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///"Physics" adjustment

event_inherited();

if (!allowBounce)
{
    if (allowBounceTimeCurrent &lt; allowBounceTime) allowBounceTimeCurrent++;
    else allowBounce = true;
}

if (draw_height &gt;= dynamicHeight) &amp;&amp; (allowBounce)
{
    if (place_meeting(x,y,obj_wall)) &amp;&amp; (speed)
    {
        if (vertical_speed)
        {
            timeToBounce = true;
            canRicochet = false;
        }
        else
        {
            if (canRicochet) direction = 180+(point_direction(x,y,other.x,other.y));
            if (!vertical_speed_start) detonationTimeCurrent = detonationTime;
        }
    }

    if (collision_circle(x,y,triggerRadiusForEnemies,class_enemy,false,true))
    {
        enemyTrigger = true;
    }
    
    if (collision_circle(x,y,triggerRadiusForPlayers,class_player,false,true))
    {
        playerTrigger = true;
    } 
}

reflection_object_setup(draw_height,spr_grenadeNew,image_index);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Detonation Control

if (!vertical_speed_start) detonationTimeCurrent++;

if (detonationTimeCurrent &gt;= detonationTime)
{
    goBoom = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio

audio_emitter_position(audio_emitter, x, y, 0);

if (playAudio)
{
    audio_play(audio_emitter,false,1,sfx_grenade_bounce);
    playAudio = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Smoke Trail

if (vertical_speed_start)
{
    part_emitter_region(global.smokeSystem[id], smoke_emitter, x, x, y+draw_height, y+draw_height, ps_shape_ellipse, ps_distr_linear);
    part_emitter_burst(global.smokeSystem[id], smoke_emitter, smoke_particle, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause-Controlled Movement

if (!global.pause)
{
    if (speedReset)
    {
        speed = oldSpeed;
        speedReset = false;
    }
}
else
{
    if (!speedReset)
    {
        oldSpeed = speed;
        speed = 0;
        speedReset = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_limit">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bounce on Wall
direction = 180+(point_direction(x,y,other.x,other.y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="class_solid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do Nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Override

draw_self();

draw_sprite_ext(sprite,sprite_subimage,x,y+draw_height,1,1,sprite_angle,image_blend,1);
reflection_add_sprite_update(sprite,sprite_subimage,x,y-draw_height,1,1,sprite_angle,image_blend,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
