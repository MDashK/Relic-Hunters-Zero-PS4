<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_rocket</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_rocket</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Homing Stuff

event_inherited();

//Attributes
owner = noone;
speed = 4;
maxSpeed = 8;
decay = -0.013;
damage = 200;
range = 1000;
push_power = 10;

faction = f_enemy;

if (instance_exists(owner)) audio_play(owner.audio_emitter,false,1,sfx_rocket_start);

//Target Acquisition

weapon_homing_setup(3,0.008,0.1,180,5,100,1200);


/*
curveRatio = 3;
curveRatioDecay = 0.008; 
curveRatioMin = 0.1;

angleDiffMax = 180;
angleDiffMin = 5;
curveDistanceMax = 1200;
curveDistanceMin = 100;

curveTarget = noone;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Target Search + Adjustment

event_inherited();

var myTargetType = -1;
var isEnemy = true;

if (faction == f_enemy) myTargetType = class_player;
else if (faction == f_player)
{
    myTargetType = class_enemy;
    isEnemy = false;
}

weapon_homing_update(myTargetType,isEnemy);

/*

if (myTargetType != -1)
{
    if (curveRatio &gt; curveRatioMin) curveRatio -= curveRatioDecay
    
    //Target Adjustment
    if (instance_exists(curveTarget))
    {
        var targetDir = point_direction(x,y,curveTarget.x,curveTarget.y);
        var angleDiff = angle_difference(direction,targetDir);
        if (abs(angleDiff) &lt;= angleDiffMax) &amp;&amp; (abs(angleDiff) &gt; angleDiffMin)
        {
            var rotationDirection;
            if (angleDiff) rotationDirection = -1;
            else rotationDirection = 1;
                
            direction += rotationDirection * (curveRatio);
        }
    }
    else {
        if (faction == f_enemy) curveTarget = instance_nearest(x,y,myTargetType);
        else curveTarget = find_enemy_autoaim(x,y,direction,180,range);
    }
    
    if (speed &gt; maxSpeed) speed = maxSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
