<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>faction_ducan</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Shit

var bossBar = 666;
draw_healthbar_delayed_init(bossBar);

isVulnerable = true;

//Shooter Class Derivative
elite = false;
shield = false;

coins = 1;

energy_max = 999999;
energy = 0;
hp_max = 6000;
hp = hp_max;

hpMilestoneCurrent = 0;
hpMilestone1 = 4500;
hpMilestone2 = 3000;
hpMilestone3 = 1500;

critical_death = false;

speed_walk = 2.5;
speed_sprint = 3.2;
move_speed = speed_walk;

dash_speed = 20;
dodging = false;
moving = false;

//AI
ai_active = true;
want_to_activate = false;
ai_activation_range = 2000;

aggro = random_range(0,50);
aggro_max = 200;
aggro_distance = 1200;
aggro_add_patrol = 0.25;
aggro_add_close = 2;
aggro_add_hit = aggro_max;
aggro_cost_attack = 20;
aggro_cost_chase = 1;
aggro_cost_sight_forbidden = 5;
aggro_min_chase = 120;

ai_target = noone;
ai_target_change = room_speed*2;
ai_target_change_current = ai_target_change;
ai_shutdown_range = 1000;

ai_state = 'PATROL';
ai_patrol_range = 400;
ai_patrol_max = 600;
ai_patrol_x = -1;
ai_patrol_y = -1;

ai_cover_x = -1;
ai_cover_y = -1;
ai_cover_priority = ds_priority_create();
ai_cover_check_range = 400;
ai_cover_hp_threshold = 100;
ai_cover_shield_threshold = 1;

ai_supression = true;

ai_grenade_chance = 0;
ai_grenade_cover_multiplier = 5;
ai_myGrenade = noone;
ai_dash_chance = 0;
ai_dash_cooldown = room_speed*1;
ai_dash_cooldown_current = ai_dash_cooldown;

ai_path = path_add();
path_point_current = 0;
collision_mass = 1+random(1);


//VFX
no_score = false;

hit_taken = false;
hit_taken_max = room_speed*0.1;
hit_taken_count = 0;
hit_direction = 0;

pushed = false;
push_direction = 0;
push_speed = 0;
push_friction = 0.5;
push_duration = room_speed*0.3;
push_duration_current = 0;

//Shield
shield = true;
energy_regen_time = room_speed*5;
energy_regen_time_current = 0;
energy_regen_speed = 1;

shield_fading = false;
shield_alpha = 0;
shield_alpha_speed = 0;
shield_alpha_accel = 0.2;
shield_alpha_speed_max = 2;

//Weapons
look_direction = 1;
firing = false;

fire_range = 1200;

grenade_count = 99999;
grenade_count_max = 99999;
my_gun = noone;
drop_gun = noone;
drop_gun_chance = 0.25;

//Sprites
sprite_hit = spr_boss_hit;
sprite_walk = spr_boss_walk;
sprite_idle = spr_boss_idle;
sprite_dash = spr_boss_walk;
sprite_death = spr_boss_death;
sprite_death2 = spr_boss_death;
sprite_death3 = spr_boss_death;
myDash = noone;
myDash2 = noone;

reflection_object_setup(0,-1,image_index);
shadow_object_setup(0,-1,-1,global.default_shadow_yscale);

//Audio
audio_emitter = audio_emitter_create();
audio_emitter_falloff(audio_emitter, global.falloffMainDist, global.falloffMainMax, global.falloffMainFactor);
audio_emitter_gain(audio_emitter,global.soundVolume);


//Boss Hack Stuff
isMoveable = false;

if my_gun == noone
{
    my_gun = instance_create(x,y,obj_assaultrifle_boss);
    my_gun.owner = id;
}

rocketFireBurstMax = 3;
rocketFireBurst = rocketFireBurstMax;
rocketFireBurstRate = room_speed*0.65;
rocketFireBurstRateCurrent = rocketFireBurstRate;
rocketTime = room_speed*22;
rocketTimeCurrent = rocketTime-100;

/*
my_gun2 = instance_create(x,y,obj_rocketlauncher_boss);
my_gun2.owner = id;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Depth Adjustment
if (instance_exists(my_gun))
{
    my_gun.depth = depth-2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>408</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.pause</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation &amp; VFX

if (look_direction == 1) image_xscale = 1;
else image_xscale = -1;



//Hit Taken
if (hit_taken)
{   
    
    energy_regen_time_current = 0;
    
    if (shield)
    {
        shield_effect = instance_create(x,y,fx_shield);
        shield_effect.sprite_index = spr_shield_boss;
        shield_effect.owner = id;
        shield_effect.blue = false;
        hit_taken = false;
    }
    
    if (!shield)
    {
        hit_taken_count++;
        
        if (hit_taken_count &gt;= hit_taken_max) hit_taken = false;
        if (image_index == image_number-1) image_speed = 0;
        
        if hit_taken_count = 1
        {
            sprite_index = sprite_hit;
            image_speed = 0.2;
            image_index = 0;
        }
    }
}
else
{
    if (moving) sprite_index = sprite_walk;
    else sprite_index = sprite_idle;
    
    if (dodging)
    {
        if (!instance_exists(myDash))
        {
            myDash = instance_create(x,y,fx_duck_dash);
            myDash.owner = id;
            myDash.slowness = 2;
            myDash.alpha = 100;
        }
        if (!instance_exists(myDash2))
        {
            myDash = instance_create(x,y,fx_duck_dash);
            myDash.owner = id;
            myDash.slowness = 4;
            myDash.alpha = 60;
        }
        sprite_index = sprite_dash;
    }
    image_speed = 0.2;
    hit_taken_count = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Life, Shield &amp; Death

if (hp &gt; hp_max) hp = hp_max;
if (energy &gt; energy_max) energy = energy_max;

if instance_exists(controller_main){
    if (controller_main.debug_forceLevelExit) hp = 0;
}

if (!elite)
{
    shield = false;
}

if hp &lt;= 0
{
    repeat(coins) instance_create(x,y,obj_pickup_coin);
    
    myCorpse = instance_create(x,y,fx_corpse_boss);
    myCorpse.image_xscale = image_xscale;
    myCorpse.image_yscale = image_yscale;
    
    if (pushed)
    {
        myCorpse.speed = push_speed*2;
        myCorpse.direction = push_direction;
    }
    
    //audio_play(audio_emitter,false,1,sfx_duck_death);
    ds_list_add(global.audio_cleaner,audio_emitter);
    instance_destroy();
}

//Shield
if energy &lt; energy_max
{
    energy_regen_time_current++;
    if energy_regen_time_current &gt;= energy_regen_time
    {
        if (!energy) energy = 1;
        shield = true;
        energy += energy_regen_speed;
        if (energy &gt; energy_max) energy = energy_max;
    }
    
    if energy_regen_time_current = energy_regen_time
    {
        myRecharge = instance_create(x,y,fx_shield_up);   
        myRecharge.owner = id;
        myRecharge.blue = false;
    }
}

if (!energy) &amp;&amp; (shield == true)
{
    myShieldEffect = instance_create(x,y,fx_shield_explosion);
    myShieldEffect.owner = id;
    myShieldEffect.blue = false;
    
    mySparks = instance_create(x,y,fx_shield_down);
    mySparks.owner = id;
    mySparks.blue = false;
    
    shield = false;
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HP Milestones &amp; Boss Phases Control

if (hpMilestoneCurrent == 0)
{
    if hp &lt; hpMilestone1
    {
        hpMilestoneCurrent = 1;

        shield = true;
        elite = true;
        energy = energy_max;
        if instance_exists(obj_generator1)
        {
            obj_generator1.isVulnerable = true;
            show_debug_message('Boss just toggled generator1 variable isVulnerable to '+string(obj_generator1.isVulnerable));
        }
        
        //Wave 1
        instance_create(1928,832,obj_turtle3);
        instance_create(2120,832,obj_turtle3);
        instance_create(2100,832,obj_turtle3);
        
        instance_create(1700,850,obj_turtle2_shotgun);
        instance_create(1696,480,obj_turtle2_shotgun);
        instance_create(2048,480,obj_turtle3);
        instance_create(2000,480,obj_turtle3);
        
        instance_create(2432,900,obj_turtle2_submachinegun);
        instance_create(2550,900,obj_turtle2_submachinegun);
        instance_create(2390,880,obj_turtle3);
    }
}

if (hpMilestoneCurrent == 1)
{
    if (!instance_exists(obj_generator1))
    {
        shield = false;
        elite = false;
        energy = 0;
    }
    
    if hp &lt; hpMilestone2
    {
        hpMilestoneCurrent = 2;
        
        shield = true;
        elite = true;
        energy = energy_max;
        if instance_exists(obj_generator2)
        {
            obj_generator2.isVulnerable = true;
        }
        
        //Wave 2
        instance_create(832,1472,obj_turtle3);
        instance_create(832,1664,obj_turtle3);
        instance_create(832,1728,obj_turtle2_submachinegun);
        
        instance_create(1088,2112,obj_duck3);
        instance_create(1088,2240,obj_duck2_submachinegun);
        instance_create(1088,2190,obj_duck2_submachinegun);
        
        instance_create(2240,2176,obj_duck2_shotgun);
        instance_create(2112,2176,obj_turtle3);
        instance_create(2368,2176,obj_turtle3);
        
        instance_create(3136,2048,obj_turtle3_sniper);
        instance_create(3200,1024,obj_turtle3_sniper);
        
        instance_create(2240,832,obj_turtle3);
        instance_create(2240,896,obj_turtle3);
        instance_create(2240,960,obj_turtle3);
    }
}

if (hpMilestoneCurrent == 2)
{
    if (!instance_exists(obj_generator2))
    {
        shield = false;
        elite = false;
        energy = 0;
    }
    
    if hp &lt; hpMilestone3
    {
        hpMilestoneCurrent = 3;
        
        shield = true;
        elite = true;
        energy = energy_max;
        if instance_exists(obj_generator3)
        {
            obj_generator3.isVulnerable = true;
        }
        
        //Wave 3
        instance_create(896,1472,obj_turtle3);
        instance_create(896,1600,obj_turtle3);
        instance_create(1024,1472,obj_duck2_submachinegun);
        instance_create(1024,1600,obj_duck3);

        instance_create(3520,896,obj_duck3_rocket);
        
        instance_create(1536,2176,obj_duck2_submachinegun);
        instance_create(1664,2176,obj_duck2_submachinegun);
        
        instance_create(3456,2176,obj_turtle2_shotgun);
        instance_create(3520,2176,obj_turtle2_shotgun);
        
        instance_create(3456,1120,obj_duck3);
        
        instance_create(3008,1088,obj_duck2_shotgun);

    }
}

if (hpMilestoneCurrent == 3)
{
    //if (!instance_exists(obj_generator3))
    {
        hpMilestoneCurrent = 4;
        
        shield = false;
        elite = false;
        energy = -1;
        energy_max = -1;
        
        isMoveable = true;
        ai_grenade_chance = 0.12;
        
        aggro_distance = 1500;
        
        aggro_add_patrol = 0.5;
        aggro_add_close = 2;
        aggro_add_hit = aggro_max;
        aggro_cost_attack = 10;
        aggro_cost_chase = 1;
        
        fire_range = 1500;
        speed_walk = 2.5;
        speed_sprint = 3.2;
        
        ai_dash_chance = 0;
        ai_dash_cooldown = room_speed*9999999999;
        
        ai_supression = false;
    }   
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Homing Rockets Launch

var wantToFire = false;
var fireRocket = false;
var fireAngleModifier = 0;


if (rocketTimeCurrent &lt; rocketTime) &amp;&amp; (!wantToFire) rocketTimeCurrent++;
else wantToFire = true;

if (wantToFire) 
{   
    if (rocketFireBurst)
    {
        if (rocketFireBurstRateCurrent &gt;= rocketFireBurstRate)
        {
            rocketFireBurstRateCurrent = 0;
            
            if (rocketFireBurst == 3) fireAngleModifier = 160;
            if (rocketFireBurst == 2) fireAngleModifier = 180;
            if (rocketFireBurst == 1) fireAngleModifier = 200;
            
            rocketFireBurst--;
            fireRocket = true;
        }
        else rocketFireBurstRateCurrent++;
    }
    else
    {
        wantToFire = false;
        rocketTimeCurrent = 0;
        rocketFireBurstRateCurrent = rocketFireBurstRate;
        rocketFireBurst = rocketFireBurstMax;
    }
}



if (fireRocket)
{
    var myRocket = instance_create(x,y,obj_rocket_homing);
    if (instance_exists(my_gun)) myRocket.direction = fireAngleModifier + my_gun.shoot_direction;
    myRocket.owner = id;
    myRocket.damage = 160;
    fireRocket = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///AI &amp; Movement

//Setup
ai_movetarget_x = -1;
ai_movetarget_y = -1;
distance_to_target = 99999;
current_distance = 0;
move_speed = speed_walk;
firing = false;

distance_to_player = 0;
if (instance_exists(faction_player)) distance_to_player = point_distance(x,y,faction_player.x,faction_player.y);

if (grenade_count &gt; grenade_count_max) grenade_count = grenade_count_max;

//Activate AI
if (hit_taken) want_to_activate = true;

if (!ai_active)
{
    if (distance_to_player &lt; ai_activation_range) &amp;&amp; instance_exists(faction_player) &amp;&amp; (!want_to_activate)
    {
        if collision_line(x,y,faction_player.x,faction_player.y,obj_limit,false,true) &lt; 0
        {
            want_to_activate = true;
        }
    }
    
    if (want_to_activate)
    {
        ai_active = true;
        activationFX = instance_create(x,y,fx_activation);
        activationFX.owner = id;
    }
}

//Resolve AI
if (ai_active) &amp;&amp; ( (distance_to_player &lt; ai_shutdown_range) || (on_screen(x,y)) )
{
    //Find my Target 
    if ai_target_change_current &gt;= ai_target_change || (!instance_exists(ai_target))
    {
        ai_target_change_current = 0;

        ai_target = faction_player;
        distance_to_target = distance_to_player;
    }
    else 
    {
        ai_target_change_current++;
        if (ai_target == faction_player) distance_to_target = distance_to_player;
    }
    
        
    // Resolve AI with Target found
    
    if instance_exists(ai_target) &amp;&amp; (!pushed)
    {
        //Aggro Control
        if (distance_to_target &lt;= aggro_distance) aggro += aggro_add_close;
        if (ai_state == 'PATROL' || ai_state == 'COVER') aggro += aggro_add_patrol;
        if (ai_state == 'CHASE') aggro -= aggro_cost_chase;
        
        if (ai_state == 'PATROL' &amp;&amp; distance_to_target &gt; ai_patrol_max) aggro += aggro_add_close;
        
        
        if (aggro &lt; 0) aggro = 0;
        if (aggro &gt; aggro_max) aggro = aggro_max;
        
        if (energy &lt;= ai_cover_shield_threshold) &amp;&amp; (hp &gt; ai_cover_hp_threshold) &amp;&amp; (elite)
        {
            ai_state = 'COVER';
        }
        
        if instance_exists(class_grenadeNew)
        {
            wow_look_out_dude = instance_nearest(x,y,class_grenadeNew);
            if (point_distance(x,y,wow_look_out_dude.x,wow_look_out_dude.y) &lt;= wow_look_out_dude.detonationRadius+50) &amp;&amp; ai_test_dash_chance(10)
            {
                ai_state = 'DASH';
                dash_direction = 180+point_direction(x,y,wow_look_out_dude.x,wow_look_out_dude.y);
            }
        }
        
        //State Switches
        if ai_state == 'CHASE'
        {
            if (aggro &lt;= 0) 
            { 
                ai_state = 'PATROL'; 
                exit; 
            }
            
            if (ai_test_dash_chance(1))
            { 
                ai_state = 'DASH'; 
                dash_direction = irandom_range(-50,50) + point_direction(x,y,ai_target.x,ai_target.y);
                exit;
            }
        }
        
        if ai_state == 'COVER'
        {
            if (energy &gt;= energy_max) 
            { 
                ai_state = 'PATROL'; 
                exit; 
            }
            if (hp &lt;= ai_cover_hp_threshold) 
            { 
                ai_state = 'CHASE'; 
                exit; 
            }
        }
        
        if ai_state == 'PATROL'
        {
            if aggro &gt;= aggro_min_chase
            {
                ai_state = 'CHASE';
                exit;
            }
        }
        
        //State Descriptions
        if ai_state == 'CHASE'
        {
            sight_forbidden = noone;
            sight_blocked = (collision_line(x,y,ai_target.x,ai_target.y,class_solid,false,true));
            if (sight_blocked) sight_forbidden = (collision_line(x,y,ai_target.x,ai_target.y,obj_limit,false,true));
            
            throwGrenade = false;
            if (sight_blocked) &amp;&amp; (!sight_forbidden) &amp;&amp; (grenade_count) &amp;&amp; (ai_test_grenade_chance(ai_grenade_cover_multiplier)) &amp;&amp; (distance_to_target &lt;= 400) &amp;&amp; (!instance_exists(ai_myGrenade)) throwGrenade = true;
            if (!sight_forbidden) &amp;&amp; (grenade_count) &amp;&amp; (distance_to_target &lt;= 400) &amp;&amp; (!instance_exists(ai_myGrenade)) &amp;&amp; (ai_test_grenade_chance(1)) throwGrenade = true;
            
            if (throwGrenade)
            {
                ai_myGrenade = instance_create(x,y,obj_grenade_enemyNew);
                ai_myGrenade.speed = 8;
                ai_myGrenade.direction = point_direction(x,y,ai_target.x,ai_target.y);
                ai_myGrenade.speed_initial = 8;
                grenade_count--;
            }
            
            if (distance_to_target &gt; fire_range) || ( (sight_blocked) &amp;&amp; (!ai_supression) ) || (sight_forbidden &amp;&amp; (!ai_supression)) || (sight_blocked &amp;&amp; ai_target != faction_player)
            {
                ai_movetarget_x = ai_target.x;
                ai_movetarget_y = ai_target.y;
                firing = false;
            }
            else
            {
                ai_movetarget_x = x;
                ai_movetarget_y = y;
                firing = true;
            }
            
            if (sight_forbidden) &amp;&amp; (ai_supression) aggro -= aggro_cost_sight_forbidden;
        }
        
        if ai_state == 'COVER'
        {
            move_speed = speed_sprint;
            sight_blocked = (collision_line(x,y,ai_target.x,ai_target.y,class_solid,false,true));
            if (distance_to_target &lt;= fire_range) &amp;&amp; (!sight_blocked) firing = true;
            
            //Checks for nearby covers
            if ds_priority_empty(ai_cover_priority)
            {
                cover_count = instance_number(obj_wall);
                for (i=0; i&lt;cover_count; i++)
                {
                    cover_candidate = instance_find(obj_wall,i);
                    cover_distance = point_distance(x,y,cover_candidate.x,cover_candidate.y);
                    if cover_distance &lt;= ai_cover_check_range
                    {
                        ds_priority_add(ai_cover_priority,cover_candidate,cover_distance);
                    }    
                }
            }
            
            //Look for best closest cover position against player (checks 4 sides)
            if (!ds_priority_empty(ai_cover_priority)) &amp;&amp; (ai_cover_x == -1) &amp;&amp; (ai_cover_y == -1)
            {
                tile_size = 64;
                current_distance = 99999;
                for (i=0; i&lt;ds_priority_size(ai_cover_priority); i++)
                {
                    cover_candidate = ds_priority_delete_min(ai_cover_priority);
                    if instance_exists(cover_candidate)
                    {
                        //Side 1
                        checkX = cover_candidate.x-(tile_size/2);
                        checkY = cover_candidate.y+(tile_size/2);
                        if (!collision_point(checkX,checkY,obj_wall,false,true)) &amp;&amp; (collision_line(checkX,checkY,ai_target.x,ai_target.y,obj_wall,false,true))
                        {
                            candidate_distance = point_distance(x,y,ai_cover_x,ai_cover_y)
                            if candidate_distance &lt; current_distance { ai_cover_x = checkX; ai_cover_y = checkY; current_distance = candidate_distance; }
                        }
                        //Side2
                        checkX = cover_candidate.x+(tile_size*1.5);
                        checkY = cover_candidate.y+(tile_size/2);
                        if (!collision_point(checkX,checkY,obj_wall,false,true)) &amp;&amp; (collision_line(checkX,checkY,ai_target.x,ai_target.y,obj_wall,false,true))
                        {
                            candidate_distance = point_distance(x,y,ai_cover_x,ai_cover_y)
                            if candidate_distance &lt; current_distance { ai_cover_x = checkX; ai_cover_y = checkY; current_distance = candidate_distance; }
                        }
                        //Side3
                        checkX = cover_candidate.x+(tile_size/2);
                        checkY = cover_candidate.y-(tile_size/2);
                        if (!collision_point(checkX,checkY,obj_wall,false,true)) &amp;&amp; (collision_line(checkX,checkY,ai_target.x,ai_target.y,obj_wall,false,true))
                        {
                            candidate_distance = point_distance(x,y,ai_cover_x,ai_cover_y)
                            if candidate_distance &lt; current_distance { ai_cover_x = checkX; ai_cover_y = checkY; current_distance = candidate_distance; }
                        }
                        //Side4
                        checkX = cover_candidate.x+(tile_size/2);
                        checkY = cover_candidate.y+(tile_size*1.5);
                        if (!collision_point(checkX,checkY,obj_wall,false,true)) &amp;&amp; (collision_line(checkX,checkY,ai_target.x,ai_target.y,obj_wall,false,true))
                        {
                            candidate_distance = point_distance(x,y,ai_cover_x,ai_cover_y)
                            if candidate_distance &lt; current_distance { ai_cover_x = checkX; ai_cover_y = checkY; current_distance = candidate_distance; }
                        } 
                    }
                }
            }
            
            //Resolve
            if (ai_cover_x) &amp;&amp; (ai_cover_y)
            {
                ai_movetarget_x = ai_cover_x;
                ai_movetarget_y = ai_cover_y;
                
                if point_distance(x,y,ai_cover_x,ai_cover_y) &lt; 20
                {
                    ai_cover_x = -1;
                    ai_cover_y = -1;
                    ds_priority_clear(ai_cover_priority);
                }
            }
            
        }
        
        if ai_state == 'PATROL'
        {
            if (ai_patrol_x) &amp;&amp; (ai_patrol_y)
            {
                if (collision_point(ai_patrol_x,ai_patrol_y,class_solid,false,true) &lt; 0)
                {
                    ai_movetarget_x = ai_patrol_x;
                    ai_movetarget_y = ai_patrol_y;
                }
                else
                {
                    ai_movetarget_x = x;
                    ai_movetarget_y = y;
                }
            }
            else
            {
                ai_patrol_x = x+(random_range(-400,400));
                ai_patrol_y = y+(random_range(-400,400));
            }
        }
        else
        {
            ai_patrol_x = -1;
            ai_patrol_y = -1;
        }
        
        if ai_state == 'DASH'
        {
            ai_state = 'PATROL';
            ai_dash_cooldown_current = 0;
            audio_play(audio_emitter,false,1,sfx_dash1,sfx_dash2,sfx_dash3);
            
            dodging = true;
            pushed = true;
            push_direction = dash_direction;
            push_speed = dash_speed;
            exit;
        }
        else if (ai_dash_cooldown_current &lt; ai_dash_cooldown) ai_dash_cooldown_current++;
    }
}

//Look Direction
if instance_exists(ai_target)
{
    if (ai_target.x &gt; x) look_direction = 1;   
    else look_direction = 0;
}

//Resolve
if (isMoveable) path_update();

moving = false;
if (ai_movetarget_x) &amp;&amp; (ai_movetarget_y) &amp;&amp; (point_distance(x,y,ai_movetarget_x,ai_movetarget_y) &gt; 3)
{
    moving = true;
}


// Push
if (pushed) &amp;&amp; (isMoveable)
{
    path_end();
    move_step_ext(x + lengthdir_x(push_speed, push_direction),y + lengthdir_y(push_speed, push_direction),0,class_solid,0,0,0,0,0,0);

    push_speed -= push_friction;
    if push_speed &lt; 0 push_speed = 0;
    
    push_duration_current++;
    if push_duration_current &gt;= push_duration
    {
        push_duration_current = 0;
        pushed = false;
        dodging = false;
    }
}
else
{
    push_duration_current = 0;
    pushed = false;
    dodging = false;
    push_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio
audio_emitter_position(audio_emitter, x, y, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Anti-Bug: Teleport If Inside Wall

if collision_point(x,y,obj_limit,false,true) &amp;&amp; (room==room_boss)
{
    //Middle of Boss Room
    x=2440;
    y=1480;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;
draw_self();

//Placeholder Generator Feedback
myGenerator = -1;

if (instance_exists(obj_generator1)) if (obj_generator1.isVulnerable) myGenerator = obj_generator1;
if (instance_exists(obj_generator2)) if (obj_generator2.isVulnerable) myGenerator = obj_generator2;
if (instance_exists(obj_generator3)) if (obj_generator3.isVulnerable) myGenerator = obj_generator3;

if (myGenerator != -1)
{
    if (instance_exists(myGenerator)) 
    {
		myGeneratorBBoxCenter = get_bbox_center(myGenerator);
        draw_set_alpha(0.6);
        draw_line_width_colour(x,y,myGeneratorBBoxCenter[0],myGeneratorBBoxCenter[1],3,c_blue,c_blue);
        draw_set_alpha(1);
    }
}

//Pause Animation
old_image_speed = image_speed;
if (global.pause)
{
    image_speed = 0;
    path_end();
}
else image_speed = old_image_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>36,36</point>
    <point>36,36</point>
  </PhysicsShapePoints>
</object>
