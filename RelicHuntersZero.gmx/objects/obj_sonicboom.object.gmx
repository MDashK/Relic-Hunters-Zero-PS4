<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_sonicboom</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Shit
owner = noone;
damage = 0;
range = 0;
decay = 0;
type = 0;
push_power = 0;
faction = f_player;
distance_travelled = 0;

allowPrecision = false;

piercing = 0;

myAlpha = 1;
fade = 0.2;

speed_reset = false;
old_speed = 0;

image_speed = 0.2;

damage_list = ds_list_create();
hit = noone;

isPrecise = false;

reflection_object_setup(30,-1,image_index);

//Sound
audio_emitter = audio_emitter_create();
audio_emitter_falloff(audio_emitter, global.falloffMediumDist, global.falloffMediumMax, global.falloffMediumFactor);
audio_emitter_gain(audio_emitter,global.soundVolume);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause-Controlled Movement

if (!global.pause)
{
    //Speed Reset After Pause
    if (speed_reset)
    {
        speed = old_speed;
        speed_reset = false;
    }
    
    image_angle = direction;
    distance_travelled += speed;
    speed -= decay;
    if speed &lt; 5 speed = 5;
    
    //Max Range
    
    if distance_travelled &gt; range
    {
        ds_list_destroy(damage_list);
        instance_destroy();
    }
    //Fade if range is almost over
    if (range)
    {
        if (distance_travelled/range) &gt;= 0.9
        {
            myAlpha -= fade;
        }
    }
}
else if (speed_reset == false)
{
    old_speed = speed;
    speed = 0;
    speed_reset = true;
}
/*
depth = -y-99;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio
audio_emitter_position(audio_emitter, x, y, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_projectile_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reflect

if instance_exists(other)
{
    projectile = instance_create(other.x,other.y,obj_projectile_player);

    projectile.speed = other.speed;
    projectile.direction = -other.direction
    projectile.decay = other.decay;
    projectile.range = other.range;
    projectile.push_power = 4;
    projectile.ammo_type = other.ammo_type;
    projectile.faction = f_player;
    projectile.type = other.type;
    projectile.damage = other.damage;
    
    with (other)
    {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="faction_ducan">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy Damage
if faction == f_player &amp;&amp; instance_exists(other)
{
    if (!other.dodging) &amp;&amp; (ds_list_find_index(damage_list,other.id) &lt; 0)
    {
        var originalDamage = damage;
        ds_list_add(damage_list,other.id);
        
        if (global.relic_midnight_beer == 2) damage += round(damage*global.midnightDamageMultiplier ); //Midnight Beer
        if (global.relic_midnight_meal == 2) damage += round(damage*global.midnightDamageMultiplier ); //Midnight Meal
        
        other.aggro += other.aggro_add_hit;
        
        if (other.shield)
        {
            if (global.challengeSupressor) damage = damage*2
            other.energy -= damage;
            audio_play_exclusive(other.audio_emitter,false,1,sfx_shield_hit1,sfx_shield_hit2);
            if (other.energy &lt;= 0) audio_play(other.audio_emitter,false,1,sfx_shield_destroy);
        }
        else 
        {
            if (allowPrecision)
            {
                var otherBBoxCenter = get_bbox_center(other.id);
                var precisionAngle = angle_precision(x,y,otherBBoxCenter[0],otherBBoxCenter[1],direction);
                var angleToTarget = point_direction(x,y,otherBBoxCenter[0],otherBBoxCenter[1]);
                if  (precisionAngle != -1) &amp;&amp; (precisionAngle &lt;= global.precisionAngle) isPrecise = true;
                else isPrecise = false;
                
                if (isPrecise) damage = damage*1.5;
            }
            
            other.hp -= damage;
            
            audio_play(audio_emitter,false,1,sfx_impact_flesh1,sfx_impact_flesh2,sfx_impact_flesh3,sfx_impact_flesh4);
            
            bloodAmount = min(round(damage/5), (global.max_casings-global.count_casings), 5);
            if (bloodAmount) repeat(bloodAmount) blood = instance_create(x,y,fx_blood);
        }
        other.hit_taken = true;
        
        other.pushed = true;
        other.push_direction = direction;
        other.push_speed += push_power;
        
        if (other.hp) &lt;= 0 &amp;&amp; (type == 2)
        {
            other.critical_death = true;
        }
        
        spreadX = irandom_range(-15,15);
        spreadY = irandom_range(-15,15);
        
        damageEffect = instance_create(other.x+spreadX,other.y+spreadY,fx_damage);
        if (isPrecise) &amp;&amp; (!other.shield) damageEffect.critical = true;
        damageEffect.damage = damage;
        
        if (global.count_particles &lt; global.max_particles)
        {
            hit = instance_create(x,y,fx_hit);
            hit.type = ammo_type;
        }
        
        if (!piercing) 
        {
            ds_list_add(global.audio_cleaner,audio_emitter);
            instance_destroy();
        }
        else piercing--;
        
        damage = originalDamage;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="faction_monster">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy Damage
if instance_exists(other)
{
    if (!other.dodging) &amp;&amp; (ds_list_find_index(damage_list,other.id) &lt; 0)
    {
        var originalDamage = damage;
        ds_list_add(damage_list,other.id);
        
        if (global.relic_midnight_beer == 2) damage += round(damage*global.midnightDamageMultiplier ); //Midnight Beer
        if (global.relic_midnight_meal == 2) damage += round(damage*global.midnightDamageMultiplier ); //Midnight Meal
        
        other.aggro += other.aggro_add_hit;
        
        if (other.shield)
        {
            if (global.challengeSupressor) damage = damage*2
            other.energy -= damage;
            audio_play_exclusive(other.audio_emitter,false,1,sfx_shield_hit1,sfx_shield_hit2);
            if (other.energy &lt;= 0) audio_play(other.audio_emitter,false,1,sfx_shield_destroy);
        }
        else 
        {
            if (allowPrecision)
            {
                var otherBBoxCenter = get_bbox_center(other.id);
                var precisionAngle = angle_precision(x,y,otherBBoxCenter[0],otherBBoxCenter[1],direction);
                var angleToTarget = point_direction(x,y,otherBBoxCenter[0],otherBBoxCenter[1]);
                if  (precisionAngle != -1) &amp;&amp; (precisionAngle &lt;= global.precisionAngle) isPrecise = true;
                else isPrecise = false;
                
                if (isPrecise) damage = damage*1.5;
            }
            
            other.hp -= damage;
            
            audio_play(audio_emitter,false,1,sfx_impact_flesh1,sfx_impact_flesh2,sfx_impact_flesh3,sfx_impact_flesh4);
            
            bloodAmount = min(round(damage/5), (global.max_casings-global.count_casings), 5);
            if (bloodAmount) repeat(bloodAmount) blood = instance_create(x,y,fx_blood);
        }
        other.hit_taken = true;
        
        other.pushed = true;
        other.push_direction = direction;
        other.push_speed += push_power;
        
        if (other.hp) &lt;= 0 &amp;&amp; (type == 2)
        {
            other.critical_death = true;
        }
        
        spreadX = irandom_range(-15,15);
        spreadY = irandom_range(-15,15);
        
        damageEffect = instance_create(other.x+spreadX,other.y+spreadY,fx_damage);
        if (isPrecise) &amp;&amp; (!other.shield) damageEffect.critical = true;
        damageEffect.damage = damage;
        
        if (global.count_particles &lt; global.max_particles)
        {
            hit = instance_create(x,y,fx_hit);
            hit.type = ammo_type;
        }
        
        if (!piercing) 
        {
            ds_list_add(global.audio_cleaner,audio_emitter);
            instance_destroy();
        }
        else piercing--;
        
        damage = originalDamage;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="faction_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Damage
if instance_exists(other) 
{
    if (faction == f_player) &amp;&amp; instance_exists(owner)
    {
        //Friendly Fire
        if (global.friendlyFire)
        {
            if (other.myPlayerId != owner.myPlayerId) &amp;&amp; (other.isVulnerable)
            {
                ffDamage = round(damage * global.friendlyFireDamageRatio);
                
                if (!other.dodging) &amp;&amp; (ds_list_find_index(damage_list,other.id) &lt; 0)
                {
                    ds_list_add(damage_list,other.id);
                    
                    if (global.relic_midnight_beer == 2) ffDamage += round(ffDamage*global.midnightDamageMultiplier ); //Midnight Beer
                    if (global.relic_midnight_meal == 2) ffDamage += round(ffDamage*global.midnightDamageMultiplier ); //Midnight Meal
                    
                    if (other.shield)
                    {
                        if (distance_travelled &gt; range) ffDamage = ffDamage/3;
                        other.energy -= ffDamage;
                        audio_play_exclusive(other.audio_emitter,false,1,sfx_shield_hit1,sfx_shield_hit2);
                        if (other.energy &lt;= 0) audio_play_exclusive(other.audio_emitter,false,1,sfx_shield_destroy);
                    }
                    else
                    {
                        if (distance_travelled &gt; range) ffDamage = round(damage/3);
                        other.hp -= ffDamage;
                        audio_play(other.audio_emitter,false,1,sfx_impact_flesh1,sfx_impact_flesh2,sfx_impact_flesh3,sfx_impact_flesh4);
                        
                        bloodAmount = min(round(ffDamage/5), (global.max_casings-global.count_casings), 5);
                        if (bloodAmount) repeat(bloodAmount) blood = instance_create(x,y,fx_blood);
                        
                        if (other.hp &lt;= 0) achievement_give("ACHIEVEMENT_TEAMKILL");
                    }
                    other.hit_taken = true;
                    
                    spreadX = irandom_range(-15,15);
                    spreadY = irandom_range(-15,15);
                    damage_fx = instance_create(other.x+spreadX,other.y+spreadY,fx_damage);
                    damage_fx.damage = ffDamage;
            
                    ds_list_add(global.audio_cleaner,audio_emitter);
                    if (!instance_exists(hit)) &amp;&amp; (global.count_particles &lt; global.max_particles)
                    {
                        hit = instance_create(x,y,fx_hit);
                        hit.type = ammo_type;
                    }
                    
                    if (!piercing) 
                    {
                        ds_list_add(global.audio_cleaner,audio_emitter);
                        instance_destroy();
                    }
                    else piercing--;
                }
            }
        }
    }
    else
    {
        spreadX = irandom_range(-15,15);
        spreadY = irandom_range(-15,15);
        
        if (!other.dodging) &amp;&amp; (other.isVulnerable)
        {
            if (other.shield)
            {
                if (other.superShield) damage = 0;
                if (distance_travelled &gt; range) damage = round(damage/3);
                if (global.challengeSupressor) damage = damage*2;
                other.energy -= damage;
                
                audio_play_exclusive(other.audio_emitter,false,1,sfx_shield_hit1,sfx_shield_hit2);
                if (other.energy &lt;= 0) audio_play_exclusive(other.audio_emitter,false,1,sfx_shield_destroy);
            }
            else
            {
                if (distance_travelled &gt; range) damage = round(damage/3);
                other.hp -= damage;
                audio_play(other.audio_emitter,false,1,sfx_impact_flesh1,sfx_impact_flesh2,sfx_impact_flesh3,sfx_impact_flesh4);
                
                bloodAmount = min(round(damage/5), (global.max_casings-global.count_casings), 5);
                if (bloodAmount) repeat(bloodAmount) blood = instance_create(x,y,fx_blood);
            }
            other.hit_taken = true;
            
            
            damage_fx = instance_create(other.x+spreadX,other.y+spreadY,fx_damage);
            damage_fx.damage = damage;
    
            ds_list_add(global.audio_cleaner,audio_emitter);
            if (!instance_exists(hit)) &amp;&amp; (global.count_particles &lt; global.max_particles)
            {
                hit = instance_create(x,y,fx_hit);
                hit.type = ammo_type;
            }
            instance_destroy();
        }
        
        if (other.dodging) &amp;&amp; (ds_list_find_index(damage_list,other.id) &lt; 0)
        {
            ds_list_add(damage_list,other.id);
            damageEffect = instance_create(other.x+spreadX,other.y+spreadY,fx_damage);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Draw

if (image_angle &gt; 90) &amp;&amp; (image_angle &lt; 270) image_yscale = -1;
else image_yscale = 1;

//Pause Animation
old_image_speed = image_speed;
if (global.pause)
{
    image_speed = 0;
}
else 
{
    image_speed = old_image_speed;
}

//Draw
draw_sprite_ext(sprite_index,image_index,x,y,1,image_yscale,image_angle,c_white,myAlpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>18,17</point>
    <point>18,18</point>
  </PhysicsShapePoints>
</object>
