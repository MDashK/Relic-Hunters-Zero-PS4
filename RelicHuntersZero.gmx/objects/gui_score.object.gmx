<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main

duration = room_speed*2;
duration_current = 0;
value = 0;
myX = display_get_width()*0.5;
myY = display_get_height()*0.23;

headshot = false;
coin = false;
destroy = false;

//Animation
size_start = 0.5;
size_max = 1.75;
size_end = 1;
size_accel_up = 0.06;
size_accel_down = 0.04;
size_friction = 0.02;
size_speed_up = 0.15;
size_speed_down = 0.1;
size_speed_current = 0;

orientation = 0; //0=growth, 1=shrink, 2=stable
size_current = size_start;

//There Can Be Only One
previous_value = 0;
kill_count = 0;

while (instance_number(gui_score) &gt; 1) 
{
    other_gui = instance_find(gui_score,0);
    if instance_exists(other_gui) &amp;&amp; (other_gui != id)
    {
        previous_value = other_gui.value;
        kill_count+= other_gui.kill_count;
        with (other_gui) instance_destroy();
    }
    else {
        other_gui = instance_find(gui_score,1);
        if instance_exists(other_gui) &amp;&amp; (other_gui != id)
        {
        previous_value = other_gui.value;
        kill_count+= other_gui.kill_count;
        with (other_gui) instance_destroy();
        }
    }
}
/*var testScores = instance_number(gui_score);
if (testScores &gt; 1)
{
    for (i=0; i&lt;testScores; i++)
    {
        other_gui = instance_find(gui_score,i);
        if instance_exists(other_gui) &amp;&amp; (other_gui != id)
        {
            previous_value = other_gui.value;
            kill_count+= other_gui.kill_count;
            with (other_gui) instance_destroy();
        }
    }
}*/

value += previous_value;
setup = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup
if (!setup)
{
    if (!coin)
    {
        if kill_count == 1 myString = loc_key("HUD_KILL1");
        
        if kill_count == 2
        {
            myString = loc_key("HUD_KILL2");
            value += global.score_doublekill;
            if (global.gameMode == gamemode_adventure) global.score_total += global.score_doublekill;
            else if (global.gameMode == gamemode_endless) 
            {
                global.bountyEndless += global.score_doublekill;
                global.scoreEndless += global.score_doublekill;
            }
        }
        
        if kill_count == 3 
        {
            myString = loc_key("HUD_KILL3");
            value += global.score_triplekill;
            global.score_total += global.score_triplekill;
        }
        
        if kill_count &gt; 3 
        {
            if (kill_count == 4) myString = loc_key("HUD_KILL4");
            if (kill_count == 5) myString = loc_key("HUD_KILL5");
            if (kill_count == 6) myString = loc_key("HUD_KILL6");
            if (kill_count == 7) myString = loc_key("HUD_KILL7");
            if (kill_count == 8) myString = loc_key("HUD_KILL8");
            if (kill_count == 9) myString = loc_key("HUD_KILL9");
            if (kill_count &gt;= 10) myString = loc_key("HUD_KILL10");
            
            value += global.score_multikill;
            if (global.gameMode == gamemode_adventure) global.score_total += global.score_multikill;
            else if (global.gameMode == gamemode_endless) 
            {
                global.bountyEndless += global.score_multikill;
                global.scoreEndless += global.score_multikill;
            }
            //Achievement
            if (kill_count &gt;= 10) achievement_give("ACHIEVEMENT_KILLCOMBO");
        }
    }
    else myString = loc_key("HUD_BOUNTY");
    setup = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation

if (headshot) myString = loc_key("HUD_PRECISIONKILL");

if (destroy) instance_destroy();

duration_current++;
if (duration_current &gt;= duration)
{
    global.total_value = 0;
    instance_destroy();
}


if orientation == 0
{
    size_speed_current += size_accel_up;
    size_speed_current -= size_friction;
    if size_current &gt;= size_max
    {
        size_speed_current = 0;
        orientation = 1;
    }
}

if orientation == 1
{
    size_speed_current -= size_accel_down;
    size_speed_current += size_friction;
    if size_current &lt;= size_end
    {
        size_speed_current = 0;
        orientation = 2;
    }
}

size_current += size_speed_current;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* I am now drawing this in the controller_main GUI script

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
