<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_redbarrel</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Shit
image_index = image_number-1;
image_speed = 0;

isInvulnerable = true;
invulnerableTime = 0;
invulnerableDuration = room_speed*0.5;

trampleDamage = 200;
damage = 0;
detonationRadius = 100;
range = 0;
decay = 0;
type = 0;
push_power = 0;
faction = f_player;

piercing = 0;

speed_reset = false;
old_speed = 0;

image_speed = 0.5;

explode = false;

shake = 0;
shake_direction = 0;
shake_per_step = 0.15;
shake_max = 5;
drawX = x;
drawY = y;

audio_emitter = audio_emitter_create();
audio_emitter_falloff(audio_emitter, global.falloffMediumDist, global.falloffMediumMax, global.falloffMediumFactor);
audio_emitter_gain(audio_emitter,global.soundVolume);

alarm[0] = room_speed*0.3; //delayed loop sound

hitList = ds_list_create();

//Target Acquisition

curveRatio = 0.07;
angleDiffMax = 100;
angleDiffMin = 5;
curveDistanceMax = 1200;
curveDistanceMin = 100;

curveTarget = noone;
targetList = ds_priority_create();
targetSearch = false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle Trail

global.smoke_trail = part_system_create();
ds_list_add(global.particle_list,global.smoke_trail);
part_system_depth( global.smoke_trail, depth-2 );
part_system_automatic_update(global.smoke_trail, false);

smoke_particle = part_type_create();
ds_list_add(global.particle_type_list, smoke_particle);
part_type_shape(smoke_particle, pt_shape_square);
part_type_size(smoke_particle, 0.5, 2, 0, 0);
part_type_scale(smoke_particle,0.15,0.15);
part_type_colour1(smoke_particle, c_white);
part_type_alpha2(smoke_particle, 0.5, 0);
part_type_speed(smoke_particle, 0.1, 0.25, 0, 0);
part_type_direction(smoke_particle, 90, 90, 0, 0);
part_type_gravity(smoke_particle, 0, 270);
part_type_orientation(smoke_particle, 0, 0, 0, 0, 1);
part_type_blend(smoke_particle, true);
part_type_life(smoke_particle, room_speed*0.3, room_speed*0.5);

smoke_emitter = part_emitter_create(global.smoke_trail);
part_emitter_region(global.smoke_trail, smoke_emitter, x-5, x+5, y-5, y+5, ps_shape_ellipse, ps_distr_linear);
part_emitter_burst(global.smoke_trail, smoke_emitter, smoke_particle, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///CleanUp
audio_emitter_free(audio_emitter);
ds_priority_destroy(targetList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play Loop Sound

audio_play(audio_emitter,true,1,sfx_rocket_loop);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause-Controlled Movement

if (!global.pause)
{
    //Speed Reset After Pause
    if (speed_reset)
    {
        speed = old_speed;
        speed_reset = false;
    }
    
    //Target Search
    if (!targetSearch)
    {
        var enemyCount = instance_number(class_enemy);
        for (var i=0; i&lt;enemyCount; i++)
        {
            var targetCandidate = instance_find(class_enemy,i);
            var targetDistance = point_distance(x,y,targetCandidate.x,targetCandidate.y);
            var targetAngleDiff = angle_difference(direction, point_direction(x,y,targetCandidate.x,targetCandidate.y));
            
            if (targetDistance &lt; curveDistanceMax) &amp;&amp; (targetDistance &gt; curveDistanceMin)
            {
                if (collision_line(x,y,targetCandidate.x,targetCandidate.y,obj_limit,false,true) &lt; 0)
                {
                    ds_priority_add(targetList, targetCandidate.id, abs(targetAngleDiff));
                }
            }
        }

        if (!ds_priority_empty(targetList))
        {
            curveTarget = ds_priority_find_min(targetList);
        }
        
        targetSearch = true;
    }
    
    //Target Adjustment
    if (instance_exists(curveTarget))
    {
        var targetDir = point_direction(x,y,curveTarget.x,curveTarget.y);
        var angleDiff = angle_difference(direction,targetDir);
        if (abs(angleDiff) &lt;= angleDiffMax) &amp;&amp; (abs(angleDiff) &gt; angleDiffMin)
        {
            var rotationDirection;
            if (angleDiff) rotationDirection = -1;
            else rotationDirection = 1;
            
            direction += rotationDirection * (speed*curveRatio);
        }
    }
    
    //Movement
    image_angle = direction;
    speed -= decay;
    if speed &lt; 5 speed = 5;
    
    
    //Particle Emission
    var diffHorizontal = ((bbox_right - bbox_left)/2);
    var diffVertical = ((bbox_bottom - bbox_top)/2);
    
    var collisionX = bbox_left + diffHorizontal;
    var collisionY = bbox_top + diffVertical;
    
    var radius = min(diffHorizontal,diffVertical) - 15;
    
    var emissionX = collisionX + lengthdir_x(radius,direction+180);
    var emissionY = collisionY + lengthdir_y(radius,direction+180);
    
    part_system_depth(global.smoke_trail,depth+1);
    part_type_direction(smoke_particle, (direction+180)-20,(direction+180)+20, 0, 5);
    part_emitter_region(global.smoke_trail, smoke_emitter, emissionX-5, emissionX+5, emissionY-5, emissionY+5, ps_shape_ellipse, ps_distr_linear);
    part_emitter_burst(global.smoke_trail, smoke_emitter, smoke_particle, 1);
    
    
    //Shake
    if shake &gt; shake_max shake = shake_max;
         
    drawX = x+lengthdir_x(shake,shake_direction);
    drawY = y+lengthdir_y(shake,shake_direction);
        
    shake += shake_per_step;
    shake_direction = irandom(359);
}
else if (speed_reset == false)
{
    old_speed = speed;
    speed = 0;
    speed_reset = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Audio
audio_emitter_position(audio_emitter, x, y, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Invulnerable

if (isInvulnerable)
{
    invulnerableTime++;
    if (invulnerableTime &gt;= invulnerableDuration) isInvulnerable = false;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Explode
if (explode)
{
    var explosion = instance_create(x,y,fx_explosion_regular);
    explosion.radius = detonationRadius;
    explosion.damage = 300;
    
    instance_destroy();
}






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Explode unless invulnerable
if (!isInvulnerable) explode = true;
else
{
    if (!ds_list_find_index(hitList,id))
    {
        ds_list_add(hitList,id);
        other.hp -= trampleDamage;
        other.shake_direction = direction;
        other.hitDirection = direction;
        other.shake += 4;
        other.hit_taken = true;   
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_limit">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Explode = true
explode = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="class_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Explode unless invulnerable, but deals trampleDamage
if (!isInvulnerable) explode = true;
else
{
    spreadX = irandom_range(-15,15); spreadY = irandom_range(-15,15);

    if (!other.dodging) &amp;&amp; (ds_list_find_index(hitList,other.id) &lt; 0)
    {
        ds_list_add(hitList,other.id);
        other.aggro += other.aggro_add_hit;
        
        if (other.shield)
        {
            other.energy -= trampleDamage;
            audio_play_exclusive(other.audio_emitter,false,1,sfx_shield_hit1,sfx_shield_hit2);
            if (other.energy &lt;= 0) audio_play(other.audio_emitter,false,1,sfx_shield_destroy);
        }
        else 
        {
            other.hp -= trampleDamage;
            
            audio_play(audio_emitter,false,1,sfx_impact_flesh1,sfx_impact_flesh2,sfx_impact_flesh3,sfx_impact_flesh4);
            
            bloodAmount = min(round(trampleDamage/5), (global.max_casings-global.count_casings), 5);
            if (bloodAmount) repeat(bloodAmount) blood = instance_create(x,y,fx_blood);
        }
        other.hit_taken = true;
        
        other.pushed = true;
        other.push_direction = direction;
        other.push_speed += push_power;
        
        
        
        trampleDamageEffect = instance_create(other.x+spreadX,other.y+spreadY,fx_damage);
        if (type == 2) &amp;&amp; (!other.shield) trampleDamageEffect.critical = true;
        trampleDamageEffect.damage = trampleDamage;
        
        if (global.count_particles &lt; global.max_particles)
        {
            hit = instance_create(x,y,fx_hit);
            hit.type = ammo_type;
        }
    }
    
    if (other.dodging) &amp;&amp; (ds_list_find_index(hitList,other.id) &lt; 0)
    {
        ds_list_add(hitList,other.id);
        damageEffect = instance_create(other.x+spreadX,other.y+spreadY,fx_damage);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="faction_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Explode unless invulnerable

if (!isInvulnerable)
{
    explode = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Draw

//if (image_angle &lt; 270) &amp;&amp; (image_angle &gt; 90) image_yscale = -1;

//Draw
//coloca image_angle se quiser que ele rode igual bala
draw_sprite_ext(sprite_index,image_index,drawX,drawY,image_xscale,image_yscale,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>18,17</point>
    <point>18,18</point>
  </PhysicsShapePoints>
</object>
