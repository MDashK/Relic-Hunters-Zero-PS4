<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Shit
distance_ratio = 3;
distance_ratio_aiming = 1;
max_distance = 200;

screen_shake = 0;
shake_direction = 0;
shake_recovery = 3;
shake_max = 200;

zoom = 1;
zoom_speed_in = 0.02;
zoom_speed_out = 0.01;
zoom_current = zoom;
zoom_stamina_min = 70; //percent

aim_locked = false;
distance = 0;
angle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

if instance_exists(class_player)
{
    //Camera Position
    //var distance,angle;
    //angle = point_direction(class_player.x,class_player.y,mouse_x,mouse_y);
    
    if (class_player.aiming) 
    {
        //distance = point_distance(class_player.x,class_player.y,mouse_x,mouse_y) /distance_ratio_aiming;
        //if distance &gt; max_distance*1.5 distance = max_distance*1.5;
        if (!aim_locked) 
        {
            angle = point_direction(class_player.x,class_player.y,mouse_x,mouse_y);
            distance = point_distance(class_player.x,class_player.y,mouse_x,mouse_y);
            aim_locked = true;
        }
    }
    else 
    {
        aim_locked = false;
        distance = point_distance(class_player.x,class_player.y,mouse_x,mouse_y) / distance_ratio;
        if distance &gt; max_distance distance = max_distance;
        angle = point_direction(class_player.x,class_player.y,mouse_x,mouse_y);
    }
    
    x = class_player.x + lengthdir_x(distance,angle);
    y = class_player.y + lengthdir_y(distance,angle);
    
    //Screen Zoom
    if (class_player.sprinting) || (class_player.dodging) || (class_player.aiming) zoom = 0.8;
    else zoom = 1;
    
    
    //Screen Shake
    if (screen_shake)
    {
        if screen_shake &gt; shake_max screen_shake = shake_max;
         
        x = x+lengthdir_x(screen_shake,shake_direction);
        y = y+lengthdir_y(screen_shake,shake_direction);
        
        screen_shake -= shake_recovery;
        shake_direction = irandom(359);
        
        if screen_shake &lt; 0 screen_shake = 0;
    }
}


//Zoom Control
if zoom_current != zoom
{
    if zoom_current &gt; zoom &amp;&amp; instance_exists(class_player)
    {
        zoom_current -= min(zoom_speed_in,zoom_current-zoom);
        
        if (class_player.aiming) &amp;&amp; mouse_check_button(mb_right)
        {
            pos_room_x = x-view_xview[0];
            pos_room_y = y-view_yview[0];
            ratio_x = display_get_width()/view_wview[0];
            ratio_y = display_get_height()/view_hview[0];
            display_mouse_set(pos_room_x*ratio_x,pos_room_y*ratio_y);
        }
    }
    else zoom_current += min(zoom_speed_out,zoom-zoom_current);
}

view_wview[0] = 1280*zoom_current;
view_hview[0] = 720*zoom_current;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
