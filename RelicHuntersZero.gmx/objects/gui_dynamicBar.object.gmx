<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-999999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
owner = noone;

hp = 999;
hpMax = 999;
shield = 999;
shieldMax = 999;

drawShield = false;
drawHealth = false;

myAlpha = 0;
myAlphaSpeed = 0.025;

barWidth = 60;
barHeight = 6;

barShields = 1;
barHp = 2;
draw_healthbar_delayed_init(barShields);
draw_healthbar_delayed_init(barHp);

charBarDelaySpeed = 0.012;
charBarDelayTime = room_speed*0.6;

healthColor = make_color_rgb(184,49,35);
shieldColor = make_color_rgb(50,133,158);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dynamic Bar

//Update Values
if (owner) &amp;&amp; (instance_exists(owner))
{
    hp = owner.hp;
    hpMax = owner.hp_max;
    shield = owner.energy;
    if (owner.energy_max) shieldMax = owner.energy_max + owner.overshield;
    else shieldMax = 0; 
}
else instance_destroy();

//Set State

drawShield = false;
drawHealth = false;

if (shield) &amp;&amp; (shield &lt; shieldMax) drawShield = true;
if (!shield) drawHealth = true;

//Special Case for Biu
if (!shieldMax) if (hp &gt;= hpMax) drawHealth = false;

//Animate Alpha
if (drawShield) || (drawHealth) myAlpha = 1;
else if (myAlpha != 0)
{
    myAlpha -= myAlphaSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

if (instance_exists(owner)) //TODO: separate the update from the draw and get all this logic code out of the Draw event
{
    var topX = owner.x - barWidth/2;
    var topY = owner.y - 90;

    draw_set_alpha(0.6 * myAlpha);
    draw_set_colour(c_black);
    draw_rectangle(topX,topY,topX+barWidth,topY+barHeight,false);
    draw_set_alpha(1 * myAlpha);
    
    if (!shieldMax) draw_set_alpha(0);
    draw_healthbar_delayed(barShields, topX-2,topY-2,topX+barWidth-2,topY+barHeight-2, shield, shieldMax, shieldColor, c_black, c_white, charBarDelaySpeed, charBarDelayTime, 0, false, false);
    draw_set_alpha(1 * myAlpha);
        
    if (!drawHealth) draw_set_alpha(0);
    draw_healthbar_delayed(barHp, topX-2,topY-2,topX+barWidth-2,topY+barHeight-2, hp, hpMax, healthColor, c_black, c_white, charBarDelaySpeed, charBarDelayTime, 0, false, false);
    
    //End
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
